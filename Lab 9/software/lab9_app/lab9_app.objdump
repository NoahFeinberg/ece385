
lab9_app.elf:     file format elf32-littlenios2
lab9_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010468 memsz 0x00010468 flags r-x
    LOAD off    0x00011488 vaddr 0x10010488 paddr 0x100125b0 align 2**12
         filesz 0x00002128 memsz 0x00002128 flags rw-
    LOAD off    0x000136d8 vaddr 0x100146d8 paddr 0x100146d8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd74  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000558  1000ff30  1000ff30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002128  10010488  100125b0  00011488  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100146d8  100146d8  000136d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000135b0  2**0
                  CONTENTS
  7 .sdram        00000000  10014834  10014834  000135b0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000135b0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ca8  00000000  00000000  000135d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002351a  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008dd5  00000000  00000000  0003779a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ada8  00000000  00000000  0004056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002118  00000000  00000000  0004b318  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031fb  00000000  00000000  0004d430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  0005062b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00067378  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00067388  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b8f8  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006b8fb  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b907  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b908  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b909  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b90d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b911  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006b915  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006b920  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006b92b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006b936  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0006b93e  2**0
                  CONTENTS, READONLY
 30 .jdi          00003f9e  00000000  00000000  0006b964  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005cef4  00000000  00000000  0006f902  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1000ff30 l    d  .rodata	00000000 .rodata
10010488 l    d  .rwdata	00000000 .rwdata
100146d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10014834 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9_app_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10000f10 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100101ce l     O .rodata	00000010 zeroes.4181
100101de l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100035b8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10005160 l     F .text	00000008 __fp_lock
10005168 l     F .text	00000008 __fp_unlock
1000517c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010ac4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010f08 l     O .rwdata	00000020 lc_ctype_charset
10010ee8 l     O .rwdata	00000020 lc_message_charset
10010f28 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10010210 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008574 l     F .text	000000fc __sprint_r.part.0
10010344 l     O .rodata	00000010 blanks.4125
10010334 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d874 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d99c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d9c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000dad0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000dbcc l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000dcb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000de94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100125a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1000e118 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e268 l     F .text	00000038 alt_dev_reg
10011510 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e544 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000e748 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000eec4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f35c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f4b4 l     F .text	00000050 alt_get_errno
1000f504 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10007bb4 g     F .text	00000074 _mprec_log10
100001f8 g     F .text	000000bc charToHex
10007ca0 g     F .text	0000008c __any_on
10009fa0 g     F .text	00000054 _isatty_r
1001021c g     O .rodata	00000028 __mprec_tinytens
1000dddc g     F .text	00000078 alt_main
10001204 g     F .text	000000b8 _puts_r
10014734 g     O .bss	00000100 alt_irq
10009ff4 g     F .text	0000005c _lseek_r
100125b0 g       *ABS*	00000000 __flash_rwdata_start
1000c294 g     F .text	00000084 .hidden __eqdf2
10014834 g       *ABS*	00000000 __alt_heap_start
100011c8 g     F .text	0000003c printf
1000031c g     F .text	00000028 RotWord
1000a21c g     F .text	0000009c _wcrtomb_r
10000344 g     F .text	000000a8 SubWord
1000846c g     F .text	0000005c __sseek
100054c4 g     F .text	00000010 __sinit
1000a0ac g     F .text	00000154 __swbuf_r
10005f3c g     F .text	0000007c _setlocale_r
1000531c g     F .text	00000078 __sfmoreglue
100002b4 g     F .text	00000068 charsToHex
1000de74 g     F .text	00000020 __malloc_unlock
10006a64 g     F .text	0000015c memmove
100054ac g     F .text	00000018 _cleanup
10006ce4 g     F .text	000000a8 _Balloc
1000c318 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000ff30 g     O .rodata	00000100 aes_sbox
10009f48 g     F .text	00000058 _fstat_r
100146f0 g     O .bss	00000004 errno
100083e8 g     F .text	00000008 __seofread
100146f8 g     O .bss	00000004 alt_argv
10010488 g     O .rwdata	00000600 gf_mul
100005d8 g     F .text	00000104 ShiftRows
1001a570 g       *ABS*	00000000 _gp
10011390 g     O .rwdata	00000180 alt_fd_list
1000f914 g     F .text	00000090 alt_find_dev
10001064 g     F .text	00000138 memcpy
10005170 g     F .text	0000000c _cleanup_r
1000d69c g     F .text	000000d0 .hidden __floatsidf
1000f43c g     F .text	00000078 alt_io_redirect
1000c3f8 g     F .text	000000e0 .hidden __ltdf2
1000ff30 g       *ABS*	00000000 __DTOR_END__
100012bc g     F .text	00000014 puts
100082cc g     F .text	00000074 __fpclassifyd
10007b10 g     F .text	000000a4 __ratio
10009aac g     F .text	00000024 __vfiprintf_internal
1000e944 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000119c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000102c g     F .text	00000008 .hidden __udivsi3
1000db20 g     F .text	000000ac isatty
1001026c g     O .rodata	000000c8 __mprec_tens
10005fb8 g     F .text	0000000c __locale_charset
100146ec g     O .bss	00000004 __malloc_top_pad
10012578 g     O .rwdata	00000004 __mb_cur_max
10005fe8 g     F .text	0000000c _localeconv_r
1000710c g     F .text	0000003c __i2b
10005928 g     F .text	000004a4 __sfvwrite_r
10008340 g     F .text	00000054 _sbrk_r
1000a050 g     F .text	0000005c _read_r
10012598 g     O .rwdata	00000004 alt_max_fd
10009c58 g     F .text	00000100 _fclose_r
10005130 g     F .text	00000030 fflush
100146e8 g     O .bss	00000004 __malloc_max_sbrked_mem
10000ac4 g     F .text	000001e8 KeyExpansion
1000b078 g     F .text	0000089c .hidden __adddf3
100078b8 g     F .text	0000011c __b2d
1000aa5c g     F .text	0000061c .hidden __umoddi3
1000dd00 g     F .text	000000dc lseek
10012570 g     O .rwdata	00000004 _global_impure_ptr
10007d2c g     F .text	000005a0 _realloc_r
10014834 g       *ABS*	00000000 __bss_end
1000f26c g     F .text	000000f0 alt_iic_isr_register
1000f7f0 g     F .text	00000104 alt_tick
1000a41c g     F .text	00000640 .hidden __udivdi3
10009d6c g     F .text	00000184 _fputwc_r
10010244 g     O .rodata	00000028 __mprec_bigtens
10006ef0 g     F .text	00000104 __s2b
1000d76c g     F .text	000000a4 .hidden __floatunsidf
10007660 g     F .text	00000060 __mcmp
100054e4 g     F .text	00000018 __fp_lock_all
1000f220 g     F .text	0000004c alt_ic_irq_enabled
1000f758 g     F .text	00000098 alt_alarm_stop
10014700 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10011368 g     O .rwdata	00000028 alt_dev_null
1000eea8 g     F .text	0000001c alt_dcache_flush_all
10006ff4 g     F .text	00000068 __hi0bits
1000d614 g     F .text	00000088 .hidden __fixdfsi
100125b0 g       *ABS*	00000000 __ram_rwdata_end
10012590 g     O .rwdata	00000008 alt_dev_list
1000e168 g     F .text	00000100 write
10010488 g       *ABS*	00000000 __ram_rodata_end
1000da18 g     F .text	000000b8 fstat
1000c3f8 g     F .text	000000e0 .hidden __ledf2
100073d8 g     F .text	00000140 __pow5mult
10008688 g     F .text	00001424 ___vfiprintf_internal_r
100146e0 g     O .bss	00000004 __nlocale_changed
10001034 g     F .text	00000008 .hidden __umodsi3
10014834 g       *ABS*	00000000 end
1000e480 g     F .text	000000c4 altera_avalon_jtag_uart_init
1000ff30 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d810 g     F .text	00000064 .hidden __clzsi2
1000eb50 g     F .text	00000218 altera_avalon_jtag_uart_write
100054d4 g     F .text	00000004 __sfp_lock_acquire
1000697c g     F .text	000000e8 memchr
10001368 g     F .text	000020fc ___vfprintf_internal_r
10005638 g     F .text	000002f0 _free_r
10005fc4 g     F .text	00000010 __locale_mb_cur_max
100006dc g     F .text	0000033c MixColumns
1000fd68 g     F .text	00000194 __call_exitprocs
100146dc g     O .bss	00000004 __mlocale_changed
1001257c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10014704 g     O .bss	00000004 _alt_tick_rate
10007518 g     F .text	00000148 __lshift
10014708 g     O .bss	00000004 _alt_nticks
1000dee4 g     F .text	00000104 read
1000e2d4 g     F .text	00000048 alt_sys_init
1000fc54 g     F .text	00000114 __register_exitproc
10007148 g     F .text	00000290 __multiply
1000e7f0 g     F .text	00000068 altera_avalon_jtag_uart_close
1000103c g     F .text	00000028 .hidden __mulsi3
10010488 g       *ABS*	00000000 __ram_rwdata_start
1000ff30 g       *ABS*	00000000 __ram_rodata_start
1001470c g     O .bss	00000028 __malloc_current_mallinfo
100079d4 g     F .text	0000013c __d2b
1000e31c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010030 g     O .rodata	00000100 aes_invsbox
1000fab8 g     F .text	000000d4 alt_get_fd
10009b2c g     F .text	00000054 _close_r
1000fbd8 g     F .text	0000007c memcmp
1000e3dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10000a18 g     F .text	000000ac AES
10014834 g       *ABS*	00000000 __alt_stack_base
1000e42c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003488 g     F .text	00000130 __swsetup_r
1000b914 g     F .text	00000980 .hidden __divdf3
10005394 g     F .text	00000118 __sfp
10007c28 g     F .text	00000078 __copybits
10010f60 g     O .rwdata	00000408 __malloc_av_
100054e0 g     F .text	00000004 __sinit_lock_release
1000c4d8 g     F .text	0000086c .hidden __muldf3
10008394 g     F .text	00000054 __sread
1000f9a4 g     F .text	00000114 alt_find_file
1000ef14 g     F .text	000000a4 alt_dev_llist_insert
1000de54 g     F .text	00000020 __malloc_lock
1000e068 g     F .text	000000b0 sbrk
10004f08 g     F .text	00000228 _fflush_r
1000053c g     F .text	0000009c SubBytes
10009b80 g     F .text	000000d8 _calloc_r
100146d8 g       *ABS*	00000000 __bss_start
10006bc0 g     F .text	00000124 memset
10000cac g     F .text	00000264 main
100146fc g     O .bss	00000004 alt_envp
100146e4 g     O .bss	00000004 __malloc_max_total_mem
1000e37c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000a200 g     F .text	0000001c __swbuf
100084c8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10009d58 g     F .text	00000014 fclose
100037e0 g     F .text	00001728 _dtoa_r
100061d4 g     F .text	000007a8 _malloc_r
1000a390 g     F .text	00000030 __ascii_wctomb
1001259c g     O .rwdata	00000004 alt_errno
10005dcc g     F .text	000000b8 _fwalk
10000f7c g     F .text	00000054 .hidden __divsi3
10005514 g     F .text	00000124 _malloc_trim_r
1000ff30 g       *ABS*	00000000 __CTOR_END__
100084d0 g     F .text	000000a4 strcmp
1000ff30 g       *ABS*	00000000 __flash_rodata_start
1000ff30 g       *ABS*	00000000 __DTOR_LIST__
1000c294 g     F .text	00000084 .hidden __nedf2
1000e2a0 g     F .text	00000034 alt_irq_init
1000dfe8 g     F .text	00000080 alt_release_fd
10010354 g     O .rodata	00000100 .hidden __clz_tab
100146d8 g     O .bss	00000004 _PathLocale
1000fb8c g     F .text	00000014 atexit
10009ad0 g     F .text	0000005c _write_r
10005ff4 g     F .text	0000001c setlocale
10012574 g     O .rwdata	00000004 _impure_ptr
100146f4 g     O .bss	00000004 alt_argc
1000f014 g     F .text	0000005c _do_dtors
10005fe0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10007858 g     F .text	00000060 __ulp
100054fc g     F .text	00000018 __fp_unlock_all
10012588 g     O .rwdata	00000008 alt_fs_list
10010a88 g     O .rwdata	0000003c Rcon
10000020 g       *ABS*	00000000 __ram_exceptions_start
10006010 g     F .text	0000000c localeconv
1000f08c g     F .text	00000050 alt_ic_isr_register
100125b0 g       *ABS*	00000000 _edata
10014834 g       *ABS*	00000000 _end
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000e858 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1000f17c g     F .text	000000a4 alt_ic_irq_disable
100083f0 g     F .text	0000007c __swrite
10012580 g     O .rwdata	00000004 __malloc_trim_threshold
1000f8f4 g     F .text	00000020 altera_nios2_qsys_irq_init
10005fd4 g     F .text	0000000c __locale_msgcharset
1000fba0 g     F .text	00000038 exit
10005e84 g     F .text	000000b8 _fwalk_reent
100076c0 g     F .text	00000198 __mdiff
10000fd0 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100054d8 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000fefc g     F .text	00000034 _exit
1000ed68 g     F .text	00000140 alt_alarm_start
1000601c g     F .text	000001b8 __smakebuf_r
100012d0 g     F .text	00000098 strlen
1000f5f8 g     F .text	00000160 open
1000c318 g     F .text	000000e0 .hidden __gedf2
10012584 g     O .rwdata	00000004 __wctomb
10008670 g     F .text	00000018 __sprint_r
1000f070 g     F .text	0000001c alt_icache_flush_all
100125a4 g     O .rwdata	00000004 alt_priority_mask
1000f0dc g     F .text	000000a0 alt_ic_irq_enable
10003464 g     F .text	00000024 __vfprintf_internal
1000a3c0 g     F .text	0000005c _wctomb_r
1000cd44 g     F .text	000008d0 .hidden __subdf3
1000705c g     F .text	000000b0 __lo0bits
100125a8 g     O .rwdata	00000008 alt_alarm_list
100003ec g     F .text	00000150 AddRoundKey
1000efb8 g     F .text	0000005c _do_ctors
1000a2b8 g     F .text	000000d8 wcrtomb
1000d8c4 g     F .text	000000d8 close
1000dc30 g     F .text	00000080 alt_load
10009ef0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
100054dc g     F .text	00000004 __sinit_lock_acquire
10006db4 g     F .text	0000013c __multadd
10006d8c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	1091cd04 	addi	r2,r2,18228
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	1091cd04 	addi	r2,r2,18228
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6a95c14 	ori	gp,gp,42352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	1091b614 	ori	r2,r2,18136

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d20d14 	ori	r3,r3,18484

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000dc300 	call	1000dc30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000dddc0 	call	1000dddc <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <charToHex>:
uint Rcon[]={0x01000000,0x02000000,0x04000000,0x08000000,0x10000000,0x20000000,
             0x40000000,0x80000000,0x1b000000,0x36000000,0x6c000000,0xd8000000,
             0xab000000,0x4d000000,0x9a000000};

char charToHex(char c)
{
100001f8:	defffd04 	addi	sp,sp,-12
100001fc:	df000215 	stw	fp,8(sp)
10000200:	df000204 	addi	fp,sp,8
10000204:	2005883a 	mov	r2,r4
10000208:	e0bfff05 	stb	r2,-4(fp)
	char hex = c;
1000020c:	e0bfff03 	ldbu	r2,-4(fp)
10000210:	e0bffe05 	stb	r2,-8(fp)

	if (hex >= '0' && hex <= '9')
10000214:	e0bffe07 	ldb	r2,-8(fp)
10000218:	10800c10 	cmplti	r2,r2,48
1000021c:	1000071e 	bne	r2,zero,1000023c <charToHex+0x44>
10000220:	e0bffe07 	ldb	r2,-8(fp)
10000224:	10800e88 	cmpgei	r2,r2,58
10000228:	1000041e 	bne	r2,zero,1000023c <charToHex+0x44>
		hex -= '0';
1000022c:	e0bffe03 	ldbu	r2,-8(fp)
10000230:	10bff404 	addi	r2,r2,-48
10000234:	e0bffe05 	stb	r2,-8(fp)
10000238:	00001906 	br	100002a0 <charToHex+0xa8>
	else if (hex >= 'A' && hex <='F')
1000023c:	e0bffe07 	ldb	r2,-8(fp)
10000240:	10801050 	cmplti	r2,r2,65
10000244:	10000a1e 	bne	r2,zero,10000270 <charToHex+0x78>
10000248:	e0bffe07 	ldb	r2,-8(fp)
1000024c:	108011c8 	cmpgei	r2,r2,71
10000250:	1000071e 	bne	r2,zero,10000270 <charToHex+0x78>
	{
		hex -= 'A';
10000254:	e0bffe03 	ldbu	r2,-8(fp)
10000258:	10bfefc4 	addi	r2,r2,-65
1000025c:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000260:	e0bffe03 	ldbu	r2,-8(fp)
10000264:	10800284 	addi	r2,r2,10
10000268:	e0bffe05 	stb	r2,-8(fp)
1000026c:	00000c06 	br	100002a0 <charToHex+0xa8>
	}
	else if (hex >= 'a' && hex <='f')
10000270:	e0bffe07 	ldb	r2,-8(fp)
10000274:	10801850 	cmplti	r2,r2,97
10000278:	1000091e 	bne	r2,zero,100002a0 <charToHex+0xa8>
1000027c:	e0bffe07 	ldb	r2,-8(fp)
10000280:	108019c8 	cmpgei	r2,r2,103
10000284:	1000061e 	bne	r2,zero,100002a0 <charToHex+0xa8>
	{
		hex -= 'a';
10000288:	e0bffe03 	ldbu	r2,-8(fp)
1000028c:	10bfe7c4 	addi	r2,r2,-97
10000290:	e0bffe05 	stb	r2,-8(fp)
		hex += 10;
10000294:	e0bffe03 	ldbu	r2,-8(fp)
10000298:	10800284 	addi	r2,r2,10
1000029c:	e0bffe05 	stb	r2,-8(fp)
	}
	return hex;
100002a0:	e0bffe03 	ldbu	r2,-8(fp)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <charsToHex>:

char charsToHex(char c1, char c2)
{
100002b4:	defffb04 	addi	sp,sp,-20
100002b8:	dfc00415 	stw	ra,16(sp)
100002bc:	df000315 	stw	fp,12(sp)
100002c0:	df000304 	addi	fp,sp,12
100002c4:	2007883a 	mov	r3,r4
100002c8:	2805883a 	mov	r2,r5
100002cc:	e0fffe05 	stb	r3,-8(fp)
100002d0:	e0bfff05 	stb	r2,-4(fp)
	char hex1 = charToHex(c1);
100002d4:	e0bffe07 	ldb	r2,-8(fp)
100002d8:	1009883a 	mov	r4,r2
100002dc:	00001f80 	call	100001f8 <charToHex>
100002e0:	e0bffd05 	stb	r2,-12(fp)
	char hex2 = charToHex(c2);
100002e4:	e0bfff07 	ldb	r2,-4(fp)
100002e8:	1009883a 	mov	r4,r2
100002ec:	00001f80 	call	100001f8 <charToHex>
100002f0:	e0bffd45 	stb	r2,-11(fp)
	return (hex1 << 4) + hex2;
100002f4:	e0bffd03 	ldbu	r2,-12(fp)
100002f8:	1004913a 	slli	r2,r2,4
100002fc:	1007883a 	mov	r3,r2
10000300:	e0bffd43 	ldbu	r2,-11(fp)
10000304:	1885883a 	add	r2,r3,r2
}
10000308:	e037883a 	mov	sp,fp
1000030c:	dfc00117 	ldw	ra,4(sp)
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00204 	addi	sp,sp,8
10000318:	f800283a 	ret

1000031c <RotWord>:

uint RotWord(uint word)
{
1000031c:	defffe04 	addi	sp,sp,-8
10000320:	df000115 	stw	fp,4(sp)
10000324:	df000104 	addi	fp,sp,4
10000328:	e13fff15 	stw	r4,-4(fp)
	return word << 8 | word >> 24;
1000032c:	e0bfff17 	ldw	r2,-4(fp)
10000330:	1004123a 	roli	r2,r2,8
}
10000334:	e037883a 	mov	sp,fp
10000338:	df000017 	ldw	fp,0(sp)
1000033c:	dec00104 	addi	sp,sp,4
10000340:	f800283a 	ret

10000344 <SubWord>:

uint SubWord(uint word)
{
10000344:	defffb04 	addi	sp,sp,-20
10000348:	df000415 	stw	fp,16(sp)
1000034c:	df000404 	addi	fp,sp,16
10000350:	e13fff15 	stw	r4,-4(fp)
	int i;
	uint out = 0;
10000354:	e03ffd15 	stw	zero,-12(fp)
	for(i = 0; i < 4; i++)
10000358:	e03ffc15 	stw	zero,-16(fp)
1000035c:	00001b06 	br	100003cc <SubWord+0x88>
	{
		uchar key = word >> 8*i & 0xFF;
10000360:	e0bffc17 	ldw	r2,-16(fp)
10000364:	100490fa 	slli	r2,r2,3
10000368:	e0ffff17 	ldw	r3,-4(fp)
1000036c:	1884d83a 	srl	r2,r3,r2
10000370:	e0bffe05 	stb	r2,-8(fp)
		out = aes_sbox[(key & 0xF0) >> 4][key & 0xF] << 8*i | out;
10000374:	e0bffe03 	ldbu	r2,-8(fp)
10000378:	1004d13a 	srli	r2,r2,4
1000037c:	11003fcc 	andi	r4,r2,255
10000380:	e0bffe03 	ldbu	r2,-8(fp)
10000384:	10c003cc 	andi	r3,r2,15
10000388:	00840074 	movhi	r2,4097
1000038c:	10bfcc04 	addi	r2,r2,-208
10000390:	2008913a 	slli	r4,r4,4
10000394:	20c7883a 	add	r3,r4,r3
10000398:	10c5883a 	add	r2,r2,r3
1000039c:	10800003 	ldbu	r2,0(r2)
100003a0:	10c03fcc 	andi	r3,r2,255
100003a4:	e0bffc17 	ldw	r2,-16(fp)
100003a8:	100490fa 	slli	r2,r2,3
100003ac:	1884983a 	sll	r2,r3,r2
100003b0:	1007883a 	mov	r3,r2
100003b4:	e0bffd17 	ldw	r2,-12(fp)
100003b8:	10c4b03a 	or	r2,r2,r3
100003bc:	e0bffd15 	stw	r2,-12(fp)

uint SubWord(uint word)
{
	int i;
	uint out = 0;
	for(i = 0; i < 4; i++)
100003c0:	e0bffc17 	ldw	r2,-16(fp)
100003c4:	10800044 	addi	r2,r2,1
100003c8:	e0bffc15 	stw	r2,-16(fp)
100003cc:	e0bffc17 	ldw	r2,-16(fp)
100003d0:	10800110 	cmplti	r2,r2,4
100003d4:	103fe21e 	bne	r2,zero,10000360 <__alt_data_end+0xf8000360>
	{
		uchar key = word >> 8*i & 0xFF;
		out = aes_sbox[(key & 0xF0) >> 4][key & 0xF] << 8*i | out;
	}
	return out;
100003d8:	e0bffd17 	ldw	r2,-12(fp)
}
100003dc:	e037883a 	mov	sp,fp
100003e0:	df000017 	ldw	fp,0(sp)
100003e4:	dec00104 	addi	sp,sp,4
100003e8:	f800283a 	ret

100003ec <AddRoundKey>:

void AddRoundKey(uchar * state, uint * word, int round)
{
100003ec:	defff704 	addi	sp,sp,-36
100003f0:	df000815 	stw	fp,32(sp)
100003f4:	df000804 	addi	fp,sp,32
100003f8:	e13ffd15 	stw	r4,-12(fp)
100003fc:	e17ffe15 	stw	r5,-8(fp)
10000400:	e1bfff15 	stw	r6,-4(fp)

	uint * key;
	int i, j;
	int round_key = 0;
10000404:	e03ffa15 	stw	zero,-24(fp)
	int num_key = 0;
10000408:	e03ffb15 	stw	zero,-20(fp)
	j = 0;
1000040c:	e03ff915 	stw	zero,-28(fp)
	for(i = round*4; i < (round+1)*4; i++)
10000410:	e0bfff17 	ldw	r2,-4(fp)
10000414:	1085883a 	add	r2,r2,r2
10000418:	1085883a 	add	r2,r2,r2
1000041c:	e0bff815 	stw	r2,-32(fp)
10000420:	00001406 	br	10000474 <AddRoundKey+0x88>
	{

		key[j] = word[i];
10000424:	e0bff917 	ldw	r2,-28(fp)
10000428:	1085883a 	add	r2,r2,r2
1000042c:	1085883a 	add	r2,r2,r2
10000430:	1007883a 	mov	r3,r2
10000434:	e0bffc17 	ldw	r2,-16(fp)
10000438:	10c7883a 	add	r3,r2,r3
1000043c:	e0bff817 	ldw	r2,-32(fp)
10000440:	1085883a 	add	r2,r2,r2
10000444:	1085883a 	add	r2,r2,r2
10000448:	1009883a 	mov	r4,r2
1000044c:	e0bffe17 	ldw	r2,-8(fp)
10000450:	1105883a 	add	r2,r2,r4
10000454:	10800017 	ldw	r2,0(r2)
10000458:	18800015 	stw	r2,0(r3)
		j++;
1000045c:	e0bff917 	ldw	r2,-28(fp)
10000460:	10800044 	addi	r2,r2,1
10000464:	e0bff915 	stw	r2,-28(fp)
	uint * key;
	int i, j;
	int round_key = 0;
	int num_key = 0;
	j = 0;
	for(i = round*4; i < (round+1)*4; i++)
10000468:	e0bff817 	ldw	r2,-32(fp)
1000046c:	10800044 	addi	r2,r2,1
10000470:	e0bff815 	stw	r2,-32(fp)
10000474:	e0bfff17 	ldw	r2,-4(fp)
10000478:	10800044 	addi	r2,r2,1
1000047c:	1085883a 	add	r2,r2,r2
10000480:	1085883a 	add	r2,r2,r2
10000484:	1007883a 	mov	r3,r2
10000488:	e0bff817 	ldw	r2,-32(fp)
1000048c:	10ffe516 	blt	r2,r3,10000424 <__alt_data_end+0xf8000424>
	{

		key[j] = word[i];
		j++;
	}
	for(i = 0; i < 16; i++)
10000490:	e03ff815 	stw	zero,-32(fp)
10000494:	00002206 	br	10000520 <AddRoundKey+0x134>
	{
		state[i] = state[i] ^ ((key[num_key] >> (24 - (8 * round_key))) & 0xFF);
10000498:	e0bff817 	ldw	r2,-32(fp)
1000049c:	e0fffd17 	ldw	r3,-12(fp)
100004a0:	1887883a 	add	r3,r3,r2
100004a4:	e0bff817 	ldw	r2,-32(fp)
100004a8:	e13ffd17 	ldw	r4,-12(fp)
100004ac:	2085883a 	add	r2,r4,r2
100004b0:	11000003 	ldbu	r4,0(r2)
100004b4:	e0bffb17 	ldw	r2,-20(fp)
100004b8:	1085883a 	add	r2,r2,r2
100004bc:	1085883a 	add	r2,r2,r2
100004c0:	100b883a 	mov	r5,r2
100004c4:	e0bffc17 	ldw	r2,-16(fp)
100004c8:	1145883a 	add	r2,r2,r5
100004cc:	11400017 	ldw	r5,0(r2)
100004d0:	018000c4 	movi	r6,3
100004d4:	e0bffa17 	ldw	r2,-24(fp)
100004d8:	3085c83a 	sub	r2,r6,r2
100004dc:	100490fa 	slli	r2,r2,3
100004e0:	2884d83a 	srl	r2,r5,r2
100004e4:	2084f03a 	xor	r2,r4,r2
100004e8:	18800005 	stb	r2,0(r3)
		round_key++;
100004ec:	e0bffa17 	ldw	r2,-24(fp)
100004f0:	10800044 	addi	r2,r2,1
100004f4:	e0bffa15 	stw	r2,-24(fp)
		if(round_key == 4)
100004f8:	e0bffa17 	ldw	r2,-24(fp)
100004fc:	10800118 	cmpnei	r2,r2,4
10000500:	1000041e 	bne	r2,zero,10000514 <AddRoundKey+0x128>
		{
			round_key = 0;
10000504:	e03ffa15 	stw	zero,-24(fp)
			num_key++;
10000508:	e0bffb17 	ldw	r2,-20(fp)
1000050c:	10800044 	addi	r2,r2,1
10000510:	e0bffb15 	stw	r2,-20(fp)
	{

		key[j] = word[i];
		j++;
	}
	for(i = 0; i < 16; i++)
10000514:	e0bff817 	ldw	r2,-32(fp)
10000518:	10800044 	addi	r2,r2,1
1000051c:	e0bff815 	stw	r2,-32(fp)
10000520:	e0bff817 	ldw	r2,-32(fp)
10000524:	10800410 	cmplti	r2,r2,16
10000528:	103fdb1e 	bne	r2,zero,10000498 <__alt_data_end+0xf8000498>
		{
			round_key = 0;
			num_key++;
		}
	}
}
1000052c:	e037883a 	mov	sp,fp
10000530:	df000017 	ldw	fp,0(sp)
10000534:	dec00104 	addi	sp,sp,4
10000538:	f800283a 	ret

1000053c <SubBytes>:

void SubBytes(uchar * state)
{
1000053c:	defffd04 	addi	sp,sp,-12
10000540:	df000215 	stw	fp,8(sp)
10000544:	df000204 	addi	fp,sp,8
10000548:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 0; i < 16; i++)
1000054c:	e03ffe15 	stw	zero,-8(fp)
10000550:	00001a06 	br	100005bc <SubBytes+0x80>
		state[i] = aes_sbox[(state[i] & 0xF0) >> 4][state[i] & 0xF];
10000554:	e0bffe17 	ldw	r2,-8(fp)
10000558:	e0ffff17 	ldw	r3,-4(fp)
1000055c:	1887883a 	add	r3,r3,r2
10000560:	e0bffe17 	ldw	r2,-8(fp)
10000564:	e13fff17 	ldw	r4,-4(fp)
10000568:	2085883a 	add	r2,r4,r2
1000056c:	10800003 	ldbu	r2,0(r2)
10000570:	10803fcc 	andi	r2,r2,255
10000574:	1004d13a 	srli	r2,r2,4
10000578:	11403fcc 	andi	r5,r2,255
1000057c:	e0bffe17 	ldw	r2,-8(fp)
10000580:	e13fff17 	ldw	r4,-4(fp)
10000584:	2085883a 	add	r2,r4,r2
10000588:	10800003 	ldbu	r2,0(r2)
1000058c:	10803fcc 	andi	r2,r2,255
10000590:	110003cc 	andi	r4,r2,15
10000594:	00840074 	movhi	r2,4097
10000598:	10bfcc04 	addi	r2,r2,-208
1000059c:	280a913a 	slli	r5,r5,4
100005a0:	2909883a 	add	r4,r5,r4
100005a4:	1105883a 	add	r2,r2,r4
100005a8:	10800003 	ldbu	r2,0(r2)
100005ac:	18800005 	stb	r2,0(r3)
}

void SubBytes(uchar * state)
{
	int i;
	for(i = 0; i < 16; i++)
100005b0:	e0bffe17 	ldw	r2,-8(fp)
100005b4:	10800044 	addi	r2,r2,1
100005b8:	e0bffe15 	stw	r2,-8(fp)
100005bc:	e0bffe17 	ldw	r2,-8(fp)
100005c0:	10800410 	cmplti	r2,r2,16
100005c4:	103fe31e 	bne	r2,zero,10000554 <__alt_data_end+0xf8000554>
		state[i] = aes_sbox[(state[i] & 0xF0) >> 4][state[i] & 0xF];
}
100005c8:	e037883a 	mov	sp,fp
100005cc:	df000017 	ldw	fp,0(sp)
100005d0:	dec00104 	addi	sp,sp,4
100005d4:	f800283a 	ret

100005d8 <ShiftRows>:

void ShiftRows(uchar * state)
{
100005d8:	defffa04 	addi	sp,sp,-24
100005dc:	df000515 	stw	fp,20(sp)
100005e0:	df000504 	addi	fp,sp,20
100005e4:	e13fff15 	stw	r4,-4(fp)
	int i, j;
	int shift = 0;
100005e8:	e03ffd15 	stw	zero,-12(fp)
	while(shift < 4)
100005ec:	00003406 	br	100006c0 <ShiftRows+0xe8>
	{
		uchar start;
		for(i = 0; i < shift; i++)
100005f0:	e03ffb15 	stw	zero,-20(fp)
100005f4:	00002c06 	br	100006a8 <ShiftRows+0xd0>
		{
			start = state[shift];
100005f8:	e0bffd17 	ldw	r2,-12(fp)
100005fc:	e0ffff17 	ldw	r3,-4(fp)
10000600:	1885883a 	add	r2,r3,r2
10000604:	10800003 	ldbu	r2,0(r2)
10000608:	e0bffe05 	stb	r2,-8(fp)
			for(j = 0; j < 3; j++)
1000060c:	e03ffc15 	stw	zero,-16(fp)
10000610:	00001806 	br	10000674 <ShiftRows+0x9c>
				state[j*4 + shift] = state[(j+1)*4 + shift];
10000614:	e0bffc17 	ldw	r2,-16(fp)
10000618:	1085883a 	add	r2,r2,r2
1000061c:	1085883a 	add	r2,r2,r2
10000620:	1007883a 	mov	r3,r2
10000624:	e0bffd17 	ldw	r2,-12(fp)
10000628:	1885883a 	add	r2,r3,r2
1000062c:	1007883a 	mov	r3,r2
10000630:	e0bfff17 	ldw	r2,-4(fp)
10000634:	10c7883a 	add	r3,r2,r3
10000638:	e0bffc17 	ldw	r2,-16(fp)
1000063c:	10800044 	addi	r2,r2,1
10000640:	1085883a 	add	r2,r2,r2
10000644:	1085883a 	add	r2,r2,r2
10000648:	1009883a 	mov	r4,r2
1000064c:	e0bffd17 	ldw	r2,-12(fp)
10000650:	2085883a 	add	r2,r4,r2
10000654:	1009883a 	mov	r4,r2
10000658:	e0bfff17 	ldw	r2,-4(fp)
1000065c:	1105883a 	add	r2,r2,r4
10000660:	10800003 	ldbu	r2,0(r2)
10000664:	18800005 	stb	r2,0(r3)
	{
		uchar start;
		for(i = 0; i < shift; i++)
		{
			start = state[shift];
			for(j = 0; j < 3; j++)
10000668:	e0bffc17 	ldw	r2,-16(fp)
1000066c:	10800044 	addi	r2,r2,1
10000670:	e0bffc15 	stw	r2,-16(fp)
10000674:	e0bffc17 	ldw	r2,-16(fp)
10000678:	108000d0 	cmplti	r2,r2,3
1000067c:	103fe51e 	bne	r2,zero,10000614 <__alt_data_end+0xf8000614>
				state[j*4 + shift] = state[(j+1)*4 + shift];
			state[12 + shift] = start;
10000680:	e0bffd17 	ldw	r2,-12(fp)
10000684:	10800304 	addi	r2,r2,12
10000688:	1007883a 	mov	r3,r2
1000068c:	e0bfff17 	ldw	r2,-4(fp)
10000690:	10c5883a 	add	r2,r2,r3
10000694:	e0fffe03 	ldbu	r3,-8(fp)
10000698:	10c00005 	stb	r3,0(r2)
	int i, j;
	int shift = 0;
	while(shift < 4)
	{
		uchar start;
		for(i = 0; i < shift; i++)
1000069c:	e0bffb17 	ldw	r2,-20(fp)
100006a0:	10800044 	addi	r2,r2,1
100006a4:	e0bffb15 	stw	r2,-20(fp)
100006a8:	e0fffb17 	ldw	r3,-20(fp)
100006ac:	e0bffd17 	ldw	r2,-12(fp)
100006b0:	18bfd116 	blt	r3,r2,100005f8 <__alt_data_end+0xf80005f8>
			start = state[shift];
			for(j = 0; j < 3; j++)
				state[j*4 + shift] = state[(j+1)*4 + shift];
			state[12 + shift] = start;
		}
		shift++;
100006b4:	e0bffd17 	ldw	r2,-12(fp)
100006b8:	10800044 	addi	r2,r2,1
100006bc:	e0bffd15 	stw	r2,-12(fp)

void ShiftRows(uchar * state)
{
	int i, j;
	int shift = 0;
	while(shift < 4)
100006c0:	e0bffd17 	ldw	r2,-12(fp)
100006c4:	10800110 	cmplti	r2,r2,4
100006c8:	103fc91e 	bne	r2,zero,100005f0 <__alt_data_end+0xf80005f0>
				state[j*4 + shift] = state[(j+1)*4 + shift];
			state[12 + shift] = start;
		}
		shift++;
	}
}
100006cc:	e037883a 	mov	sp,fp
100006d0:	df000017 	ldw	fp,0(sp)
100006d4:	dec00104 	addi	sp,sp,4
100006d8:	f800283a 	ret

100006dc <MixColumns>:

void MixColumns(uchar * state)
{
100006dc:	defff804 	addi	sp,sp,-32
100006e0:	dfc00715 	stw	ra,28(sp)
100006e4:	df000615 	stw	fp,24(sp)
100006e8:	dc800515 	stw	r18,20(sp)
100006ec:	dc400415 	stw	r17,16(sp)
100006f0:	dc000315 	stw	r16,12(sp)
100006f4:	df000604 	addi	fp,sp,24
100006f8:	e13ffc15 	stw	r4,-16(fp)
	int i;
	uint curr;
	for(i = 0; i < 4; i++)
100006fc:	e03ffa15 	stw	zero,-24(fp)
10000700:	0000ba06 	br	100009ec <MixColumns+0x310>
	{
		curr = state[4*i] << 24 | state[(4*i)+1] << 16 | state[(4*i)+2] << 8 | state[(4*i)+3];
10000704:	e0bffa17 	ldw	r2,-24(fp)
10000708:	1085883a 	add	r2,r2,r2
1000070c:	1085883a 	add	r2,r2,r2
10000710:	1007883a 	mov	r3,r2
10000714:	e0bffc17 	ldw	r2,-16(fp)
10000718:	10c5883a 	add	r2,r2,r3
1000071c:	10800003 	ldbu	r2,0(r2)
10000720:	10803fcc 	andi	r2,r2,255
10000724:	1006963a 	slli	r3,r2,24
10000728:	e0bffa17 	ldw	r2,-24(fp)
1000072c:	1085883a 	add	r2,r2,r2
10000730:	1085883a 	add	r2,r2,r2
10000734:	10800044 	addi	r2,r2,1
10000738:	e13ffc17 	ldw	r4,-16(fp)
1000073c:	2085883a 	add	r2,r4,r2
10000740:	10800003 	ldbu	r2,0(r2)
10000744:	10803fcc 	andi	r2,r2,255
10000748:	1004943a 	slli	r2,r2,16
1000074c:	1886b03a 	or	r3,r3,r2
10000750:	e0bffa17 	ldw	r2,-24(fp)
10000754:	1085883a 	add	r2,r2,r2
10000758:	1085883a 	add	r2,r2,r2
1000075c:	10800084 	addi	r2,r2,2
10000760:	e13ffc17 	ldw	r4,-16(fp)
10000764:	2085883a 	add	r2,r4,r2
10000768:	10800003 	ldbu	r2,0(r2)
1000076c:	10803fcc 	andi	r2,r2,255
10000770:	1004923a 	slli	r2,r2,8
10000774:	1886b03a 	or	r3,r3,r2
10000778:	e0bffa17 	ldw	r2,-24(fp)
1000077c:	1085883a 	add	r2,r2,r2
10000780:	1085883a 	add	r2,r2,r2
10000784:	108000c4 	addi	r2,r2,3
10000788:	e13ffc17 	ldw	r4,-16(fp)
1000078c:	2085883a 	add	r2,r4,r2
10000790:	10800003 	ldbu	r2,0(r2)
10000794:	10803fcc 	andi	r2,r2,255
10000798:	1884b03a 	or	r2,r3,r2
1000079c:	e0bffb15 	stw	r2,-20(fp)
		state[4*i] = gf_mul[(curr >> 24) & 0xFF][0] ^ gf_mul[(curr >> 16) & 0xFF][1] ^ ((curr >> 8) & 0xFF) ^ (curr & 0xFF);
100007a0:	e0bffa17 	ldw	r2,-24(fp)
100007a4:	1085883a 	add	r2,r2,r2
100007a8:	1085883a 	add	r2,r2,r2
100007ac:	1007883a 	mov	r3,r2
100007b0:	e0bffc17 	ldw	r2,-16(fp)
100007b4:	10e3883a 	add	r17,r2,r3
100007b8:	e0bffb17 	ldw	r2,-20(fp)
100007bc:	1004d63a 	srli	r2,r2,24
100007c0:	04040074 	movhi	r16,4097
100007c4:	84012204 	addi	r16,r16,1160
100007c8:	1009883a 	mov	r4,r2
100007cc:	01400184 	movi	r5,6
100007d0:	000103c0 	call	1000103c <__mulsi3>
100007d4:	8085883a 	add	r2,r16,r2
100007d8:	14800003 	ldbu	r18,0(r2)
100007dc:	e0bffb17 	ldw	r2,-20(fp)
100007e0:	1004d43a 	srli	r2,r2,16
100007e4:	10803fcc 	andi	r2,r2,255
100007e8:	04040074 	movhi	r16,4097
100007ec:	84012204 	addi	r16,r16,1160
100007f0:	1009883a 	mov	r4,r2
100007f4:	01400184 	movi	r5,6
100007f8:	000103c0 	call	1000103c <__mulsi3>
100007fc:	8085883a 	add	r2,r16,r2
10000800:	10800044 	addi	r2,r2,1
10000804:	10800003 	ldbu	r2,0(r2)
10000808:	9084f03a 	xor	r2,r18,r2
1000080c:	1007883a 	mov	r3,r2
10000810:	e0bffb17 	ldw	r2,-20(fp)
10000814:	1004d23a 	srli	r2,r2,8
10000818:	1884f03a 	xor	r2,r3,r2
1000081c:	1007883a 	mov	r3,r2
10000820:	e0bffb17 	ldw	r2,-20(fp)
10000824:	1884f03a 	xor	r2,r3,r2
10000828:	88800005 	stb	r2,0(r17)
		state[(4*i)+1] = ((curr >> 24) & 0xFF) ^ gf_mul[(curr >> 16) & 0xFF][0] ^ gf_mul[(curr >> 8) & 0xFF][1] ^ (curr & 0xFF);
1000082c:	e0bffa17 	ldw	r2,-24(fp)
10000830:	1085883a 	add	r2,r2,r2
10000834:	1085883a 	add	r2,r2,r2
10000838:	10800044 	addi	r2,r2,1
1000083c:	e0fffc17 	ldw	r3,-16(fp)
10000840:	18a3883a 	add	r17,r3,r2
10000844:	e0bffb17 	ldw	r2,-20(fp)
10000848:	1004d63a 	srli	r2,r2,24
1000084c:	1025883a 	mov	r18,r2
10000850:	e0bffb17 	ldw	r2,-20(fp)
10000854:	1004d43a 	srli	r2,r2,16
10000858:	10803fcc 	andi	r2,r2,255
1000085c:	04040074 	movhi	r16,4097
10000860:	84012204 	addi	r16,r16,1160
10000864:	1009883a 	mov	r4,r2
10000868:	01400184 	movi	r5,6
1000086c:	000103c0 	call	1000103c <__mulsi3>
10000870:	8085883a 	add	r2,r16,r2
10000874:	10800003 	ldbu	r2,0(r2)
10000878:	9084f03a 	xor	r2,r18,r2
1000087c:	1025883a 	mov	r18,r2
10000880:	e0bffb17 	ldw	r2,-20(fp)
10000884:	1004d23a 	srli	r2,r2,8
10000888:	10803fcc 	andi	r2,r2,255
1000088c:	04040074 	movhi	r16,4097
10000890:	84012204 	addi	r16,r16,1160
10000894:	1009883a 	mov	r4,r2
10000898:	01400184 	movi	r5,6
1000089c:	000103c0 	call	1000103c <__mulsi3>
100008a0:	8085883a 	add	r2,r16,r2
100008a4:	10800044 	addi	r2,r2,1
100008a8:	10800003 	ldbu	r2,0(r2)
100008ac:	9084f03a 	xor	r2,r18,r2
100008b0:	1007883a 	mov	r3,r2
100008b4:	e0bffb17 	ldw	r2,-20(fp)
100008b8:	1884f03a 	xor	r2,r3,r2
100008bc:	88800005 	stb	r2,0(r17)
		state[(4*i)+2] = ((curr >> 24) & 0xFF) ^ ((curr >> 16) & 0xFF) ^ gf_mul[(curr >> 8) & 0xFF][0] ^ gf_mul[curr & 0xFF][1];
100008c0:	e0bffa17 	ldw	r2,-24(fp)
100008c4:	1085883a 	add	r2,r2,r2
100008c8:	1085883a 	add	r2,r2,r2
100008cc:	10800084 	addi	r2,r2,2
100008d0:	e0fffc17 	ldw	r3,-16(fp)
100008d4:	18a3883a 	add	r17,r3,r2
100008d8:	e0bffb17 	ldw	r2,-20(fp)
100008dc:	1004d63a 	srli	r2,r2,24
100008e0:	1007883a 	mov	r3,r2
100008e4:	e0bffb17 	ldw	r2,-20(fp)
100008e8:	1004d43a 	srli	r2,r2,16
100008ec:	1884f03a 	xor	r2,r3,r2
100008f0:	1025883a 	mov	r18,r2
100008f4:	e0bffb17 	ldw	r2,-20(fp)
100008f8:	1004d23a 	srli	r2,r2,8
100008fc:	10803fcc 	andi	r2,r2,255
10000900:	04040074 	movhi	r16,4097
10000904:	84012204 	addi	r16,r16,1160
10000908:	1009883a 	mov	r4,r2
1000090c:	01400184 	movi	r5,6
10000910:	000103c0 	call	1000103c <__mulsi3>
10000914:	8085883a 	add	r2,r16,r2
10000918:	10800003 	ldbu	r2,0(r2)
1000091c:	9084f03a 	xor	r2,r18,r2
10000920:	1025883a 	mov	r18,r2
10000924:	e0bffb17 	ldw	r2,-20(fp)
10000928:	10803fcc 	andi	r2,r2,255
1000092c:	04040074 	movhi	r16,4097
10000930:	84012204 	addi	r16,r16,1160
10000934:	1009883a 	mov	r4,r2
10000938:	01400184 	movi	r5,6
1000093c:	000103c0 	call	1000103c <__mulsi3>
10000940:	8085883a 	add	r2,r16,r2
10000944:	10800044 	addi	r2,r2,1
10000948:	10800003 	ldbu	r2,0(r2)
1000094c:	9084f03a 	xor	r2,r18,r2
10000950:	88800005 	stb	r2,0(r17)
		state[(4*i)+3] = gf_mul[(curr >> 24) & 0xFF][1] ^ ((curr >> 16) & 0xFF) ^ ((curr >> 8) & 0xFF) ^ gf_mul[curr & 0xFF][0];
10000954:	e0bffa17 	ldw	r2,-24(fp)
10000958:	1085883a 	add	r2,r2,r2
1000095c:	1085883a 	add	r2,r2,r2
10000960:	108000c4 	addi	r2,r2,3
10000964:	e0fffc17 	ldw	r3,-16(fp)
10000968:	18a3883a 	add	r17,r3,r2
1000096c:	e0bffb17 	ldw	r2,-20(fp)
10000970:	1004d63a 	srli	r2,r2,24
10000974:	04040074 	movhi	r16,4097
10000978:	84012204 	addi	r16,r16,1160
1000097c:	1009883a 	mov	r4,r2
10000980:	01400184 	movi	r5,6
10000984:	000103c0 	call	1000103c <__mulsi3>
10000988:	8085883a 	add	r2,r16,r2
1000098c:	10800044 	addi	r2,r2,1
10000990:	10800003 	ldbu	r2,0(r2)
10000994:	e0fffb17 	ldw	r3,-20(fp)
10000998:	1806d43a 	srli	r3,r3,16
1000099c:	10c4f03a 	xor	r2,r2,r3
100009a0:	1007883a 	mov	r3,r2
100009a4:	e0bffb17 	ldw	r2,-20(fp)
100009a8:	1004d23a 	srli	r2,r2,8
100009ac:	1884f03a 	xor	r2,r3,r2
100009b0:	1025883a 	mov	r18,r2
100009b4:	e0bffb17 	ldw	r2,-20(fp)
100009b8:	10803fcc 	andi	r2,r2,255
100009bc:	04040074 	movhi	r16,4097
100009c0:	84012204 	addi	r16,r16,1160
100009c4:	1009883a 	mov	r4,r2
100009c8:	01400184 	movi	r5,6
100009cc:	000103c0 	call	1000103c <__mulsi3>
100009d0:	8085883a 	add	r2,r16,r2
100009d4:	10800003 	ldbu	r2,0(r2)
100009d8:	9084f03a 	xor	r2,r18,r2
100009dc:	88800005 	stb	r2,0(r17)

void MixColumns(uchar * state)
{
	int i;
	uint curr;
	for(i = 0; i < 4; i++)
100009e0:	e0bffa17 	ldw	r2,-24(fp)
100009e4:	10800044 	addi	r2,r2,1
100009e8:	e0bffa15 	stw	r2,-24(fp)
100009ec:	e0bffa17 	ldw	r2,-24(fp)
100009f0:	10800110 	cmplti	r2,r2,4
100009f4:	103f431e 	bne	r2,zero,10000704 <__alt_data_end+0xf8000704>
		state[4*i] = gf_mul[(curr >> 24) & 0xFF][0] ^ gf_mul[(curr >> 16) & 0xFF][1] ^ ((curr >> 8) & 0xFF) ^ (curr & 0xFF);
		state[(4*i)+1] = ((curr >> 24) & 0xFF) ^ gf_mul[(curr >> 16) & 0xFF][0] ^ gf_mul[(curr >> 8) & 0xFF][1] ^ (curr & 0xFF);
		state[(4*i)+2] = ((curr >> 24) & 0xFF) ^ ((curr >> 16) & 0xFF) ^ gf_mul[(curr >> 8) & 0xFF][0] ^ gf_mul[curr & 0xFF][1];
		state[(4*i)+3] = gf_mul[(curr >> 24) & 0xFF][1] ^ ((curr >> 16) & 0xFF) ^ ((curr >> 8) & 0xFF) ^ gf_mul[curr & 0xFF][0];
	}
}
100009f8:	e6fffd04 	addi	sp,fp,-12
100009fc:	dfc00417 	ldw	ra,16(sp)
10000a00:	df000317 	ldw	fp,12(sp)
10000a04:	dc800217 	ldw	r18,8(sp)
10000a08:	dc400117 	ldw	r17,4(sp)
10000a0c:	dc000017 	ldw	r16,0(sp)
10000a10:	dec00504 	addi	sp,sp,20
10000a14:	f800283a 	ret

10000a18 <AES>:

void AES(uchar * state, uint * w)
{
10000a18:	defffb04 	addi	sp,sp,-20
10000a1c:	dfc00415 	stw	ra,16(sp)
10000a20:	df000315 	stw	fp,12(sp)
10000a24:	df000304 	addi	fp,sp,12
10000a28:	e13ffe15 	stw	r4,-8(fp)
10000a2c:	e17fff15 	stw	r5,-4(fp)
	int round = 0;
10000a30:	e03ffd15 	stw	zero,-12(fp)
	AddRoundKey(state, w, round);
10000a34:	e13ffe17 	ldw	r4,-8(fp)
10000a38:	e17fff17 	ldw	r5,-4(fp)
10000a3c:	e1bffd17 	ldw	r6,-12(fp)
10000a40:	00003ec0 	call	100003ec <AddRoundKey>
	for(round = 1; round < 10; round++)
10000a44:	00800044 	movi	r2,1
10000a48:	e0bffd15 	stw	r2,-12(fp)
10000a4c:	00000d06 	br	10000a84 <AES+0x6c>
	{
		SubBytes(state);
10000a50:	e13ffe17 	ldw	r4,-8(fp)
10000a54:	000053c0 	call	1000053c <SubBytes>
		ShiftRows(state);
10000a58:	e13ffe17 	ldw	r4,-8(fp)
10000a5c:	00005d80 	call	100005d8 <ShiftRows>
		MixColumns(state);
10000a60:	e13ffe17 	ldw	r4,-8(fp)
10000a64:	00006dc0 	call	100006dc <MixColumns>
		AddRoundKey(state, w, round);
10000a68:	e13ffe17 	ldw	r4,-8(fp)
10000a6c:	e17fff17 	ldw	r5,-4(fp)
10000a70:	e1bffd17 	ldw	r6,-12(fp)
10000a74:	00003ec0 	call	100003ec <AddRoundKey>

void AES(uchar * state, uint * w)
{
	int round = 0;
	AddRoundKey(state, w, round);
	for(round = 1; round < 10; round++)
10000a78:	e0bffd17 	ldw	r2,-12(fp)
10000a7c:	10800044 	addi	r2,r2,1
10000a80:	e0bffd15 	stw	r2,-12(fp)
10000a84:	e0bffd17 	ldw	r2,-12(fp)
10000a88:	10800290 	cmplti	r2,r2,10
10000a8c:	103ff01e 	bne	r2,zero,10000a50 <__alt_data_end+0xf8000a50>
		SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, w, round);
	}
	SubBytes(state);
10000a90:	e13ffe17 	ldw	r4,-8(fp)
10000a94:	000053c0 	call	1000053c <SubBytes>
	ShiftRows(state);
10000a98:	e13ffe17 	ldw	r4,-8(fp)
10000a9c:	00005d80 	call	100005d8 <ShiftRows>
	AddRoundKey(state, w, round);
10000aa0:	e13ffe17 	ldw	r4,-8(fp)
10000aa4:	e17fff17 	ldw	r5,-4(fp)
10000aa8:	e1bffd17 	ldw	r6,-12(fp)
10000aac:	00003ec0 	call	100003ec <AddRoundKey>
}
10000ab0:	e037883a 	mov	sp,fp
10000ab4:	dfc00117 	ldw	ra,4(sp)
10000ab8:	df000017 	ldw	fp,0(sp)
10000abc:	dec00204 	addi	sp,sp,8
10000ac0:	f800283a 	ret

10000ac4 <KeyExpansion>:

void KeyExpansion(uchar * key, uint * w, int n)
{
10000ac4:	defff804 	addi	sp,sp,-32
10000ac8:	dfc00715 	stw	ra,28(sp)
10000acc:	df000615 	stw	fp,24(sp)
10000ad0:	dc000515 	stw	r16,20(sp)
10000ad4:	df000604 	addi	fp,sp,24
10000ad8:	e13ffc15 	stw	r4,-16(fp)
10000adc:	e17ffd15 	stw	r5,-12(fp)
10000ae0:	e1bffe15 	stw	r6,-8(fp)
	uint temp;
	int i = 0;
10000ae4:	e03ffb15 	stw	zero,-20(fp)
	while (i < n)
10000ae8:	00003006 	br	10000bac <KeyExpansion+0xe8>
	{
		w[i] = key[4*i] << 24 | key[(4*i)+1] << 16 | key[(4*i)+2] << 8 | key[(4*i)+3];
10000aec:	e0bffb17 	ldw	r2,-20(fp)
10000af0:	1085883a 	add	r2,r2,r2
10000af4:	1085883a 	add	r2,r2,r2
10000af8:	1007883a 	mov	r3,r2
10000afc:	e0bffd17 	ldw	r2,-12(fp)
10000b00:	10c7883a 	add	r3,r2,r3
10000b04:	e0bffb17 	ldw	r2,-20(fp)
10000b08:	1085883a 	add	r2,r2,r2
10000b0c:	1085883a 	add	r2,r2,r2
10000b10:	1009883a 	mov	r4,r2
10000b14:	e0bffc17 	ldw	r2,-16(fp)
10000b18:	1105883a 	add	r2,r2,r4
10000b1c:	10800003 	ldbu	r2,0(r2)
10000b20:	10803fcc 	andi	r2,r2,255
10000b24:	1008963a 	slli	r4,r2,24
10000b28:	e0bffb17 	ldw	r2,-20(fp)
10000b2c:	1085883a 	add	r2,r2,r2
10000b30:	1085883a 	add	r2,r2,r2
10000b34:	10800044 	addi	r2,r2,1
10000b38:	e17ffc17 	ldw	r5,-16(fp)
10000b3c:	2885883a 	add	r2,r5,r2
10000b40:	10800003 	ldbu	r2,0(r2)
10000b44:	10803fcc 	andi	r2,r2,255
10000b48:	1004943a 	slli	r2,r2,16
10000b4c:	2088b03a 	or	r4,r4,r2
10000b50:	e0bffb17 	ldw	r2,-20(fp)
10000b54:	1085883a 	add	r2,r2,r2
10000b58:	1085883a 	add	r2,r2,r2
10000b5c:	10800084 	addi	r2,r2,2
10000b60:	e17ffc17 	ldw	r5,-16(fp)
10000b64:	2885883a 	add	r2,r5,r2
10000b68:	10800003 	ldbu	r2,0(r2)
10000b6c:	10803fcc 	andi	r2,r2,255
10000b70:	1004923a 	slli	r2,r2,8
10000b74:	2088b03a 	or	r4,r4,r2
10000b78:	e0bffb17 	ldw	r2,-20(fp)
10000b7c:	1085883a 	add	r2,r2,r2
10000b80:	1085883a 	add	r2,r2,r2
10000b84:	108000c4 	addi	r2,r2,3
10000b88:	e17ffc17 	ldw	r5,-16(fp)
10000b8c:	2885883a 	add	r2,r5,r2
10000b90:	10800003 	ldbu	r2,0(r2)
10000b94:	10803fcc 	andi	r2,r2,255
10000b98:	2084b03a 	or	r2,r4,r2
10000b9c:	18800015 	stw	r2,0(r3)
		i++;
10000ba0:	e0bffb17 	ldw	r2,-20(fp)
10000ba4:	10800044 	addi	r2,r2,1
10000ba8:	e0bffb15 	stw	r2,-20(fp)

void KeyExpansion(uchar * key, uint * w, int n)
{
	uint temp;
	int i = 0;
	while (i < n)
10000bac:	e0fffb17 	ldw	r3,-20(fp)
10000bb0:	e0bffe17 	ldw	r2,-8(fp)
10000bb4:	18bfcd16 	blt	r3,r2,10000aec <__alt_data_end+0xf8000aec>
	{
		w[i] = key[4*i] << 24 | key[(4*i)+1] << 16 | key[(4*i)+2] << 8 | key[(4*i)+3];
		i++;
	}
	while (i < 44)
10000bb8:	00003306 	br	10000c88 <KeyExpansion+0x1c4>
	{
		temp = w[i-1];
10000bbc:	e0bffb17 	ldw	r2,-20(fp)
10000bc0:	1085883a 	add	r2,r2,r2
10000bc4:	1085883a 	add	r2,r2,r2
10000bc8:	10bfff04 	addi	r2,r2,-4
10000bcc:	e0fffd17 	ldw	r3,-12(fp)
10000bd0:	1885883a 	add	r2,r3,r2
10000bd4:	10800017 	ldw	r2,0(r2)
10000bd8:	e0bffa15 	stw	r2,-24(fp)
		if (i % n == 0)
10000bdc:	e0bffb17 	ldw	r2,-20(fp)
10000be0:	1009883a 	mov	r4,r2
10000be4:	e17ffe17 	ldw	r5,-8(fp)
10000be8:	0000fd00 	call	10000fd0 <__modsi3>
10000bec:	1000111e 	bne	r2,zero,10000c34 <KeyExpansion+0x170>
			temp = SubWord(RotWord(temp)) ^ Rcon[(i/n)-1];
10000bf0:	e13ffa17 	ldw	r4,-24(fp)
10000bf4:	000031c0 	call	1000031c <RotWord>
10000bf8:	1009883a 	mov	r4,r2
10000bfc:	00003440 	call	10000344 <SubWord>
10000c00:	1021883a 	mov	r16,r2
10000c04:	e13ffb17 	ldw	r4,-20(fp)
10000c08:	e17ffe17 	ldw	r5,-8(fp)
10000c0c:	0000f7c0 	call	10000f7c <__divsi3>
10000c10:	10ffffc4 	addi	r3,r2,-1
10000c14:	00840074 	movhi	r2,4097
10000c18:	1082a204 	addi	r2,r2,2696
10000c1c:	18c7883a 	add	r3,r3,r3
10000c20:	18c7883a 	add	r3,r3,r3
10000c24:	10c5883a 	add	r2,r2,r3
10000c28:	10800017 	ldw	r2,0(r2)
10000c2c:	8084f03a 	xor	r2,r16,r2
10000c30:	e0bffa15 	stw	r2,-24(fp)
		w[i] = w[i-n] ^ temp;
10000c34:	e0bffb17 	ldw	r2,-20(fp)
10000c38:	1085883a 	add	r2,r2,r2
10000c3c:	1085883a 	add	r2,r2,r2
10000c40:	1007883a 	mov	r3,r2
10000c44:	e0bffd17 	ldw	r2,-12(fp)
10000c48:	10c7883a 	add	r3,r2,r3
10000c4c:	e13ffb17 	ldw	r4,-20(fp)
10000c50:	e0bffe17 	ldw	r2,-8(fp)
10000c54:	2085c83a 	sub	r2,r4,r2
10000c58:	1085883a 	add	r2,r2,r2
10000c5c:	1085883a 	add	r2,r2,r2
10000c60:	1009883a 	mov	r4,r2
10000c64:	e0bffd17 	ldw	r2,-12(fp)
10000c68:	1105883a 	add	r2,r2,r4
10000c6c:	11000017 	ldw	r4,0(r2)
10000c70:	e0bffa17 	ldw	r2,-24(fp)
10000c74:	2084f03a 	xor	r2,r4,r2
10000c78:	18800015 	stw	r2,0(r3)
		i++;
10000c7c:	e0bffb17 	ldw	r2,-20(fp)
10000c80:	10800044 	addi	r2,r2,1
10000c84:	e0bffb15 	stw	r2,-20(fp)
	while (i < n)
	{
		w[i] = key[4*i] << 24 | key[(4*i)+1] << 16 | key[(4*i)+2] << 8 | key[(4*i)+3];
		i++;
	}
	while (i < 44)
10000c88:	e0bffb17 	ldw	r2,-20(fp)
10000c8c:	10800b10 	cmplti	r2,r2,44
10000c90:	103fca1e 	bne	r2,zero,10000bbc <__alt_data_end+0xf8000bbc>
		if (i % n == 0)
			temp = SubWord(RotWord(temp)) ^ Rcon[(i/n)-1];
		w[i] = w[i-n] ^ temp;
		i++;
	}
}
10000c94:	e6ffff04 	addi	sp,fp,-4
10000c98:	dfc00217 	ldw	ra,8(sp)
10000c9c:	df000117 	ldw	fp,4(sp)
10000ca0:	dc000017 	ldw	r16,0(sp)
10000ca4:	dec00304 	addi	sp,sp,12
10000ca8:	f800283a 	ret

10000cac <main>:
//	return 0;
//}


int main()
{
10000cac:	deffb704 	addi	sp,sp,-292
10000cb0:	dfc04815 	stw	ra,288(sp)
10000cb4:	df004715 	stw	fp,284(sp)
10000cb8:	df004704 	addi	fp,sp,284
	int i, j;
	unsigned char plaintext[33] = "ece298dcece298dcece298dcece298dc";
10000cbc:	008c9974 	movhi	r2,12901
10000cc0:	1098d944 	addi	r2,r2,25445
10000cc4:	e0bfbb15 	stw	r2,-276(fp)
10000cc8:	0098d934 	movhi	r2,25444
10000ccc:	108e0e44 	addi	r2,r2,14393
10000cd0:	e0bfbc15 	stw	r2,-272(fp)
10000cd4:	008c9974 	movhi	r2,12901
10000cd8:	1098d944 	addi	r2,r2,25445
10000cdc:	e0bfbd15 	stw	r2,-268(fp)
10000ce0:	0098d934 	movhi	r2,25444
10000ce4:	108e0e44 	addi	r2,r2,14393
10000ce8:	e0bfbe15 	stw	r2,-264(fp)
10000cec:	008c9974 	movhi	r2,12901
10000cf0:	1098d944 	addi	r2,r2,25445
10000cf4:	e0bfbf15 	stw	r2,-260(fp)
10000cf8:	0098d934 	movhi	r2,25444
10000cfc:	108e0e44 	addi	r2,r2,14393
10000d00:	e0bfc015 	stw	r2,-256(fp)
10000d04:	008c9974 	movhi	r2,12901
10000d08:	1098d944 	addi	r2,r2,25445
10000d0c:	e0bfc115 	stw	r2,-252(fp)
10000d10:	0098d934 	movhi	r2,25444
10000d14:	108e0e44 	addi	r2,r2,14393
10000d18:	e0bfc215 	stw	r2,-248(fp)
10000d1c:	e03fc305 	stb	zero,-244(fp)
	unsigned char key[33] = "000102030405060708090a0b0c0d0e0f";
10000d20:	00840074 	movhi	r2,4097
10000d24:	10805904 	addi	r2,r2,356
10000d28:	e0ffc344 	addi	r3,fp,-243
10000d2c:	100b883a 	mov	r5,r2
10000d30:	00800844 	movi	r2,33
10000d34:	1809883a 	mov	r4,r3
10000d38:	100d883a 	mov	r6,r2
10000d3c:	00010640 	call	10001064 <memcpy>
	unsigned char xkey[16];
	unsigned char encryptedMsg[16];
	unsigned long word[44];

	*to_hw_sig = 0;
10000d40:	00800804 	movi	r2,32
10000d44:	10000005 	stb	zero,0(r2)
	*to_hw_port = 0;
10000d48:	00800c04 	movi	r2,48
10000d4c:	10000005 	stb	zero,0(r2)

	printf("Press reset!\n");
10000d50:	01040074 	movhi	r4,4097
10000d54:	21004c04 	addi	r4,r4,304
10000d58:	00012bc0 	call	100012bc <puts>
	while (*to_sw_sig != 3);
10000d5c:	0001883a 	nop
10000d60:	00801404 	movi	r2,80
10000d64:	10800003 	ldbu	r2,0(r2)
10000d68:	10803fcc 	andi	r2,r2,255
10000d6c:	1080201c 	xori	r2,r2,128
10000d70:	10bfe004 	addi	r2,r2,-128
10000d74:	108000d8 	cmpnei	r2,r2,3
10000d78:	103ff91e 	bne	r2,zero,10000d60 <__alt_data_end+0xf8000d60>

	for(j = 0; j < 1000; j++)
10000d7c:	e03fba15 	stw	zero,-280(fp)
10000d80:	00005706 	br	10000ee0 <main+0x234>
	{
		for(i = 0; i < 16; i++)
10000d84:	e03fb915 	stw	zero,-284(fp)
10000d88:	00003506 	br	10000e60 <main+0x1b4>
		{
			encryptedMsg[i] = charsToHex(plaintext[2*i], plaintext[(2*i)+1]);
10000d8c:	e0bfb917 	ldw	r2,-284(fp)
10000d90:	1085883a 	add	r2,r2,r2
10000d94:	1007883a 	mov	r3,r2
10000d98:	e0bfbb04 	addi	r2,fp,-276
10000d9c:	10c5883a 	add	r2,r2,r3
10000da0:	10800003 	ldbu	r2,0(r2)
10000da4:	11003fcc 	andi	r4,r2,255
10000da8:	2100201c 	xori	r4,r4,128
10000dac:	213fe004 	addi	r4,r4,-128
10000db0:	e0bfb917 	ldw	r2,-284(fp)
10000db4:	1085883a 	add	r2,r2,r2
10000db8:	10800044 	addi	r2,r2,1
10000dbc:	e0ffbb04 	addi	r3,fp,-276
10000dc0:	1885883a 	add	r2,r3,r2
10000dc4:	10800003 	ldbu	r2,0(r2)
10000dc8:	10803fcc 	andi	r2,r2,255
10000dcc:	1080201c 	xori	r2,r2,128
10000dd0:	10bfe004 	addi	r2,r2,-128
10000dd4:	100b883a 	mov	r5,r2
10000dd8:	00002b40 	call	100002b4 <charsToHex>
10000ddc:	1009883a 	mov	r4,r2
10000de0:	e0ffcf84 	addi	r3,fp,-194
10000de4:	e0bfb917 	ldw	r2,-284(fp)
10000de8:	1885883a 	add	r2,r3,r2
10000dec:	11000005 	stb	r4,0(r2)
			xkey[i] = charsToHex(key[2*i], key[(2*i)+1]);
10000df0:	e0bfb917 	ldw	r2,-284(fp)
10000df4:	1085883a 	add	r2,r2,r2
10000df8:	1007883a 	mov	r3,r2
10000dfc:	e0bfc344 	addi	r2,fp,-243
10000e00:	10c5883a 	add	r2,r2,r3
10000e04:	10800003 	ldbu	r2,0(r2)
10000e08:	11003fcc 	andi	r4,r2,255
10000e0c:	2100201c 	xori	r4,r4,128
10000e10:	213fe004 	addi	r4,r4,-128
10000e14:	e0bfb917 	ldw	r2,-284(fp)
10000e18:	1085883a 	add	r2,r2,r2
10000e1c:	10800044 	addi	r2,r2,1
10000e20:	e0ffc344 	addi	r3,fp,-243
10000e24:	1885883a 	add	r2,r3,r2
10000e28:	10800003 	ldbu	r2,0(r2)
10000e2c:	10803fcc 	andi	r2,r2,255
10000e30:	1080201c 	xori	r2,r2,128
10000e34:	10bfe004 	addi	r2,r2,-128
10000e38:	100b883a 	mov	r5,r2
10000e3c:	00002b40 	call	100002b4 <charsToHex>
10000e40:	1009883a 	mov	r4,r2
10000e44:	e0ffcb84 	addi	r3,fp,-210
10000e48:	e0bfb917 	ldw	r2,-284(fp)
10000e4c:	1885883a 	add	r2,r3,r2
10000e50:	11000005 	stb	r4,0(r2)
	printf("Press reset!\n");
	while (*to_sw_sig != 3);

	for(j = 0; j < 1000; j++)
	{
		for(i = 0; i < 16; i++)
10000e54:	e0bfb917 	ldw	r2,-284(fp)
10000e58:	10800044 	addi	r2,r2,1
10000e5c:	e0bfb915 	stw	r2,-284(fp)
10000e60:	e0bfb917 	ldw	r2,-284(fp)
10000e64:	10800410 	cmplti	r2,r2,16
10000e68:	103fc81e 	bne	r2,zero,10000d8c <__alt_data_end+0xf8000d8c>
		{
			encryptedMsg[i] = charsToHex(plaintext[2*i], plaintext[(2*i)+1]);
			xkey[i] = charsToHex(key[2*i], key[(2*i)+1]);
		}
		KeyExpansion(xkey, word, 4);
10000e6c:	e0ffcb84 	addi	r3,fp,-210
10000e70:	e0bfd404 	addi	r2,fp,-176
10000e74:	1809883a 	mov	r4,r3
10000e78:	100b883a 	mov	r5,r2
10000e7c:	01800104 	movi	r6,4
10000e80:	0000ac40 	call	10000ac4 <KeyExpansion>
		AES(encryptedMsg, word);
10000e84:	e0ffcf84 	addi	r3,fp,-194
10000e88:	e0bfd404 	addi	r2,fp,-176
10000e8c:	1809883a 	mov	r4,r3
10000e90:	100b883a 	mov	r5,r2
10000e94:	0000a180 	call	10000a18 <AES>
		*to_hw_sig = 3;
10000e98:	00800804 	movi	r2,32
10000e9c:	00c000c4 	movi	r3,3
10000ea0:	10c00005 	stb	r3,0(r2)
		while (*to_sw_sig != 2);
10000ea4:	0001883a 	nop
10000ea8:	00801404 	movi	r2,80
10000eac:	10800003 	ldbu	r2,0(r2)
10000eb0:	10803fcc 	andi	r2,r2,255
10000eb4:	1080201c 	xori	r2,r2,128
10000eb8:	10bfe004 	addi	r2,r2,-128
10000ebc:	10800098 	cmpnei	r2,r2,2
10000ec0:	103ff91e 	bne	r2,zero,10000ea8 <__alt_data_end+0xf8000ea8>
		printf("Cycle: %d\n", j);
10000ec4:	01040074 	movhi	r4,4097
10000ec8:	21005004 	addi	r4,r4,320
10000ecc:	e17fba17 	ldw	r5,-280(fp)
10000ed0:	00011c80 	call	100011c8 <printf>
	*to_hw_port = 0;

	printf("Press reset!\n");
	while (*to_sw_sig != 3);

	for(j = 0; j < 1000; j++)
10000ed4:	e0bfba17 	ldw	r2,-280(fp)
10000ed8:	10800044 	addi	r2,r2,1
10000edc:	e0bfba15 	stw	r2,-280(fp)
10000ee0:	e0bfba17 	ldw	r2,-280(fp)
10000ee4:	1080fa10 	cmplti	r2,r2,1000
10000ee8:	103fa61e 	bne	r2,zero,10000d84 <__alt_data_end+0xf8000d84>
		AES(encryptedMsg, word);
		*to_hw_sig = 3;
		while (*to_sw_sig != 2);
		printf("Cycle: %d\n", j);
	}
	printf("Completed 1000 cycles");
10000eec:	01040074 	movhi	r4,4097
10000ef0:	21005304 	addi	r4,r4,332
10000ef4:	00011c80 	call	100011c8 <printf>
	// time: 30.78 for 16000 bytes
	// 0.5198kB/s
	return 0;
10000ef8:	0005883a 	mov	r2,zero
}
10000efc:	e037883a 	mov	sp,fp
10000f00:	dfc00117 	ldw	ra,4(sp)
10000f04:	df000017 	ldw	fp,0(sp)
10000f08:	dec00204 	addi	sp,sp,8
10000f0c:	f800283a 	ret

10000f10 <udivmodsi4>:
10000f10:	2900182e 	bgeu	r5,r4,10000f74 <udivmodsi4+0x64>
10000f14:	28001716 	blt	r5,zero,10000f74 <udivmodsi4+0x64>
10000f18:	00800804 	movi	r2,32
10000f1c:	00c00044 	movi	r3,1
10000f20:	00000206 	br	10000f2c <udivmodsi4+0x1c>
10000f24:	10001126 	beq	r2,zero,10000f6c <udivmodsi4+0x5c>
10000f28:	28000516 	blt	r5,zero,10000f40 <udivmodsi4+0x30>
10000f2c:	294b883a 	add	r5,r5,r5
10000f30:	10bfffc4 	addi	r2,r2,-1
10000f34:	18c7883a 	add	r3,r3,r3
10000f38:	293ffa36 	bltu	r5,r4,10000f24 <__alt_data_end+0xf8000f24>
10000f3c:	18000b26 	beq	r3,zero,10000f6c <udivmodsi4+0x5c>
10000f40:	0005883a 	mov	r2,zero
10000f44:	21400236 	bltu	r4,r5,10000f50 <udivmodsi4+0x40>
10000f48:	2149c83a 	sub	r4,r4,r5
10000f4c:	10c4b03a 	or	r2,r2,r3
10000f50:	1806d07a 	srli	r3,r3,1
10000f54:	280ad07a 	srli	r5,r5,1
10000f58:	183ffa1e 	bne	r3,zero,10000f44 <__alt_data_end+0xf8000f44>
10000f5c:	3000011e 	bne	r6,zero,10000f64 <udivmodsi4+0x54>
10000f60:	f800283a 	ret
10000f64:	2005883a 	mov	r2,r4
10000f68:	f800283a 	ret
10000f6c:	0005883a 	mov	r2,zero
10000f70:	003ffa06 	br	10000f5c <__alt_data_end+0xf8000f5c>
10000f74:	00c00044 	movi	r3,1
10000f78:	003ff106 	br	10000f40 <__alt_data_end+0xf8000f40>

10000f7c <__divsi3>:
10000f7c:	defffe04 	addi	sp,sp,-8
10000f80:	dfc00115 	stw	ra,4(sp)
10000f84:	dc000015 	stw	r16,0(sp)
10000f88:	20000b16 	blt	r4,zero,10000fb8 <__divsi3+0x3c>
10000f8c:	0021883a 	mov	r16,zero
10000f90:	28000c16 	blt	r5,zero,10000fc4 <__divsi3+0x48>
10000f94:	000d883a 	mov	r6,zero
10000f98:	0000f100 	call	10000f10 <udivmodsi4>
10000f9c:	0407c83a 	sub	r3,zero,r16
10000fa0:	1884f03a 	xor	r2,r3,r2
10000fa4:	1405883a 	add	r2,r2,r16
10000fa8:	dfc00117 	ldw	ra,4(sp)
10000fac:	dc000017 	ldw	r16,0(sp)
10000fb0:	dec00204 	addi	sp,sp,8
10000fb4:	f800283a 	ret
10000fb8:	0109c83a 	sub	r4,zero,r4
10000fbc:	04000044 	movi	r16,1
10000fc0:	283ff40e 	bge	r5,zero,10000f94 <__alt_data_end+0xf8000f94>
10000fc4:	014bc83a 	sub	r5,zero,r5
10000fc8:	8400005c 	xori	r16,r16,1
10000fcc:	003ff106 	br	10000f94 <__alt_data_end+0xf8000f94>

10000fd0 <__modsi3>:
10000fd0:	defffd04 	addi	sp,sp,-12
10000fd4:	dfc00215 	stw	ra,8(sp)
10000fd8:	dc400115 	stw	r17,4(sp)
10000fdc:	dc000015 	stw	r16,0(sp)
10000fe0:	20000c16 	blt	r4,zero,10001014 <__modsi3+0x44>
10000fe4:	0023883a 	mov	r17,zero
10000fe8:	0021883a 	mov	r16,zero
10000fec:	28000d16 	blt	r5,zero,10001024 <__modsi3+0x54>
10000ff0:	01800044 	movi	r6,1
10000ff4:	0000f100 	call	10000f10 <udivmodsi4>
10000ff8:	1404f03a 	xor	r2,r2,r16
10000ffc:	8885883a 	add	r2,r17,r2
10001000:	dfc00217 	ldw	ra,8(sp)
10001004:	dc400117 	ldw	r17,4(sp)
10001008:	dc000017 	ldw	r16,0(sp)
1000100c:	dec00304 	addi	sp,sp,12
10001010:	f800283a 	ret
10001014:	0109c83a 	sub	r4,zero,r4
10001018:	04400044 	movi	r17,1
1000101c:	043fffc4 	movi	r16,-1
10001020:	283ff30e 	bge	r5,zero,10000ff0 <__alt_data_end+0xf8000ff0>
10001024:	014bc83a 	sub	r5,zero,r5
10001028:	003ff106 	br	10000ff0 <__alt_data_end+0xf8000ff0>

1000102c <__udivsi3>:
1000102c:	000d883a 	mov	r6,zero
10001030:	0000f101 	jmpi	10000f10 <udivmodsi4>

10001034 <__umodsi3>:
10001034:	01800044 	movi	r6,1
10001038:	0000f101 	jmpi	10000f10 <udivmodsi4>

1000103c <__mulsi3>:
1000103c:	0005883a 	mov	r2,zero
10001040:	20000726 	beq	r4,zero,10001060 <__mulsi3+0x24>
10001044:	20c0004c 	andi	r3,r4,1
10001048:	2008d07a 	srli	r4,r4,1
1000104c:	18000126 	beq	r3,zero,10001054 <__mulsi3+0x18>
10001050:	1145883a 	add	r2,r2,r5
10001054:	294b883a 	add	r5,r5,r5
10001058:	203ffa1e 	bne	r4,zero,10001044 <__alt_data_end+0xf8001044>
1000105c:	f800283a 	ret
10001060:	f800283a 	ret

10001064 <memcpy>:
10001064:	deffff04 	addi	sp,sp,-4
10001068:	dc000015 	stw	r16,0(sp)
1000106c:	00c003c4 	movi	r3,15
10001070:	2005883a 	mov	r2,r4
10001074:	1980432e 	bgeu	r3,r6,10001184 <memcpy+0x120>
10001078:	2146b03a 	or	r3,r4,r5
1000107c:	18c000cc 	andi	r3,r3,3
10001080:	1800421e 	bne	r3,zero,1000118c <memcpy+0x128>
10001084:	343ffc04 	addi	r16,r6,-16
10001088:	8020d13a 	srli	r16,r16,4
1000108c:	28c00104 	addi	r3,r5,4
10001090:	23400104 	addi	r13,r4,4
10001094:	801e913a 	slli	r15,r16,4
10001098:	2b000204 	addi	r12,r5,8
1000109c:	22c00204 	addi	r11,r4,8
100010a0:	7bc00504 	addi	r15,r15,20
100010a4:	2a800304 	addi	r10,r5,12
100010a8:	22400304 	addi	r9,r4,12
100010ac:	2bdf883a 	add	r15,r5,r15
100010b0:	2811883a 	mov	r8,r5
100010b4:	200f883a 	mov	r7,r4
100010b8:	41000017 	ldw	r4,0(r8)
100010bc:	39c00404 	addi	r7,r7,16
100010c0:	18c00404 	addi	r3,r3,16
100010c4:	393ffc15 	stw	r4,-16(r7)
100010c8:	1bbffc17 	ldw	r14,-16(r3)
100010cc:	6b400404 	addi	r13,r13,16
100010d0:	5ac00404 	addi	r11,r11,16
100010d4:	6bbffc15 	stw	r14,-16(r13)
100010d8:	63800017 	ldw	r14,0(r12)
100010dc:	4a400404 	addi	r9,r9,16
100010e0:	42000404 	addi	r8,r8,16
100010e4:	5bbffc15 	stw	r14,-16(r11)
100010e8:	53800017 	ldw	r14,0(r10)
100010ec:	63000404 	addi	r12,r12,16
100010f0:	52800404 	addi	r10,r10,16
100010f4:	4bbffc15 	stw	r14,-16(r9)
100010f8:	1bffef1e 	bne	r3,r15,100010b8 <__alt_data_end+0xf80010b8>
100010fc:	81c00044 	addi	r7,r16,1
10001100:	380e913a 	slli	r7,r7,4
10001104:	310003cc 	andi	r4,r6,15
10001108:	02c000c4 	movi	r11,3
1000110c:	11c7883a 	add	r3,r2,r7
10001110:	29cb883a 	add	r5,r5,r7
10001114:	59001f2e 	bgeu	r11,r4,10001194 <memcpy+0x130>
10001118:	1813883a 	mov	r9,r3
1000111c:	2811883a 	mov	r8,r5
10001120:	200f883a 	mov	r7,r4
10001124:	42800017 	ldw	r10,0(r8)
10001128:	4a400104 	addi	r9,r9,4
1000112c:	39ffff04 	addi	r7,r7,-4
10001130:	4abfff15 	stw	r10,-4(r9)
10001134:	42000104 	addi	r8,r8,4
10001138:	59fffa36 	bltu	r11,r7,10001124 <__alt_data_end+0xf8001124>
1000113c:	213fff04 	addi	r4,r4,-4
10001140:	2008d0ba 	srli	r4,r4,2
10001144:	318000cc 	andi	r6,r6,3
10001148:	21000044 	addi	r4,r4,1
1000114c:	2109883a 	add	r4,r4,r4
10001150:	2109883a 	add	r4,r4,r4
10001154:	1907883a 	add	r3,r3,r4
10001158:	290b883a 	add	r5,r5,r4
1000115c:	30000626 	beq	r6,zero,10001178 <memcpy+0x114>
10001160:	198d883a 	add	r6,r3,r6
10001164:	29c00003 	ldbu	r7,0(r5)
10001168:	18c00044 	addi	r3,r3,1
1000116c:	29400044 	addi	r5,r5,1
10001170:	19ffffc5 	stb	r7,-1(r3)
10001174:	19bffb1e 	bne	r3,r6,10001164 <__alt_data_end+0xf8001164>
10001178:	dc000017 	ldw	r16,0(sp)
1000117c:	dec00104 	addi	sp,sp,4
10001180:	f800283a 	ret
10001184:	2007883a 	mov	r3,r4
10001188:	003ff406 	br	1000115c <__alt_data_end+0xf800115c>
1000118c:	2007883a 	mov	r3,r4
10001190:	003ff306 	br	10001160 <__alt_data_end+0xf8001160>
10001194:	200d883a 	mov	r6,r4
10001198:	003ff006 	br	1000115c <__alt_data_end+0xf800115c>

1000119c <_printf_r>:
1000119c:	defffd04 	addi	sp,sp,-12
100011a0:	dfc00015 	stw	ra,0(sp)
100011a4:	d9800115 	stw	r6,4(sp)
100011a8:	d9c00215 	stw	r7,8(sp)
100011ac:	280d883a 	mov	r6,r5
100011b0:	21400217 	ldw	r5,8(r4)
100011b4:	d9c00104 	addi	r7,sp,4
100011b8:	00013680 	call	10001368 <___vfprintf_internal_r>
100011bc:	dfc00017 	ldw	ra,0(sp)
100011c0:	dec00304 	addi	sp,sp,12
100011c4:	f800283a 	ret

100011c8 <printf>:
100011c8:	defffc04 	addi	sp,sp,-16
100011cc:	dfc00015 	stw	ra,0(sp)
100011d0:	d9400115 	stw	r5,4(sp)
100011d4:	d9800215 	stw	r6,8(sp)
100011d8:	d9c00315 	stw	r7,12(sp)
100011dc:	00840074 	movhi	r2,4097
100011e0:	10895d04 	addi	r2,r2,9588
100011e4:	10800017 	ldw	r2,0(r2)
100011e8:	200b883a 	mov	r5,r4
100011ec:	d9800104 	addi	r6,sp,4
100011f0:	11000217 	ldw	r4,8(r2)
100011f4:	00034640 	call	10003464 <__vfprintf_internal>
100011f8:	dfc00017 	ldw	ra,0(sp)
100011fc:	dec00404 	addi	sp,sp,16
10001200:	f800283a 	ret

10001204 <_puts_r>:
10001204:	defff604 	addi	sp,sp,-40
10001208:	dc000715 	stw	r16,28(sp)
1000120c:	2021883a 	mov	r16,r4
10001210:	2809883a 	mov	r4,r5
10001214:	dc400815 	stw	r17,32(sp)
10001218:	dfc00915 	stw	ra,36(sp)
1000121c:	2823883a 	mov	r17,r5
10001220:	00012d00 	call	100012d0 <strlen>
10001224:	00c40074 	movhi	r3,4097
10001228:	18c95d04 	addi	r3,r3,9588
1000122c:	18c00017 	ldw	r3,0(r3)
10001230:	11000044 	addi	r4,r2,1
10001234:	d8800115 	stw	r2,4(sp)
10001238:	18c00217 	ldw	r3,8(r3)
1000123c:	01440074 	movhi	r5,4097
10001240:	29406204 	addi	r5,r5,392
10001244:	1880030b 	ldhu	r2,12(r3)
10001248:	d9400215 	stw	r5,8(sp)
1000124c:	d9000615 	stw	r4,24(sp)
10001250:	01400044 	movi	r5,1
10001254:	01000084 	movi	r4,2
10001258:	d9000515 	stw	r4,20(sp)
1000125c:	dc400015 	stw	r17,0(sp)
10001260:	d9400315 	stw	r5,12(sp)
10001264:	dec00415 	stw	sp,16(sp)
10001268:	1108000c 	andi	r4,r2,8192
1000126c:	2000061e 	bne	r4,zero,10001288 <_puts_r+0x84>
10001270:	19401917 	ldw	r5,100(r3)
10001274:	0137ffc4 	movi	r4,-8193
10001278:	10880014 	ori	r2,r2,8192
1000127c:	2908703a 	and	r4,r5,r4
10001280:	1880030d 	sth	r2,12(r3)
10001284:	19001915 	stw	r4,100(r3)
10001288:	81400217 	ldw	r5,8(r16)
1000128c:	8009883a 	mov	r4,r16
10001290:	d9800404 	addi	r6,sp,16
10001294:	00059280 	call	10005928 <__sfvwrite_r>
10001298:	1000061e 	bne	r2,zero,100012b4 <_puts_r+0xb0>
1000129c:	00800284 	movi	r2,10
100012a0:	dfc00917 	ldw	ra,36(sp)
100012a4:	dc400817 	ldw	r17,32(sp)
100012a8:	dc000717 	ldw	r16,28(sp)
100012ac:	dec00a04 	addi	sp,sp,40
100012b0:	f800283a 	ret
100012b4:	00bfffc4 	movi	r2,-1
100012b8:	003ff906 	br	100012a0 <__alt_data_end+0xf80012a0>

100012bc <puts>:
100012bc:	00840074 	movhi	r2,4097
100012c0:	10895d04 	addi	r2,r2,9588
100012c4:	200b883a 	mov	r5,r4
100012c8:	11000017 	ldw	r4,0(r2)
100012cc:	00012041 	jmpi	10001204 <_puts_r>

100012d0 <strlen>:
100012d0:	208000cc 	andi	r2,r4,3
100012d4:	10002026 	beq	r2,zero,10001358 <strlen+0x88>
100012d8:	20800007 	ldb	r2,0(r4)
100012dc:	10002026 	beq	r2,zero,10001360 <strlen+0x90>
100012e0:	2005883a 	mov	r2,r4
100012e4:	00000206 	br	100012f0 <strlen+0x20>
100012e8:	10c00007 	ldb	r3,0(r2)
100012ec:	18001826 	beq	r3,zero,10001350 <strlen+0x80>
100012f0:	10800044 	addi	r2,r2,1
100012f4:	10c000cc 	andi	r3,r2,3
100012f8:	183ffb1e 	bne	r3,zero,100012e8 <__alt_data_end+0xf80012e8>
100012fc:	10c00017 	ldw	r3,0(r2)
10001300:	01ffbff4 	movhi	r7,65279
10001304:	39ffbfc4 	addi	r7,r7,-257
10001308:	00ca303a 	nor	r5,zero,r3
1000130c:	01a02074 	movhi	r6,32897
10001310:	19c7883a 	add	r3,r3,r7
10001314:	31a02004 	addi	r6,r6,-32640
10001318:	1946703a 	and	r3,r3,r5
1000131c:	1986703a 	and	r3,r3,r6
10001320:	1800091e 	bne	r3,zero,10001348 <strlen+0x78>
10001324:	10800104 	addi	r2,r2,4
10001328:	10c00017 	ldw	r3,0(r2)
1000132c:	19cb883a 	add	r5,r3,r7
10001330:	00c6303a 	nor	r3,zero,r3
10001334:	28c6703a 	and	r3,r5,r3
10001338:	1986703a 	and	r3,r3,r6
1000133c:	183ff926 	beq	r3,zero,10001324 <__alt_data_end+0xf8001324>
10001340:	00000106 	br	10001348 <strlen+0x78>
10001344:	10800044 	addi	r2,r2,1
10001348:	10c00007 	ldb	r3,0(r2)
1000134c:	183ffd1e 	bne	r3,zero,10001344 <__alt_data_end+0xf8001344>
10001350:	1105c83a 	sub	r2,r2,r4
10001354:	f800283a 	ret
10001358:	2005883a 	mov	r2,r4
1000135c:	003fe706 	br	100012fc <__alt_data_end+0xf80012fc>
10001360:	0005883a 	mov	r2,zero
10001364:	f800283a 	ret

10001368 <___vfprintf_internal_r>:
10001368:	defeb604 	addi	sp,sp,-1320
1000136c:	dfc14915 	stw	ra,1316(sp)
10001370:	ddc14715 	stw	r23,1308(sp)
10001374:	dd814615 	stw	r22,1304(sp)
10001378:	202f883a 	mov	r23,r4
1000137c:	282d883a 	mov	r22,r5
10001380:	d9812a15 	stw	r6,1192(sp)
10001384:	d9c12d15 	stw	r7,1204(sp)
10001388:	df014815 	stw	fp,1312(sp)
1000138c:	dd414515 	stw	r21,1300(sp)
10001390:	dd014415 	stw	r20,1296(sp)
10001394:	dcc14315 	stw	r19,1292(sp)
10001398:	dc814215 	stw	r18,1288(sp)
1000139c:	dc414115 	stw	r17,1284(sp)
100013a0:	dc014015 	stw	r16,1280(sp)
100013a4:	0005fe80 	call	10005fe8 <_localeconv_r>
100013a8:	10800017 	ldw	r2,0(r2)
100013ac:	1009883a 	mov	r4,r2
100013b0:	d8813515 	stw	r2,1236(sp)
100013b4:	00012d00 	call	100012d0 <strlen>
100013b8:	d8813815 	stw	r2,1248(sp)
100013bc:	b8000226 	beq	r23,zero,100013c8 <___vfprintf_internal_r+0x60>
100013c0:	b8800e17 	ldw	r2,56(r23)
100013c4:	10010526 	beq	r2,zero,100017dc <___vfprintf_internal_r+0x474>
100013c8:	b0c0030b 	ldhu	r3,12(r22)
100013cc:	1908000c 	andi	r4,r3,8192
100013d0:	1805883a 	mov	r2,r3
100013d4:	2000071e 	bne	r4,zero,100013f4 <___vfprintf_internal_r+0x8c>
100013d8:	b1001917 	ldw	r4,100(r22)
100013dc:	18880014 	ori	r2,r3,8192
100013e0:	00f7ffc4 	movi	r3,-8193
100013e4:	20c8703a 	and	r4,r4,r3
100013e8:	b080030d 	sth	r2,12(r22)
100013ec:	1007883a 	mov	r3,r2
100013f0:	b1001915 	stw	r4,100(r22)
100013f4:	1100020c 	andi	r4,r2,8
100013f8:	2000a826 	beq	r4,zero,1000169c <___vfprintf_internal_r+0x334>
100013fc:	b1000417 	ldw	r4,16(r22)
10001400:	2000a626 	beq	r4,zero,1000169c <___vfprintf_internal_r+0x334>
10001404:	1080068c 	andi	r2,r2,26
10001408:	01000284 	movi	r4,10
1000140c:	1100ac26 	beq	r2,r4,100016c0 <___vfprintf_internal_r+0x358>
10001410:	d8c10e04 	addi	r3,sp,1080
10001414:	d9010dc4 	addi	r4,sp,1079
10001418:	d9400404 	addi	r5,sp,16
1000141c:	05040074 	movhi	r20,4097
10001420:	1905c83a 	sub	r2,r3,r4
10001424:	a5007384 	addi	r20,r20,462
10001428:	d8c12815 	stw	r3,1184(sp)
1000142c:	d9012915 	stw	r4,1188(sp)
10001430:	d9411e15 	stw	r5,1144(sp)
10001434:	d8012015 	stw	zero,1152(sp)
10001438:	d8011f15 	stw	zero,1148(sp)
1000143c:	d8013315 	stw	zero,1228(sp)
10001440:	d8013715 	stw	zero,1244(sp)
10001444:	d8013915 	stw	zero,1252(sp)
10001448:	d8013b15 	stw	zero,1260(sp)
1000144c:	d8013a15 	stw	zero,1256(sp)
10001450:	d8012f15 	stw	zero,1212(sp)
10001454:	2811883a 	mov	r8,r5
10001458:	d8813c15 	stw	r2,1264(sp)
1000145c:	d8c12a17 	ldw	r3,1192(sp)
10001460:	18800007 	ldb	r2,0(r3)
10001464:	10021326 	beq	r2,zero,10001cb4 <___vfprintf_internal_r+0x94c>
10001468:	00c00944 	movi	r3,37
1000146c:	dc012a17 	ldw	r16,1192(sp)
10001470:	10c0021e 	bne	r2,r3,1000147c <___vfprintf_internal_r+0x114>
10001474:	00001606 	br	100014d0 <___vfprintf_internal_r+0x168>
10001478:	10c08526 	beq	r2,r3,10001690 <___vfprintf_internal_r+0x328>
1000147c:	84000044 	addi	r16,r16,1
10001480:	80800007 	ldb	r2,0(r16)
10001484:	103ffc1e 	bne	r2,zero,10001478 <__alt_data_end+0xf8001478>
10001488:	d9012a17 	ldw	r4,1192(sp)
1000148c:	8123c83a 	sub	r17,r16,r4
10001490:	88000f26 	beq	r17,zero,100014d0 <___vfprintf_internal_r+0x168>
10001494:	d8812a17 	ldw	r2,1192(sp)
10001498:	d8c12017 	ldw	r3,1152(sp)
1000149c:	44400115 	stw	r17,4(r8)
100014a0:	40800015 	stw	r2,0(r8)
100014a4:	d8811f17 	ldw	r2,1148(sp)
100014a8:	1c47883a 	add	r3,r3,r17
100014ac:	d8c12015 	stw	r3,1152(sp)
100014b0:	10800044 	addi	r2,r2,1
100014b4:	d8811f15 	stw	r2,1148(sp)
100014b8:	00c001c4 	movi	r3,7
100014bc:	1880b516 	blt	r3,r2,10001794 <___vfprintf_internal_r+0x42c>
100014c0:	42000204 	addi	r8,r8,8
100014c4:	d8c12f17 	ldw	r3,1212(sp)
100014c8:	1c47883a 	add	r3,r3,r17
100014cc:	d8c12f15 	stw	r3,1212(sp)
100014d0:	80800007 	ldb	r2,0(r16)
100014d4:	1000b626 	beq	r2,zero,100017b0 <___vfprintf_internal_r+0x448>
100014d8:	80800044 	addi	r2,r16,1
100014dc:	84000047 	ldb	r16,1(r16)
100014e0:	0027883a 	mov	r19,zero
100014e4:	0039883a 	mov	fp,zero
100014e8:	dcc12b05 	stb	r19,1196(sp)
100014ec:	d8012785 	stb	zero,1182(sp)
100014f0:	027fffc4 	movi	r9,-1
100014f4:	d8012e15 	stw	zero,1208(sp)
100014f8:	04401604 	movi	r17,88
100014fc:	04800244 	movi	r18,9
10001500:	da012a15 	stw	r8,1192(sp)
10001504:	e027883a 	mov	r19,fp
10001508:	17000044 	addi	fp,r2,1
1000150c:	80bff804 	addi	r2,r16,-32
10001510:	88831236 	bltu	r17,r2,1000215c <___vfprintf_internal_r+0xdf4>
10001514:	100490ba 	slli	r2,r2,2
10001518:	01040034 	movhi	r4,4096
1000151c:	21054b04 	addi	r4,r4,5420
10001520:	1105883a 	add	r2,r2,r4
10001524:	10800017 	ldw	r2,0(r2)
10001528:	1000683a 	jmp	r2
1000152c:	10002078 	rdprs	zero,r2,129
10001530:	1000215c 	xori	zero,r2,133
10001534:	1000215c 	xori	zero,r2,133
10001538:	10002094 	ori	zero,r2,130
1000153c:	1000215c 	xori	zero,r2,133
10001540:	1000215c 	xori	zero,r2,133
10001544:	1000215c 	xori	zero,r2,133
10001548:	1000215c 	xori	zero,r2,133
1000154c:	1000215c 	xori	zero,r2,133
10001550:	1000215c 	xori	zero,r2,133
10001554:	100020a4 	muli	zero,r2,130
10001558:	100020cc 	andi	zero,r2,131
1000155c:	1000215c 	xori	zero,r2,133
10001560:	100017e8 	cmpgeui	zero,r2,95
10001564:	100017f8 	rdprs	zero,r2,95
10001568:	1000215c 	xori	zero,r2,133
1000156c:	10001848 	cmpgei	zero,r2,97
10001570:	10001858 	cmpnei	zero,r2,97
10001574:	10001858 	cmpnei	zero,r2,97
10001578:	10001858 	cmpnei	zero,r2,97
1000157c:	10001858 	cmpnei	zero,r2,97
10001580:	10001858 	cmpnei	zero,r2,97
10001584:	10001858 	cmpnei	zero,r2,97
10001588:	10001858 	cmpnei	zero,r2,97
1000158c:	10001858 	cmpnei	zero,r2,97
10001590:	10001858 	cmpnei	zero,r2,97
10001594:	1000215c 	xori	zero,r2,133
10001598:	1000215c 	xori	zero,r2,133
1000159c:	1000215c 	xori	zero,r2,133
100015a0:	1000215c 	xori	zero,r2,133
100015a4:	1000215c 	xori	zero,r2,133
100015a8:	1000215c 	xori	zero,r2,133
100015ac:	1000215c 	xori	zero,r2,133
100015b0:	1000215c 	xori	zero,r2,133
100015b4:	1000215c 	xori	zero,r2,133
100015b8:	1000215c 	xori	zero,r2,133
100015bc:	1000189c 	xori	zero,r2,98
100015c0:	10001cbc 	xorhi	zero,r2,114
100015c4:	1000215c 	xori	zero,r2,133
100015c8:	10001cbc 	xorhi	zero,r2,114
100015cc:	1000215c 	xori	zero,r2,133
100015d0:	1000215c 	xori	zero,r2,133
100015d4:	1000215c 	xori	zero,r2,133
100015d8:	1000215c 	xori	zero,r2,133
100015dc:	10001d64 	muli	zero,r2,117
100015e0:	1000215c 	xori	zero,r2,133
100015e4:	1000215c 	xori	zero,r2,133
100015e8:	10001d74 	orhi	zero,r2,117
100015ec:	1000215c 	xori	zero,r2,133
100015f0:	1000215c 	xori	zero,r2,133
100015f4:	1000215c 	xori	zero,r2,133
100015f8:	1000215c 	xori	zero,r2,133
100015fc:	1000215c 	xori	zero,r2,133
10001600:	10001db8 	rdprs	zero,r2,118
10001604:	1000215c 	xori	zero,r2,133
10001608:	1000215c 	xori	zero,r2,133
1000160c:	10001df0 	cmpltui	zero,r2,119
10001610:	1000215c 	xori	zero,r2,133
10001614:	1000215c 	xori	zero,r2,133
10001618:	1000215c 	xori	zero,r2,133
1000161c:	1000215c 	xori	zero,r2,133
10001620:	1000215c 	xori	zero,r2,133
10001624:	1000215c 	xori	zero,r2,133
10001628:	1000215c 	xori	zero,r2,133
1000162c:	1000215c 	xori	zero,r2,133
10001630:	1000215c 	xori	zero,r2,133
10001634:	1000215c 	xori	zero,r2,133
10001638:	1000202c 	andhi	zero,r2,128
1000163c:	10001fd8 	cmpnei	zero,r2,127
10001640:	10001cbc 	xorhi	zero,r2,114
10001644:	10001cbc 	xorhi	zero,r2,114
10001648:	10001cbc 	xorhi	zero,r2,114
1000164c:	1000201c 	xori	zero,r2,128
10001650:	10001fd8 	cmpnei	zero,r2,127
10001654:	1000215c 	xori	zero,r2,133
10001658:	1000215c 	xori	zero,r2,133
1000165c:	10001ef4 	orhi	zero,r2,123
10001660:	1000215c 	xori	zero,r2,133
10001664:	10001f0c 	andi	zero,r2,124
10001668:	10001f4c 	andi	zero,r2,125
1000166c:	10001f8c 	andi	zero,r2,126
10001670:	10001e58 	cmpnei	zero,r2,121
10001674:	1000215c 	xori	zero,r2,133
10001678:	100020e0 	cmpeqi	zero,r2,131
1000167c:	1000215c 	xori	zero,r2,133
10001680:	10001e68 	cmpgeui	zero,r2,121
10001684:	1000215c 	xori	zero,r2,133
10001688:	1000215c 	xori	zero,r2,133
1000168c:	10001ea8 	cmpgeui	zero,r2,122
10001690:	d9412a17 	ldw	r5,1192(sp)
10001694:	8163c83a 	sub	r17,r16,r5
10001698:	003f7d06 	br	10001490 <__alt_data_end+0xf8001490>
1000169c:	b809883a 	mov	r4,r23
100016a0:	b00b883a 	mov	r5,r22
100016a4:	00034880 	call	10003488 <__swsetup_r>
100016a8:	10002d1e 	bne	r2,zero,10001760 <___vfprintf_internal_r+0x3f8>
100016ac:	b0c0030b 	ldhu	r3,12(r22)
100016b0:	01000284 	movi	r4,10
100016b4:	1805883a 	mov	r2,r3
100016b8:	1080068c 	andi	r2,r2,26
100016bc:	113f541e 	bne	r2,r4,10001410 <__alt_data_end+0xf8001410>
100016c0:	b080038b 	ldhu	r2,14(r22)
100016c4:	113fffcc 	andi	r4,r2,65535
100016c8:	2120001c 	xori	r4,r4,32768
100016cc:	21200004 	addi	r4,r4,-32768
100016d0:	203f4f16 	blt	r4,zero,10001410 <__alt_data_end+0xf8001410>
100016d4:	b2c01917 	ldw	r11,100(r22)
100016d8:	b2800717 	ldw	r10,28(r22)
100016dc:	b2400917 	ldw	r9,36(r22)
100016e0:	d9812a17 	ldw	r6,1192(sp)
100016e4:	d9c12d17 	ldw	r7,1204(sp)
100016e8:	02010004 	movi	r8,1024
100016ec:	18ffff4c 	andi	r3,r3,65533
100016f0:	d881078d 	sth	r2,1054(sp)
100016f4:	b809883a 	mov	r4,r23
100016f8:	d8800404 	addi	r2,sp,16
100016fc:	d9410404 	addi	r5,sp,1040
10001700:	d8c1070d 	sth	r3,1052(sp)
10001704:	dac11d15 	stw	r11,1140(sp)
10001708:	da810b15 	stw	r10,1068(sp)
1000170c:	da410d15 	stw	r9,1076(sp)
10001710:	d8810415 	stw	r2,1040(sp)
10001714:	d8810815 	stw	r2,1056(sp)
10001718:	da010615 	stw	r8,1048(sp)
1000171c:	da010915 	stw	r8,1060(sp)
10001720:	d8010a15 	stw	zero,1064(sp)
10001724:	00013680 	call	10001368 <___vfprintf_internal_r>
10001728:	1021883a 	mov	r16,r2
1000172c:	10000416 	blt	r2,zero,10001740 <___vfprintf_internal_r+0x3d8>
10001730:	b809883a 	mov	r4,r23
10001734:	d9410404 	addi	r5,sp,1040
10001738:	0004f080 	call	10004f08 <_fflush_r>
1000173c:	1007301e 	bne	r2,zero,10003400 <___vfprintf_internal_r+0x2098>
10001740:	d881070b 	ldhu	r2,1052(sp)
10001744:	1080100c 	andi	r2,r2,64
10001748:	10000326 	beq	r2,zero,10001758 <___vfprintf_internal_r+0x3f0>
1000174c:	b080030b 	ldhu	r2,12(r22)
10001750:	10801014 	ori	r2,r2,64
10001754:	b080030d 	sth	r2,12(r22)
10001758:	8005883a 	mov	r2,r16
1000175c:	00000106 	br	10001764 <___vfprintf_internal_r+0x3fc>
10001760:	00bfffc4 	movi	r2,-1
10001764:	dfc14917 	ldw	ra,1316(sp)
10001768:	df014817 	ldw	fp,1312(sp)
1000176c:	ddc14717 	ldw	r23,1308(sp)
10001770:	dd814617 	ldw	r22,1304(sp)
10001774:	dd414517 	ldw	r21,1300(sp)
10001778:	dd014417 	ldw	r20,1296(sp)
1000177c:	dcc14317 	ldw	r19,1292(sp)
10001780:	dc814217 	ldw	r18,1288(sp)
10001784:	dc414117 	ldw	r17,1284(sp)
10001788:	dc014017 	ldw	r16,1280(sp)
1000178c:	dec14a04 	addi	sp,sp,1320
10001790:	f800283a 	ret
10001794:	b809883a 	mov	r4,r23
10001798:	b00b883a 	mov	r5,r22
1000179c:	d9811e04 	addi	r6,sp,1144
100017a0:	00086700 	call	10008670 <__sprint_r>
100017a4:	1000081e 	bne	r2,zero,100017c8 <___vfprintf_internal_r+0x460>
100017a8:	da000404 	addi	r8,sp,16
100017ac:	003f4506 	br	100014c4 <__alt_data_end+0xf80014c4>
100017b0:	d8812017 	ldw	r2,1152(sp)
100017b4:	10000426 	beq	r2,zero,100017c8 <___vfprintf_internal_r+0x460>
100017b8:	b809883a 	mov	r4,r23
100017bc:	b00b883a 	mov	r5,r22
100017c0:	d9811e04 	addi	r6,sp,1144
100017c4:	00086700 	call	10008670 <__sprint_r>
100017c8:	b080030b 	ldhu	r2,12(r22)
100017cc:	1080100c 	andi	r2,r2,64
100017d0:	103fe31e 	bne	r2,zero,10001760 <__alt_data_end+0xf8001760>
100017d4:	d8812f17 	ldw	r2,1212(sp)
100017d8:	003fe206 	br	10001764 <__alt_data_end+0xf8001764>
100017dc:	b809883a 	mov	r4,r23
100017e0:	00054c40 	call	100054c4 <__sinit>
100017e4:	003ef806 	br	100013c8 <__alt_data_end+0xf80013c8>
100017e8:	e005883a 	mov	r2,fp
100017ec:	9cc00114 	ori	r19,r19,4
100017f0:	e4000007 	ldb	r16,0(fp)
100017f4:	003f4406 	br	10001508 <__alt_data_end+0xf8001508>
100017f8:	e4000007 	ldb	r16,0(fp)
100017fc:	01000a84 	movi	r4,42
10001800:	e0800044 	addi	r2,fp,1
10001804:	8106f626 	beq	r16,r4,100033e0 <___vfprintf_internal_r+0x2078>
10001808:	857ff404 	addi	r21,r16,-48
1000180c:	1039883a 	mov	fp,r2
10001810:	0013883a 	mov	r9,zero
10001814:	957f3d36 	bltu	r18,r21,1000150c <__alt_data_end+0xf800150c>
10001818:	0009883a 	mov	r4,zero
1000181c:	01400284 	movi	r5,10
10001820:	000103c0 	call	1000103c <__mulsi3>
10001824:	e4000007 	ldb	r16,0(fp)
10001828:	a889883a 	add	r4,r21,r2
1000182c:	e7000044 	addi	fp,fp,1
10001830:	857ff404 	addi	r21,r16,-48
10001834:	957ff92e 	bgeu	r18,r21,1000181c <__alt_data_end+0xf800181c>
10001838:	2013883a 	mov	r9,r4
1000183c:	203f330e 	bge	r4,zero,1000150c <__alt_data_end+0xf800150c>
10001840:	027fffc4 	movi	r9,-1
10001844:	003f3106 	br	1000150c <__alt_data_end+0xf800150c>
10001848:	9cc02014 	ori	r19,r19,128
1000184c:	e005883a 	mov	r2,fp
10001850:	e4000007 	ldb	r16,0(fp)
10001854:	003f2c06 	br	10001508 <__alt_data_end+0xf8001508>
10001858:	857ff404 	addi	r21,r16,-48
1000185c:	d8012e15 	stw	zero,1208(sp)
10001860:	e021883a 	mov	r16,fp
10001864:	0009883a 	mov	r4,zero
10001868:	da412c15 	stw	r9,1200(sp)
1000186c:	01400284 	movi	r5,10
10001870:	000103c0 	call	1000103c <__mulsi3>
10001874:	81400007 	ldb	r5,0(r16)
10001878:	1549883a 	add	r4,r2,r21
1000187c:	e7000044 	addi	fp,fp,1
10001880:	2d7ff404 	addi	r21,r5,-48
10001884:	e021883a 	mov	r16,fp
10001888:	957ff82e 	bgeu	r18,r21,1000186c <__alt_data_end+0xf800186c>
1000188c:	2821883a 	mov	r16,r5
10001890:	d9012e15 	stw	r4,1208(sp)
10001894:	da412c17 	ldw	r9,1200(sp)
10001898:	003f1c06 	br	1000150c <__alt_data_end+0xf800150c>
1000189c:	da012a17 	ldw	r8,1192(sp)
100018a0:	df012a15 	stw	fp,1192(sp)
100018a4:	9839883a 	mov	fp,r19
100018a8:	dcc12b03 	ldbu	r19,1196(sp)
100018ac:	e7000414 	ori	fp,fp,16
100018b0:	e080080c 	andi	r2,fp,32
100018b4:	dcc12785 	stb	r19,1182(sp)
100018b8:	d8c12d17 	ldw	r3,1204(sp)
100018bc:	1001ce26 	beq	r2,zero,10001ff8 <___vfprintf_internal_r+0xc90>
100018c0:	d9012d17 	ldw	r4,1204(sp)
100018c4:	18800117 	ldw	r2,4(r3)
100018c8:	1c800017 	ldw	r18,0(r3)
100018cc:	21000204 	addi	r4,r4,8
100018d0:	d9012d15 	stw	r4,1204(sp)
100018d4:	102b883a 	mov	r21,r2
100018d8:	10044916 	blt	r2,zero,10002a00 <___vfprintf_internal_r+0x1698>
100018dc:	dcc12783 	ldbu	r19,1182(sp)
100018e0:	da413215 	stw	r9,1224(sp)
100018e4:	00800044 	movi	r2,1
100018e8:	9546b03a 	or	r3,r18,r21
100018ec:	48000216 	blt	r9,zero,100018f8 <___vfprintf_internal_r+0x590>
100018f0:	013fdfc4 	movi	r4,-129
100018f4:	e138703a 	and	fp,fp,r4
100018f8:	1802251e 	bne	r3,zero,10002190 <___vfprintf_internal_r+0xe28>
100018fc:	48031726 	beq	r9,zero,1000255c <___vfprintf_internal_r+0x11f4>
10001900:	10803fcc 	andi	r2,r2,255
10001904:	00c00044 	movi	r3,1
10001908:	10c24526 	beq	r2,r3,10002220 <___vfprintf_internal_r+0xeb8>
1000190c:	00c00084 	movi	r3,2
10001910:	10c33426 	beq	r2,r3,100025e4 <___vfprintf_internal_r+0x127c>
10001914:	d8c10e04 	addi	r3,sp,1080
10001918:	9008d0fa 	srli	r4,r18,3
1000191c:	a80a977a 	slli	r5,r21,29
10001920:	a82ad0fa 	srli	r21,r21,3
10001924:	948001cc 	andi	r18,r18,7
10001928:	90800c04 	addi	r2,r18,48
1000192c:	18ffffc4 	addi	r3,r3,-1
10001930:	2924b03a 	or	r18,r5,r4
10001934:	18800005 	stb	r2,0(r3)
10001938:	9548b03a 	or	r4,r18,r21
1000193c:	203ff61e 	bne	r4,zero,10001918 <__alt_data_end+0xf8001918>
10001940:	e100004c 	andi	r4,fp,1
10001944:	d8c13115 	stw	r3,1220(sp)
10001948:	20039a1e 	bne	r4,zero,100027b4 <___vfprintf_internal_r+0x144c>
1000194c:	d8812817 	ldw	r2,1184(sp)
10001950:	10e3c83a 	sub	r17,r2,r3
10001954:	8805883a 	mov	r2,r17
10001958:	8a40010e 	bge	r17,r9,10001960 <___vfprintf_internal_r+0x5f8>
1000195c:	4805883a 	mov	r2,r9
10001960:	d8812b15 	stw	r2,1196(sp)
10001964:	d8013415 	stw	zero,1232(sp)
10001968:	98803fcc 	andi	r2,r19,255
1000196c:	1080201c 	xori	r2,r2,128
10001970:	10bfe004 	addi	r2,r2,-128
10001974:	10000326 	beq	r2,zero,10001984 <___vfprintf_internal_r+0x61c>
10001978:	d8c12b17 	ldw	r3,1196(sp)
1000197c:	18c00044 	addi	r3,r3,1
10001980:	d8c12b15 	stw	r3,1196(sp)
10001984:	e0c0008c 	andi	r3,fp,2
10001988:	d8c12c15 	stw	r3,1200(sp)
1000198c:	18000326 	beq	r3,zero,1000199c <___vfprintf_internal_r+0x634>
10001990:	d8c12b17 	ldw	r3,1196(sp)
10001994:	18c00084 	addi	r3,r3,2
10001998:	d8c12b15 	stw	r3,1196(sp)
1000199c:	e0c0210c 	andi	r3,fp,132
100019a0:	d8c13015 	stw	r3,1216(sp)
100019a4:	1801f81e 	bne	r3,zero,10002188 <___vfprintf_internal_r+0xe20>
100019a8:	d9012e17 	ldw	r4,1208(sp)
100019ac:	d8c12b17 	ldw	r3,1196(sp)
100019b0:	20ebc83a 	sub	r21,r4,r3
100019b4:	0541f40e 	bge	zero,r21,10002188 <___vfprintf_internal_r+0xe20>
100019b8:	02400404 	movi	r9,16
100019bc:	d8c12017 	ldw	r3,1152(sp)
100019c0:	d8811f17 	ldw	r2,1148(sp)
100019c4:	4d45750e 	bge	r9,r21,10002f9c <___vfprintf_internal_r+0x1c34>
100019c8:	01440074 	movhi	r5,4097
100019cc:	29407784 	addi	r5,r5,478
100019d0:	d9413615 	stw	r5,1240(sp)
100019d4:	4827883a 	mov	r19,r9
100019d8:	048001c4 	movi	r18,7
100019dc:	00000306 	br	100019ec <___vfprintf_internal_r+0x684>
100019e0:	ad7ffc04 	addi	r21,r21,-16
100019e4:	42000204 	addi	r8,r8,8
100019e8:	9d40130e 	bge	r19,r21,10001a38 <___vfprintf_internal_r+0x6d0>
100019ec:	01040074 	movhi	r4,4097
100019f0:	18c00404 	addi	r3,r3,16
100019f4:	10800044 	addi	r2,r2,1
100019f8:	21007784 	addi	r4,r4,478
100019fc:	41000015 	stw	r4,0(r8)
10001a00:	44c00115 	stw	r19,4(r8)
10001a04:	d8c12015 	stw	r3,1152(sp)
10001a08:	d8811f15 	stw	r2,1148(sp)
10001a0c:	90bff40e 	bge	r18,r2,100019e0 <__alt_data_end+0xf80019e0>
10001a10:	b809883a 	mov	r4,r23
10001a14:	b00b883a 	mov	r5,r22
10001a18:	d9811e04 	addi	r6,sp,1144
10001a1c:	00086700 	call	10008670 <__sprint_r>
10001a20:	103f691e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10001a24:	ad7ffc04 	addi	r21,r21,-16
10001a28:	d8c12017 	ldw	r3,1152(sp)
10001a2c:	d8811f17 	ldw	r2,1148(sp)
10001a30:	da000404 	addi	r8,sp,16
10001a34:	9d7fed16 	blt	r19,r21,100019ec <__alt_data_end+0xf80019ec>
10001a38:	d9413617 	ldw	r5,1240(sp)
10001a3c:	a8c7883a 	add	r3,r21,r3
10001a40:	10800044 	addi	r2,r2,1
10001a44:	41400015 	stw	r5,0(r8)
10001a48:	45400115 	stw	r21,4(r8)
10001a4c:	d8c12015 	stw	r3,1152(sp)
10001a50:	d8811f15 	stw	r2,1148(sp)
10001a54:	010001c4 	movi	r4,7
10001a58:	20832b16 	blt	r4,r2,10002708 <___vfprintf_internal_r+0x13a0>
10001a5c:	d8812787 	ldb	r2,1182(sp)
10001a60:	42000204 	addi	r8,r8,8
10001a64:	10000c26 	beq	r2,zero,10001a98 <___vfprintf_internal_r+0x730>
10001a68:	d8811f17 	ldw	r2,1148(sp)
10001a6c:	d9012784 	addi	r4,sp,1182
10001a70:	18c00044 	addi	r3,r3,1
10001a74:	10800044 	addi	r2,r2,1
10001a78:	41000015 	stw	r4,0(r8)
10001a7c:	01000044 	movi	r4,1
10001a80:	41000115 	stw	r4,4(r8)
10001a84:	d8c12015 	stw	r3,1152(sp)
10001a88:	d8811f15 	stw	r2,1148(sp)
10001a8c:	010001c4 	movi	r4,7
10001a90:	2082c416 	blt	r4,r2,100025a4 <___vfprintf_internal_r+0x123c>
10001a94:	42000204 	addi	r8,r8,8
10001a98:	d8812c17 	ldw	r2,1200(sp)
10001a9c:	10000c26 	beq	r2,zero,10001ad0 <___vfprintf_internal_r+0x768>
10001aa0:	d8811f17 	ldw	r2,1148(sp)
10001aa4:	d9012704 	addi	r4,sp,1180
10001aa8:	18c00084 	addi	r3,r3,2
10001aac:	10800044 	addi	r2,r2,1
10001ab0:	41000015 	stw	r4,0(r8)
10001ab4:	01000084 	movi	r4,2
10001ab8:	41000115 	stw	r4,4(r8)
10001abc:	d8c12015 	stw	r3,1152(sp)
10001ac0:	d8811f15 	stw	r2,1148(sp)
10001ac4:	010001c4 	movi	r4,7
10001ac8:	2082be16 	blt	r4,r2,100025c4 <___vfprintf_internal_r+0x125c>
10001acc:	42000204 	addi	r8,r8,8
10001ad0:	d9013017 	ldw	r4,1216(sp)
10001ad4:	00802004 	movi	r2,128
10001ad8:	20822026 	beq	r4,r2,1000235c <___vfprintf_internal_r+0xff4>
10001adc:	d9413217 	ldw	r5,1224(sp)
10001ae0:	2c67c83a 	sub	r19,r5,r17
10001ae4:	04c0260e 	bge	zero,r19,10001b80 <___vfprintf_internal_r+0x818>
10001ae8:	05400404 	movi	r21,16
10001aec:	d8811f17 	ldw	r2,1148(sp)
10001af0:	acc4720e 	bge	r21,r19,10002cbc <___vfprintf_internal_r+0x1954>
10001af4:	01440074 	movhi	r5,4097
10001af8:	29407384 	addi	r5,r5,462
10001afc:	d9412c15 	stw	r5,1200(sp)
10001b00:	048001c4 	movi	r18,7
10001b04:	00000306 	br	10001b14 <___vfprintf_internal_r+0x7ac>
10001b08:	9cfffc04 	addi	r19,r19,-16
10001b0c:	42000204 	addi	r8,r8,8
10001b10:	acc0110e 	bge	r21,r19,10001b58 <___vfprintf_internal_r+0x7f0>
10001b14:	18c00404 	addi	r3,r3,16
10001b18:	10800044 	addi	r2,r2,1
10001b1c:	45000015 	stw	r20,0(r8)
10001b20:	45400115 	stw	r21,4(r8)
10001b24:	d8c12015 	stw	r3,1152(sp)
10001b28:	d8811f15 	stw	r2,1148(sp)
10001b2c:	90bff60e 	bge	r18,r2,10001b08 <__alt_data_end+0xf8001b08>
10001b30:	b809883a 	mov	r4,r23
10001b34:	b00b883a 	mov	r5,r22
10001b38:	d9811e04 	addi	r6,sp,1144
10001b3c:	00086700 	call	10008670 <__sprint_r>
10001b40:	103f211e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10001b44:	9cfffc04 	addi	r19,r19,-16
10001b48:	d8c12017 	ldw	r3,1152(sp)
10001b4c:	d8811f17 	ldw	r2,1148(sp)
10001b50:	da000404 	addi	r8,sp,16
10001b54:	acffef16 	blt	r21,r19,10001b14 <__alt_data_end+0xf8001b14>
10001b58:	d9012c17 	ldw	r4,1200(sp)
10001b5c:	1cc7883a 	add	r3,r3,r19
10001b60:	10800044 	addi	r2,r2,1
10001b64:	41000015 	stw	r4,0(r8)
10001b68:	44c00115 	stw	r19,4(r8)
10001b6c:	d8c12015 	stw	r3,1152(sp)
10001b70:	d8811f15 	stw	r2,1148(sp)
10001b74:	010001c4 	movi	r4,7
10001b78:	20828216 	blt	r4,r2,10002584 <___vfprintf_internal_r+0x121c>
10001b7c:	42000204 	addi	r8,r8,8
10001b80:	e080400c 	andi	r2,fp,256
10001b84:	1001ac1e 	bne	r2,zero,10002238 <___vfprintf_internal_r+0xed0>
10001b88:	d8811f17 	ldw	r2,1148(sp)
10001b8c:	d9413117 	ldw	r5,1220(sp)
10001b90:	1c47883a 	add	r3,r3,r17
10001b94:	10800044 	addi	r2,r2,1
10001b98:	41400015 	stw	r5,0(r8)
10001b9c:	44400115 	stw	r17,4(r8)
10001ba0:	d8c12015 	stw	r3,1152(sp)
10001ba4:	d8811f15 	stw	r2,1148(sp)
10001ba8:	010001c4 	movi	r4,7
10001bac:	20825d16 	blt	r4,r2,10002524 <___vfprintf_internal_r+0x11bc>
10001bb0:	42000204 	addi	r8,r8,8
10001bb4:	e080010c 	andi	r2,fp,4
10001bb8:	10003126 	beq	r2,zero,10001c80 <___vfprintf_internal_r+0x918>
10001bbc:	d8812e17 	ldw	r2,1208(sp)
10001bc0:	d9012b17 	ldw	r4,1196(sp)
10001bc4:	1121c83a 	sub	r16,r2,r4
10001bc8:	04002d0e 	bge	zero,r16,10001c80 <___vfprintf_internal_r+0x918>
10001bcc:	04400404 	movi	r17,16
10001bd0:	d8811f17 	ldw	r2,1148(sp)
10001bd4:	8c05340e 	bge	r17,r16,100030a8 <___vfprintf_internal_r+0x1d40>
10001bd8:	01040074 	movhi	r4,4097
10001bdc:	21007784 	addi	r4,r4,478
10001be0:	d9013615 	stw	r4,1240(sp)
10001be4:	048001c4 	movi	r18,7
10001be8:	00000306 	br	10001bf8 <___vfprintf_internal_r+0x890>
10001bec:	843ffc04 	addi	r16,r16,-16
10001bf0:	42000204 	addi	r8,r8,8
10001bf4:	8c00130e 	bge	r17,r16,10001c44 <___vfprintf_internal_r+0x8dc>
10001bf8:	01440074 	movhi	r5,4097
10001bfc:	18c00404 	addi	r3,r3,16
10001c00:	10800044 	addi	r2,r2,1
10001c04:	29407784 	addi	r5,r5,478
10001c08:	41400015 	stw	r5,0(r8)
10001c0c:	44400115 	stw	r17,4(r8)
10001c10:	d8c12015 	stw	r3,1152(sp)
10001c14:	d8811f15 	stw	r2,1148(sp)
10001c18:	90bff40e 	bge	r18,r2,10001bec <__alt_data_end+0xf8001bec>
10001c1c:	b809883a 	mov	r4,r23
10001c20:	b00b883a 	mov	r5,r22
10001c24:	d9811e04 	addi	r6,sp,1144
10001c28:	00086700 	call	10008670 <__sprint_r>
10001c2c:	103ee61e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10001c30:	843ffc04 	addi	r16,r16,-16
10001c34:	d8c12017 	ldw	r3,1152(sp)
10001c38:	d8811f17 	ldw	r2,1148(sp)
10001c3c:	da000404 	addi	r8,sp,16
10001c40:	8c3fed16 	blt	r17,r16,10001bf8 <__alt_data_end+0xf8001bf8>
10001c44:	d9013617 	ldw	r4,1240(sp)
10001c48:	1c07883a 	add	r3,r3,r16
10001c4c:	10800044 	addi	r2,r2,1
10001c50:	41000015 	stw	r4,0(r8)
10001c54:	44000115 	stw	r16,4(r8)
10001c58:	d8c12015 	stw	r3,1152(sp)
10001c5c:	d8811f15 	stw	r2,1148(sp)
10001c60:	010001c4 	movi	r4,7
10001c64:	2080060e 	bge	r4,r2,10001c80 <___vfprintf_internal_r+0x918>
10001c68:	b809883a 	mov	r4,r23
10001c6c:	b00b883a 	mov	r5,r22
10001c70:	d9811e04 	addi	r6,sp,1144
10001c74:	00086700 	call	10008670 <__sprint_r>
10001c78:	103ed31e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10001c7c:	d8c12017 	ldw	r3,1152(sp)
10001c80:	df012b17 	ldw	fp,1196(sp)
10001c84:	d9412e17 	ldw	r5,1208(sp)
10001c88:	e140010e 	bge	fp,r5,10001c90 <___vfprintf_internal_r+0x928>
10001c8c:	2839883a 	mov	fp,r5
10001c90:	d8812f17 	ldw	r2,1212(sp)
10001c94:	1705883a 	add	r2,r2,fp
10001c98:	d8812f15 	stw	r2,1212(sp)
10001c9c:	1802291e 	bne	r3,zero,10002544 <___vfprintf_internal_r+0x11dc>
10001ca0:	d8c12a17 	ldw	r3,1192(sp)
10001ca4:	d8011f15 	stw	zero,1148(sp)
10001ca8:	da000404 	addi	r8,sp,16
10001cac:	18800007 	ldb	r2,0(r3)
10001cb0:	103ded1e 	bne	r2,zero,10001468 <__alt_data_end+0xf8001468>
10001cb4:	dc012a17 	ldw	r16,1192(sp)
10001cb8:	003e0506 	br	100014d0 <__alt_data_end+0xf80014d0>
10001cbc:	d9012d17 	ldw	r4,1204(sp)
10001cc0:	d9412d17 	ldw	r5,1204(sp)
10001cc4:	da012a17 	ldw	r8,1192(sp)
10001cc8:	21000017 	ldw	r4,0(r4)
10001ccc:	29400117 	ldw	r5,4(r5)
10001cd0:	df012a15 	stw	fp,1192(sp)
10001cd4:	9839883a 	mov	fp,r19
10001cd8:	dcc12b03 	ldbu	r19,1196(sp)
10001cdc:	d9013715 	stw	r4,1244(sp)
10001ce0:	d9413915 	stw	r5,1252(sp)
10001ce4:	da013f15 	stw	r8,1276(sp)
10001ce8:	da413e15 	stw	r9,1272(sp)
10001cec:	dcc12785 	stb	r19,1182(sp)
10001cf0:	00082cc0 	call	100082cc <__fpclassifyd>
10001cf4:	d8c12d17 	ldw	r3,1204(sp)
10001cf8:	04400044 	movi	r17,1
10001cfc:	da013f17 	ldw	r8,1276(sp)
10001d00:	1c800204 	addi	r18,r3,8
10001d04:	da413e17 	ldw	r9,1272(sp)
10001d08:	d9013717 	ldw	r4,1244(sp)
10001d0c:	d9413917 	ldw	r5,1252(sp)
10001d10:	1443451e 	bne	r2,r17,10002a28 <___vfprintf_internal_r+0x16c0>
10001d14:	000d883a 	mov	r6,zero
10001d18:	000f883a 	mov	r7,zero
10001d1c:	000c3f80 	call	1000c3f8 <__ledf2>
10001d20:	da013f17 	ldw	r8,1276(sp)
10001d24:	1004fe16 	blt	r2,zero,10003120 <___vfprintf_internal_r+0x1db8>
10001d28:	dcc12783 	ldbu	r19,1182(sp)
10001d2c:	008011c4 	movi	r2,71
10001d30:	14045d0e 	bge	r2,r16,10002ea8 <___vfprintf_internal_r+0x1b40>
10001d34:	01440074 	movhi	r5,4097
10001d38:	29406404 	addi	r5,r5,400
10001d3c:	d9413115 	stw	r5,1220(sp)
10001d40:	00c000c4 	movi	r3,3
10001d44:	00bfdfc4 	movi	r2,-129
10001d48:	d8c12b15 	stw	r3,1196(sp)
10001d4c:	e0b8703a 	and	fp,fp,r2
10001d50:	dc812d15 	stw	r18,1204(sp)
10001d54:	1823883a 	mov	r17,r3
10001d58:	d8013215 	stw	zero,1224(sp)
10001d5c:	d8013415 	stw	zero,1232(sp)
10001d60:	003f0106 	br	10001968 <__alt_data_end+0xf8001968>
10001d64:	9cc00214 	ori	r19,r19,8
10001d68:	e005883a 	mov	r2,fp
10001d6c:	e4000007 	ldb	r16,0(fp)
10001d70:	003de506 	br	10001508 <__alt_data_end+0xf8001508>
10001d74:	da012a17 	ldw	r8,1192(sp)
10001d78:	df012a15 	stw	fp,1192(sp)
10001d7c:	9f000414 	ori	fp,r19,16
10001d80:	e0c0080c 	andi	r3,fp,32
10001d84:	d8812d17 	ldw	r2,1204(sp)
10001d88:	18007626 	beq	r3,zero,10001f64 <___vfprintf_internal_r+0xbfc>
10001d8c:	d9412d17 	ldw	r5,1204(sp)
10001d90:	14800017 	ldw	r18,0(r2)
10001d94:	15400117 	ldw	r21,4(r2)
10001d98:	29400204 	addi	r5,r5,8
10001d9c:	d9412d15 	stw	r5,1204(sp)
10001da0:	0005883a 	mov	r2,zero
10001da4:	9546b03a 	or	r3,r18,r21
10001da8:	d8012785 	stb	zero,1182(sp)
10001dac:	da413215 	stw	r9,1224(sp)
10001db0:	0027883a 	mov	r19,zero
10001db4:	003ecd06 	br	100018ec <__alt_data_end+0xf80018ec>
10001db8:	da012a17 	ldw	r8,1192(sp)
10001dbc:	df012a15 	stw	fp,1192(sp)
10001dc0:	9f000414 	ori	fp,r19,16
10001dc4:	e0c0080c 	andi	r3,fp,32
10001dc8:	d8812d17 	ldw	r2,1204(sp)
10001dcc:	18002c26 	beq	r3,zero,10001e80 <___vfprintf_internal_r+0xb18>
10001dd0:	d9012d17 	ldw	r4,1204(sp)
10001dd4:	14800017 	ldw	r18,0(r2)
10001dd8:	15400117 	ldw	r21,4(r2)
10001ddc:	21000204 	addi	r4,r4,8
10001de0:	d9012d15 	stw	r4,1204(sp)
10001de4:	00800044 	movi	r2,1
10001de8:	9546b03a 	or	r3,r18,r21
10001dec:	003fee06 	br	10001da8 <__alt_data_end+0xf8001da8>
10001df0:	da012a17 	ldw	r8,1192(sp)
10001df4:	df012a15 	stw	fp,1192(sp)
10001df8:	9839883a 	mov	fp,r19
10001dfc:	dcc12b03 	ldbu	r19,1196(sp)
10001e00:	01440074 	movhi	r5,4097
10001e04:	29406704 	addi	r5,r5,412
10001e08:	dcc12785 	stb	r19,1182(sp)
10001e0c:	d9413b15 	stw	r5,1260(sp)
10001e10:	e0c0080c 	andi	r3,fp,32
10001e14:	d8812d17 	ldw	r2,1204(sp)
10001e18:	18002e26 	beq	r3,zero,10001ed4 <___vfprintf_internal_r+0xb6c>
10001e1c:	d9412d17 	ldw	r5,1204(sp)
10001e20:	14800017 	ldw	r18,0(r2)
10001e24:	15400117 	ldw	r21,4(r2)
10001e28:	29400204 	addi	r5,r5,8
10001e2c:	d9412d15 	stw	r5,1204(sp)
10001e30:	e080004c 	andi	r2,fp,1
10001e34:	10025c26 	beq	r2,zero,100027a8 <___vfprintf_internal_r+0x1440>
10001e38:	9546b03a 	or	r3,r18,r21
10001e3c:	18038f26 	beq	r3,zero,10002c7c <___vfprintf_internal_r+0x1914>
10001e40:	00800c04 	movi	r2,48
10001e44:	d8812705 	stb	r2,1180(sp)
10001e48:	dc012745 	stb	r16,1181(sp)
10001e4c:	e7000094 	ori	fp,fp,2
10001e50:	00800084 	movi	r2,2
10001e54:	003fd406 	br	10001da8 <__alt_data_end+0xf8001da8>
10001e58:	9cc00814 	ori	r19,r19,32
10001e5c:	e005883a 	mov	r2,fp
10001e60:	e4000007 	ldb	r16,0(fp)
10001e64:	003da806 	br	10001508 <__alt_data_end+0xf8001508>
10001e68:	da012a17 	ldw	r8,1192(sp)
10001e6c:	df012a15 	stw	fp,1192(sp)
10001e70:	9839883a 	mov	fp,r19
10001e74:	e0c0080c 	andi	r3,fp,32
10001e78:	d8812d17 	ldw	r2,1204(sp)
10001e7c:	183fd41e 	bne	r3,zero,10001dd0 <__alt_data_end+0xf8001dd0>
10001e80:	e0c0040c 	andi	r3,fp,16
10001e84:	18035f26 	beq	r3,zero,10002c04 <___vfprintf_internal_r+0x189c>
10001e88:	d9412d17 	ldw	r5,1204(sp)
10001e8c:	14800017 	ldw	r18,0(r2)
10001e90:	002b883a 	mov	r21,zero
10001e94:	29400104 	addi	r5,r5,4
10001e98:	d9412d15 	stw	r5,1204(sp)
10001e9c:	00800044 	movi	r2,1
10001ea0:	9007883a 	mov	r3,r18
10001ea4:	003fc006 	br	10001da8 <__alt_data_end+0xf8001da8>
10001ea8:	da012a17 	ldw	r8,1192(sp)
10001eac:	df012a15 	stw	fp,1192(sp)
10001eb0:	9839883a 	mov	fp,r19
10001eb4:	dcc12b03 	ldbu	r19,1196(sp)
10001eb8:	01040074 	movhi	r4,4097
10001ebc:	21006c04 	addi	r4,r4,432
10001ec0:	d9013b15 	stw	r4,1260(sp)
10001ec4:	dcc12785 	stb	r19,1182(sp)
10001ec8:	e0c0080c 	andi	r3,fp,32
10001ecc:	d8812d17 	ldw	r2,1204(sp)
10001ed0:	183fd21e 	bne	r3,zero,10001e1c <__alt_data_end+0xf8001e1c>
10001ed4:	e0c0040c 	andi	r3,fp,16
10001ed8:	18035426 	beq	r3,zero,10002c2c <___vfprintf_internal_r+0x18c4>
10001edc:	d8c12d17 	ldw	r3,1204(sp)
10001ee0:	14800017 	ldw	r18,0(r2)
10001ee4:	002b883a 	mov	r21,zero
10001ee8:	18c00104 	addi	r3,r3,4
10001eec:	d8c12d15 	stw	r3,1204(sp)
10001ef0:	003fcf06 	br	10001e30 <__alt_data_end+0xf8001e30>
10001ef4:	e4000007 	ldb	r16,0(fp)
10001ef8:	00801b04 	movi	r2,108
10001efc:	8083f726 	beq	r16,r2,10002edc <___vfprintf_internal_r+0x1b74>
10001f00:	9cc00414 	ori	r19,r19,16
10001f04:	e005883a 	mov	r2,fp
10001f08:	003d7f06 	br	10001508 <__alt_data_end+0xf8001508>
10001f0c:	da012a17 	ldw	r8,1192(sp)
10001f10:	df012a15 	stw	fp,1192(sp)
10001f14:	9839883a 	mov	fp,r19
10001f18:	dcc12b03 	ldbu	r19,1196(sp)
10001f1c:	e080080c 	andi	r2,fp,32
10001f20:	dcc12785 	stb	r19,1182(sp)
10001f24:	10032226 	beq	r2,zero,10002bb0 <___vfprintf_internal_r+0x1848>
10001f28:	d9412d17 	ldw	r5,1204(sp)
10001f2c:	d9012f17 	ldw	r4,1212(sp)
10001f30:	28800017 	ldw	r2,0(r5)
10001f34:	2007d7fa 	srai	r3,r4,31
10001f38:	29400104 	addi	r5,r5,4
10001f3c:	d9412d15 	stw	r5,1204(sp)
10001f40:	11000015 	stw	r4,0(r2)
10001f44:	10c00115 	stw	r3,4(r2)
10001f48:	003d4406 	br	1000145c <__alt_data_end+0xf800145c>
10001f4c:	da012a17 	ldw	r8,1192(sp)
10001f50:	df012a15 	stw	fp,1192(sp)
10001f54:	9839883a 	mov	fp,r19
10001f58:	e0c0080c 	andi	r3,fp,32
10001f5c:	d8812d17 	ldw	r2,1204(sp)
10001f60:	183f8a1e 	bne	r3,zero,10001d8c <__alt_data_end+0xf8001d8c>
10001f64:	e0c0040c 	andi	r3,fp,16
10001f68:	18031c26 	beq	r3,zero,10002bdc <___vfprintf_internal_r+0x1874>
10001f6c:	14800017 	ldw	r18,0(r2)
10001f70:	d8812d17 	ldw	r2,1204(sp)
10001f74:	002b883a 	mov	r21,zero
10001f78:	9007883a 	mov	r3,r18
10001f7c:	10800104 	addi	r2,r2,4
10001f80:	d8812d15 	stw	r2,1204(sp)
10001f84:	0005883a 	mov	r2,zero
10001f88:	003f8706 	br	10001da8 <__alt_data_end+0xf8001da8>
10001f8c:	d9412d17 	ldw	r5,1204(sp)
10001f90:	00800c04 	movi	r2,48
10001f94:	d8812705 	stb	r2,1180(sp)
10001f98:	2c800017 	ldw	r18,0(r5)
10001f9c:	00801e04 	movi	r2,120
10001fa0:	d8812745 	stb	r2,1181(sp)
10001fa4:	00840074 	movhi	r2,4097
10001fa8:	10806c04 	addi	r2,r2,432
10001fac:	29400104 	addi	r5,r5,4
10001fb0:	da012a17 	ldw	r8,1192(sp)
10001fb4:	d8813b15 	stw	r2,1260(sp)
10001fb8:	df012a15 	stw	fp,1192(sp)
10001fbc:	002b883a 	mov	r21,zero
10001fc0:	9f000094 	ori	fp,r19,2
10001fc4:	d9412d15 	stw	r5,1204(sp)
10001fc8:	00800084 	movi	r2,2
10001fcc:	04001e04 	movi	r16,120
10001fd0:	9007883a 	mov	r3,r18
10001fd4:	003f7406 	br	10001da8 <__alt_data_end+0xf8001da8>
10001fd8:	da012a17 	ldw	r8,1192(sp)
10001fdc:	df012a15 	stw	fp,1192(sp)
10001fe0:	9839883a 	mov	fp,r19
10001fe4:	dcc12b03 	ldbu	r19,1196(sp)
10001fe8:	e080080c 	andi	r2,fp,32
10001fec:	d8c12d17 	ldw	r3,1204(sp)
10001ff0:	dcc12785 	stb	r19,1182(sp)
10001ff4:	103e321e 	bne	r2,zero,100018c0 <__alt_data_end+0xf80018c0>
10001ff8:	e080040c 	andi	r2,fp,16
10001ffc:	10031326 	beq	r2,zero,10002c4c <___vfprintf_internal_r+0x18e4>
10002000:	1c800017 	ldw	r18,0(r3)
10002004:	d9412d17 	ldw	r5,1204(sp)
10002008:	902bd7fa 	srai	r21,r18,31
1000200c:	29400104 	addi	r5,r5,4
10002010:	d9412d15 	stw	r5,1204(sp)
10002014:	a805883a 	mov	r2,r21
10002018:	003e2f06 	br	100018d8 <__alt_data_end+0xf80018d8>
1000201c:	9cc01014 	ori	r19,r19,64
10002020:	e005883a 	mov	r2,fp
10002024:	e4000007 	ldb	r16,0(fp)
10002028:	003d3706 	br	10001508 <__alt_data_end+0xf8001508>
1000202c:	d8c12d17 	ldw	r3,1204(sp)
10002030:	d9012d17 	ldw	r4,1204(sp)
10002034:	da012a17 	ldw	r8,1192(sp)
10002038:	18800017 	ldw	r2,0(r3)
1000203c:	21000104 	addi	r4,r4,4
10002040:	00c00044 	movi	r3,1
10002044:	df012a15 	stw	fp,1192(sp)
10002048:	d8c12b15 	stw	r3,1196(sp)
1000204c:	9839883a 	mov	fp,r19
10002050:	d8012785 	stb	zero,1182(sp)
10002054:	d8810405 	stb	r2,1040(sp)
10002058:	d9012d15 	stw	r4,1204(sp)
1000205c:	1823883a 	mov	r17,r3
10002060:	d8c10404 	addi	r3,sp,1040
10002064:	d8013215 	stw	zero,1224(sp)
10002068:	d8013415 	stw	zero,1232(sp)
1000206c:	d8c13115 	stw	r3,1220(sp)
10002070:	0005883a 	mov	r2,zero
10002074:	003e4306 	br	10001984 <__alt_data_end+0xf8001984>
10002078:	d8812b07 	ldb	r2,1196(sp)
1000207c:	1002fc1e 	bne	r2,zero,10002c70 <___vfprintf_internal_r+0x1908>
10002080:	00c00804 	movi	r3,32
10002084:	d8c12b05 	stb	r3,1196(sp)
10002088:	e005883a 	mov	r2,fp
1000208c:	e4000007 	ldb	r16,0(fp)
10002090:	003d1d06 	br	10001508 <__alt_data_end+0xf8001508>
10002094:	9cc00054 	ori	r19,r19,1
10002098:	e005883a 	mov	r2,fp
1000209c:	e4000007 	ldb	r16,0(fp)
100020a0:	003d1906 	br	10001508 <__alt_data_end+0xf8001508>
100020a4:	d9012d17 	ldw	r4,1204(sp)
100020a8:	d9412d17 	ldw	r5,1204(sp)
100020ac:	21000017 	ldw	r4,0(r4)
100020b0:	28c00104 	addi	r3,r5,4
100020b4:	d9012e15 	stw	r4,1208(sp)
100020b8:	20038c16 	blt	r4,zero,10002eec <___vfprintf_internal_r+0x1b84>
100020bc:	d8c12d15 	stw	r3,1204(sp)
100020c0:	e005883a 	mov	r2,fp
100020c4:	e4000007 	ldb	r16,0(fp)
100020c8:	003d0f06 	br	10001508 <__alt_data_end+0xf8001508>
100020cc:	00c00ac4 	movi	r3,43
100020d0:	d8c12b05 	stb	r3,1196(sp)
100020d4:	e005883a 	mov	r2,fp
100020d8:	e4000007 	ldb	r16,0(fp)
100020dc:	003d0a06 	br	10001508 <__alt_data_end+0xf8001508>
100020e0:	d8c12d17 	ldw	r3,1204(sp)
100020e4:	d9012d17 	ldw	r4,1204(sp)
100020e8:	da012a17 	ldw	r8,1192(sp)
100020ec:	18c00017 	ldw	r3,0(r3)
100020f0:	df012a15 	stw	fp,1192(sp)
100020f4:	d8012785 	stb	zero,1182(sp)
100020f8:	d8c13115 	stw	r3,1220(sp)
100020fc:	9839883a 	mov	fp,r19
10002100:	24800104 	addi	r18,r4,4
10002104:	1803f726 	beq	r3,zero,100030e4 <___vfprintf_internal_r+0x1d7c>
10002108:	d9013117 	ldw	r4,1220(sp)
1000210c:	48038916 	blt	r9,zero,10002f34 <___vfprintf_internal_r+0x1bcc>
10002110:	480d883a 	mov	r6,r9
10002114:	000b883a 	mov	r5,zero
10002118:	da013f15 	stw	r8,1276(sp)
1000211c:	da413e15 	stw	r9,1272(sp)
10002120:	000697c0 	call	1000697c <memchr>
10002124:	da013f17 	ldw	r8,1276(sp)
10002128:	da413e17 	ldw	r9,1272(sp)
1000212c:	10045926 	beq	r2,zero,10003294 <___vfprintf_internal_r+0x1f2c>
10002130:	d8c13117 	ldw	r3,1220(sp)
10002134:	10e3c83a 	sub	r17,r2,r3
10002138:	4c433516 	blt	r9,r17,10002e10 <___vfprintf_internal_r+0x1aa8>
1000213c:	8805883a 	mov	r2,r17
10002140:	88038116 	blt	r17,zero,10002f48 <___vfprintf_internal_r+0x1be0>
10002144:	dcc12783 	ldbu	r19,1182(sp)
10002148:	d8812b15 	stw	r2,1196(sp)
1000214c:	dc812d15 	stw	r18,1204(sp)
10002150:	d8013215 	stw	zero,1224(sp)
10002154:	d8013415 	stw	zero,1232(sp)
10002158:	003e0306 	br	10001968 <__alt_data_end+0xf8001968>
1000215c:	da012a17 	ldw	r8,1192(sp)
10002160:	df012a15 	stw	fp,1192(sp)
10002164:	9839883a 	mov	fp,r19
10002168:	dcc12b03 	ldbu	r19,1196(sp)
1000216c:	dcc12785 	stb	r19,1182(sp)
10002170:	803d8f26 	beq	r16,zero,100017b0 <__alt_data_end+0xf80017b0>
10002174:	00c00044 	movi	r3,1
10002178:	d8c12b15 	stw	r3,1196(sp)
1000217c:	dc010405 	stb	r16,1040(sp)
10002180:	d8012785 	stb	zero,1182(sp)
10002184:	003fb506 	br	1000205c <__alt_data_end+0xf800205c>
10002188:	d8c12017 	ldw	r3,1152(sp)
1000218c:	003e3506 	br	10001a64 <__alt_data_end+0xf8001a64>
10002190:	10803fcc 	andi	r2,r2,255
10002194:	00c00044 	movi	r3,1
10002198:	10fddc1e 	bne	r2,r3,1000190c <__alt_data_end+0xf800190c>
1000219c:	a800021e 	bne	r21,zero,100021a8 <___vfprintf_internal_r+0xe40>
100021a0:	00800244 	movi	r2,9
100021a4:	14801e2e 	bgeu	r2,r18,10002220 <___vfprintf_internal_r+0xeb8>
100021a8:	dc012b15 	stw	r16,1196(sp)
100021ac:	dc410e04 	addi	r17,sp,1080
100021b0:	9021883a 	mov	r16,r18
100021b4:	da012c15 	stw	r8,1200(sp)
100021b8:	a825883a 	mov	r18,r21
100021bc:	482b883a 	mov	r21,r9
100021c0:	8009883a 	mov	r4,r16
100021c4:	900b883a 	mov	r5,r18
100021c8:	01800284 	movi	r6,10
100021cc:	000f883a 	mov	r7,zero
100021d0:	000aa5c0 	call	1000aa5c <__umoddi3>
100021d4:	10800c04 	addi	r2,r2,48
100021d8:	8c7fffc4 	addi	r17,r17,-1
100021dc:	8009883a 	mov	r4,r16
100021e0:	900b883a 	mov	r5,r18
100021e4:	01800284 	movi	r6,10
100021e8:	000f883a 	mov	r7,zero
100021ec:	88800005 	stb	r2,0(r17)
100021f0:	000a41c0 	call	1000a41c <__udivdi3>
100021f4:	1021883a 	mov	r16,r2
100021f8:	10c4b03a 	or	r2,r2,r3
100021fc:	1825883a 	mov	r18,r3
10002200:	103fef1e 	bne	r2,zero,100021c0 <__alt_data_end+0xf80021c0>
10002204:	d9012817 	ldw	r4,1184(sp)
10002208:	dc413115 	stw	r17,1220(sp)
1000220c:	dc012b17 	ldw	r16,1196(sp)
10002210:	da012c17 	ldw	r8,1200(sp)
10002214:	a813883a 	mov	r9,r21
10002218:	2463c83a 	sub	r17,r4,r17
1000221c:	003dcd06 	br	10001954 <__alt_data_end+0xf8001954>
10002220:	94800c04 	addi	r18,r18,48
10002224:	d8c10dc4 	addi	r3,sp,1079
10002228:	dc810dc5 	stb	r18,1079(sp)
1000222c:	dc413c17 	ldw	r17,1264(sp)
10002230:	d8c13115 	stw	r3,1220(sp)
10002234:	003dc706 	br	10001954 <__alt_data_end+0xf8001954>
10002238:	00801944 	movi	r2,101
1000223c:	1400720e 	bge	r2,r16,10002408 <___vfprintf_internal_r+0x10a0>
10002240:	d9013717 	ldw	r4,1244(sp)
10002244:	d9413917 	ldw	r5,1252(sp)
10002248:	000d883a 	mov	r6,zero
1000224c:	000f883a 	mov	r7,zero
10002250:	d8c13d15 	stw	r3,1268(sp)
10002254:	da013f15 	stw	r8,1276(sp)
10002258:	000c2940 	call	1000c294 <__eqdf2>
1000225c:	d8c13d17 	ldw	r3,1268(sp)
10002260:	da013f17 	ldw	r8,1276(sp)
10002264:	1000f41e 	bne	r2,zero,10002638 <___vfprintf_internal_r+0x12d0>
10002268:	d8811f17 	ldw	r2,1148(sp)
1000226c:	01040074 	movhi	r4,4097
10002270:	21007304 	addi	r4,r4,460
10002274:	18c00044 	addi	r3,r3,1
10002278:	10800044 	addi	r2,r2,1
1000227c:	41000015 	stw	r4,0(r8)
10002280:	01000044 	movi	r4,1
10002284:	41000115 	stw	r4,4(r8)
10002288:	d8c12015 	stw	r3,1152(sp)
1000228c:	d8811f15 	stw	r2,1148(sp)
10002290:	010001c4 	movi	r4,7
10002294:	20828d16 	blt	r4,r2,10002ccc <___vfprintf_internal_r+0x1964>
10002298:	42000204 	addi	r8,r8,8
1000229c:	d8812617 	ldw	r2,1176(sp)
100022a0:	d9413317 	ldw	r5,1228(sp)
100022a4:	11400216 	blt	r2,r5,100022b0 <___vfprintf_internal_r+0xf48>
100022a8:	e080004c 	andi	r2,fp,1
100022ac:	103e4126 	beq	r2,zero,10001bb4 <__alt_data_end+0xf8001bb4>
100022b0:	d8813817 	ldw	r2,1248(sp)
100022b4:	d9013517 	ldw	r4,1236(sp)
100022b8:	d9413817 	ldw	r5,1248(sp)
100022bc:	1887883a 	add	r3,r3,r2
100022c0:	d8811f17 	ldw	r2,1148(sp)
100022c4:	41000015 	stw	r4,0(r8)
100022c8:	41400115 	stw	r5,4(r8)
100022cc:	10800044 	addi	r2,r2,1
100022d0:	d8c12015 	stw	r3,1152(sp)
100022d4:	d8811f15 	stw	r2,1148(sp)
100022d8:	010001c4 	movi	r4,7
100022dc:	20830916 	blt	r4,r2,10002f04 <___vfprintf_internal_r+0x1b9c>
100022e0:	42000204 	addi	r8,r8,8
100022e4:	d8813317 	ldw	r2,1228(sp)
100022e8:	143fffc4 	addi	r16,r2,-1
100022ec:	043e310e 	bge	zero,r16,10001bb4 <__alt_data_end+0xf8001bb4>
100022f0:	04400404 	movi	r17,16
100022f4:	d8811f17 	ldw	r2,1148(sp)
100022f8:	8c007e0e 	bge	r17,r16,100024f4 <___vfprintf_internal_r+0x118c>
100022fc:	01440074 	movhi	r5,4097
10002300:	29407384 	addi	r5,r5,462
10002304:	d9412c15 	stw	r5,1200(sp)
10002308:	04c001c4 	movi	r19,7
1000230c:	00000306 	br	1000231c <___vfprintf_internal_r+0xfb4>
10002310:	42000204 	addi	r8,r8,8
10002314:	843ffc04 	addi	r16,r16,-16
10002318:	8c00790e 	bge	r17,r16,10002500 <___vfprintf_internal_r+0x1198>
1000231c:	18c00404 	addi	r3,r3,16
10002320:	10800044 	addi	r2,r2,1
10002324:	45000015 	stw	r20,0(r8)
10002328:	44400115 	stw	r17,4(r8)
1000232c:	d8c12015 	stw	r3,1152(sp)
10002330:	d8811f15 	stw	r2,1148(sp)
10002334:	98bff60e 	bge	r19,r2,10002310 <__alt_data_end+0xf8002310>
10002338:	b809883a 	mov	r4,r23
1000233c:	b00b883a 	mov	r5,r22
10002340:	d9811e04 	addi	r6,sp,1144
10002344:	00086700 	call	10008670 <__sprint_r>
10002348:	103d1f1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
1000234c:	d8c12017 	ldw	r3,1152(sp)
10002350:	d8811f17 	ldw	r2,1148(sp)
10002354:	da000404 	addi	r8,sp,16
10002358:	003fee06 	br	10002314 <__alt_data_end+0xf8002314>
1000235c:	d9412e17 	ldw	r5,1208(sp)
10002360:	d8812b17 	ldw	r2,1196(sp)
10002364:	28a7c83a 	sub	r19,r5,r2
10002368:	04fddc0e 	bge	zero,r19,10001adc <__alt_data_end+0xf8001adc>
1000236c:	05400404 	movi	r21,16
10002370:	d8811f17 	ldw	r2,1148(sp)
10002374:	acc3870e 	bge	r21,r19,10003194 <___vfprintf_internal_r+0x1e2c>
10002378:	01440074 	movhi	r5,4097
1000237c:	29407384 	addi	r5,r5,462
10002380:	d9412c15 	stw	r5,1200(sp)
10002384:	048001c4 	movi	r18,7
10002388:	00000306 	br	10002398 <___vfprintf_internal_r+0x1030>
1000238c:	9cfffc04 	addi	r19,r19,-16
10002390:	42000204 	addi	r8,r8,8
10002394:	acc0110e 	bge	r21,r19,100023dc <___vfprintf_internal_r+0x1074>
10002398:	18c00404 	addi	r3,r3,16
1000239c:	10800044 	addi	r2,r2,1
100023a0:	45000015 	stw	r20,0(r8)
100023a4:	45400115 	stw	r21,4(r8)
100023a8:	d8c12015 	stw	r3,1152(sp)
100023ac:	d8811f15 	stw	r2,1148(sp)
100023b0:	90bff60e 	bge	r18,r2,1000238c <__alt_data_end+0xf800238c>
100023b4:	b809883a 	mov	r4,r23
100023b8:	b00b883a 	mov	r5,r22
100023bc:	d9811e04 	addi	r6,sp,1144
100023c0:	00086700 	call	10008670 <__sprint_r>
100023c4:	103d001e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100023c8:	9cfffc04 	addi	r19,r19,-16
100023cc:	d8c12017 	ldw	r3,1152(sp)
100023d0:	d8811f17 	ldw	r2,1148(sp)
100023d4:	da000404 	addi	r8,sp,16
100023d8:	acffef16 	blt	r21,r19,10002398 <__alt_data_end+0xf8002398>
100023dc:	d9012c17 	ldw	r4,1200(sp)
100023e0:	1cc7883a 	add	r3,r3,r19
100023e4:	10800044 	addi	r2,r2,1
100023e8:	41000015 	stw	r4,0(r8)
100023ec:	44c00115 	stw	r19,4(r8)
100023f0:	d8c12015 	stw	r3,1152(sp)
100023f4:	d8811f15 	stw	r2,1148(sp)
100023f8:	010001c4 	movi	r4,7
100023fc:	20817816 	blt	r4,r2,100029e0 <___vfprintf_internal_r+0x1678>
10002400:	42000204 	addi	r8,r8,8
10002404:	003db506 	br	10001adc <__alt_data_end+0xf8001adc>
10002408:	d9413317 	ldw	r5,1228(sp)
1000240c:	00800044 	movi	r2,1
10002410:	18c00044 	addi	r3,r3,1
10002414:	11413e0e 	bge	r2,r5,10002910 <___vfprintf_internal_r+0x15a8>
10002418:	dc011f17 	ldw	r16,1148(sp)
1000241c:	d8813117 	ldw	r2,1220(sp)
10002420:	d8c12015 	stw	r3,1152(sp)
10002424:	84000044 	addi	r16,r16,1
10002428:	40800015 	stw	r2,0(r8)
1000242c:	00800044 	movi	r2,1
10002430:	40800115 	stw	r2,4(r8)
10002434:	dc011f15 	stw	r16,1148(sp)
10002438:	008001c4 	movi	r2,7
1000243c:	14015616 	blt	r2,r16,10002998 <___vfprintf_internal_r+0x1630>
10002440:	42000204 	addi	r8,r8,8
10002444:	d9013817 	ldw	r4,1248(sp)
10002448:	d9413517 	ldw	r5,1236(sp)
1000244c:	84000044 	addi	r16,r16,1
10002450:	1907883a 	add	r3,r3,r4
10002454:	41400015 	stw	r5,0(r8)
10002458:	41000115 	stw	r4,4(r8)
1000245c:	d8c12015 	stw	r3,1152(sp)
10002460:	dc011f15 	stw	r16,1148(sp)
10002464:	008001c4 	movi	r2,7
10002468:	14015416 	blt	r2,r16,100029bc <___vfprintf_internal_r+0x1654>
1000246c:	44400204 	addi	r17,r8,8
10002470:	d9013717 	ldw	r4,1244(sp)
10002474:	d9413917 	ldw	r5,1252(sp)
10002478:	000d883a 	mov	r6,zero
1000247c:	000f883a 	mov	r7,zero
10002480:	d8c13d15 	stw	r3,1268(sp)
10002484:	000c2940 	call	1000c294 <__eqdf2>
10002488:	d8c13d17 	ldw	r3,1268(sp)
1000248c:	1000a726 	beq	r2,zero,1000272c <___vfprintf_internal_r+0x13c4>
10002490:	d9013317 	ldw	r4,1228(sp)
10002494:	d9413117 	ldw	r5,1220(sp)
10002498:	84000044 	addi	r16,r16,1
1000249c:	20bfffc4 	addi	r2,r4,-1
100024a0:	1887883a 	add	r3,r3,r2
100024a4:	29000044 	addi	r4,r5,1
100024a8:	88800115 	stw	r2,4(r17)
100024ac:	89000015 	stw	r4,0(r17)
100024b0:	d8c12015 	stw	r3,1152(sp)
100024b4:	dc011f15 	stw	r16,1148(sp)
100024b8:	008001c4 	movi	r2,7
100024bc:	14012d16 	blt	r2,r16,10002974 <___vfprintf_internal_r+0x160c>
100024c0:	8c400204 	addi	r17,r17,8
100024c4:	d9413a17 	ldw	r5,1256(sp)
100024c8:	dcc122c4 	addi	r19,sp,1163
100024cc:	84000044 	addi	r16,r16,1
100024d0:	28c7883a 	add	r3,r5,r3
100024d4:	8cc00015 	stw	r19,0(r17)
100024d8:	89400115 	stw	r5,4(r17)
100024dc:	d8c12015 	stw	r3,1152(sp)
100024e0:	dc011f15 	stw	r16,1148(sp)
100024e4:	008001c4 	movi	r2,7
100024e8:	14000e16 	blt	r2,r16,10002524 <___vfprintf_internal_r+0x11bc>
100024ec:	8a000204 	addi	r8,r17,8
100024f0:	003db006 	br	10001bb4 <__alt_data_end+0xf8001bb4>
100024f4:	01040074 	movhi	r4,4097
100024f8:	21007384 	addi	r4,r4,462
100024fc:	d9012c15 	stw	r4,1200(sp)
10002500:	d9012c17 	ldw	r4,1200(sp)
10002504:	1c07883a 	add	r3,r3,r16
10002508:	44000115 	stw	r16,4(r8)
1000250c:	41000015 	stw	r4,0(r8)
10002510:	10800044 	addi	r2,r2,1
10002514:	d8c12015 	stw	r3,1152(sp)
10002518:	d8811f15 	stw	r2,1148(sp)
1000251c:	010001c4 	movi	r4,7
10002520:	20bda30e 	bge	r4,r2,10001bb0 <__alt_data_end+0xf8001bb0>
10002524:	b809883a 	mov	r4,r23
10002528:	b00b883a 	mov	r5,r22
1000252c:	d9811e04 	addi	r6,sp,1144
10002530:	00086700 	call	10008670 <__sprint_r>
10002534:	103ca41e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002538:	d8c12017 	ldw	r3,1152(sp)
1000253c:	da000404 	addi	r8,sp,16
10002540:	003d9c06 	br	10001bb4 <__alt_data_end+0xf8001bb4>
10002544:	b809883a 	mov	r4,r23
10002548:	b00b883a 	mov	r5,r22
1000254c:	d9811e04 	addi	r6,sp,1144
10002550:	00086700 	call	10008670 <__sprint_r>
10002554:	103dd226 	beq	r2,zero,10001ca0 <__alt_data_end+0xf8001ca0>
10002558:	003c9b06 	br	100017c8 <__alt_data_end+0xf80017c8>
1000255c:	10803fcc 	andi	r2,r2,255
10002560:	1000311e 	bne	r2,zero,10002628 <___vfprintf_internal_r+0x12c0>
10002564:	e080004c 	andi	r2,fp,1
10002568:	10002f26 	beq	r2,zero,10002628 <___vfprintf_internal_r+0x12c0>
1000256c:	00800c04 	movi	r2,48
10002570:	d8c10dc4 	addi	r3,sp,1079
10002574:	d8810dc5 	stb	r2,1079(sp)
10002578:	dc413c17 	ldw	r17,1264(sp)
1000257c:	d8c13115 	stw	r3,1220(sp)
10002580:	003cf406 	br	10001954 <__alt_data_end+0xf8001954>
10002584:	b809883a 	mov	r4,r23
10002588:	b00b883a 	mov	r5,r22
1000258c:	d9811e04 	addi	r6,sp,1144
10002590:	00086700 	call	10008670 <__sprint_r>
10002594:	103c8c1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002598:	d8c12017 	ldw	r3,1152(sp)
1000259c:	da000404 	addi	r8,sp,16
100025a0:	003d7706 	br	10001b80 <__alt_data_end+0xf8001b80>
100025a4:	b809883a 	mov	r4,r23
100025a8:	b00b883a 	mov	r5,r22
100025ac:	d9811e04 	addi	r6,sp,1144
100025b0:	00086700 	call	10008670 <__sprint_r>
100025b4:	103c841e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100025b8:	d8c12017 	ldw	r3,1152(sp)
100025bc:	da000404 	addi	r8,sp,16
100025c0:	003d3506 	br	10001a98 <__alt_data_end+0xf8001a98>
100025c4:	b809883a 	mov	r4,r23
100025c8:	b00b883a 	mov	r5,r22
100025cc:	d9811e04 	addi	r6,sp,1144
100025d0:	00086700 	call	10008670 <__sprint_r>
100025d4:	103c7c1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100025d8:	d8c12017 	ldw	r3,1152(sp)
100025dc:	da000404 	addi	r8,sp,16
100025e0:	003d3b06 	br	10001ad0 <__alt_data_end+0xf8001ad0>
100025e4:	d9413b17 	ldw	r5,1260(sp)
100025e8:	d8c10e04 	addi	r3,sp,1080
100025ec:	908003cc 	andi	r2,r18,15
100025f0:	a808973a 	slli	r4,r21,28
100025f4:	2885883a 	add	r2,r5,r2
100025f8:	9024d13a 	srli	r18,r18,4
100025fc:	10800003 	ldbu	r2,0(r2)
10002600:	a82ad13a 	srli	r21,r21,4
10002604:	18ffffc4 	addi	r3,r3,-1
10002608:	24a4b03a 	or	r18,r4,r18
1000260c:	18800005 	stb	r2,0(r3)
10002610:	9544b03a 	or	r2,r18,r21
10002614:	103ff51e 	bne	r2,zero,100025ec <__alt_data_end+0xf80025ec>
10002618:	d9412817 	ldw	r5,1184(sp)
1000261c:	d8c13115 	stw	r3,1220(sp)
10002620:	28e3c83a 	sub	r17,r5,r3
10002624:	003ccb06 	br	10001954 <__alt_data_end+0xf8001954>
10002628:	d8c10e04 	addi	r3,sp,1080
1000262c:	0023883a 	mov	r17,zero
10002630:	d8c13115 	stw	r3,1220(sp)
10002634:	003cc706 	br	10001954 <__alt_data_end+0xf8001954>
10002638:	dc012617 	ldw	r16,1176(sp)
1000263c:	0401ab0e 	bge	zero,r16,10002cec <___vfprintf_internal_r+0x1984>
10002640:	d8813317 	ldw	r2,1228(sp)
10002644:	d9413117 	ldw	r5,1220(sp)
10002648:	d9013417 	ldw	r4,1232(sp)
1000264c:	1023883a 	mov	r17,r2
10002650:	28a1883a 	add	r16,r5,r2
10002654:	2080010e 	bge	r4,r2,1000265c <___vfprintf_internal_r+0x12f4>
10002658:	2023883a 	mov	r17,r4
1000265c:	04400b0e 	bge	zero,r17,1000268c <___vfprintf_internal_r+0x1324>
10002660:	d8811f17 	ldw	r2,1148(sp)
10002664:	d9413117 	ldw	r5,1220(sp)
10002668:	1c47883a 	add	r3,r3,r17
1000266c:	10800044 	addi	r2,r2,1
10002670:	41400015 	stw	r5,0(r8)
10002674:	44400115 	stw	r17,4(r8)
10002678:	d8c12015 	stw	r3,1152(sp)
1000267c:	d8811f15 	stw	r2,1148(sp)
10002680:	010001c4 	movi	r4,7
10002684:	20826716 	blt	r4,r2,10003024 <___vfprintf_internal_r+0x1cbc>
10002688:	42000204 	addi	r8,r8,8
1000268c:	88026316 	blt	r17,zero,1000301c <___vfprintf_internal_r+0x1cb4>
10002690:	d8813417 	ldw	r2,1232(sp)
10002694:	1463c83a 	sub	r17,r2,r17
10002698:	0440590e 	bge	zero,r17,10002800 <___vfprintf_internal_r+0x1498>
1000269c:	04c00404 	movi	r19,16
100026a0:	d8811f17 	ldw	r2,1148(sp)
100026a4:	9c41770e 	bge	r19,r17,10002c84 <___vfprintf_internal_r+0x191c>
100026a8:	01440074 	movhi	r5,4097
100026ac:	29407384 	addi	r5,r5,462
100026b0:	d9412c15 	stw	r5,1200(sp)
100026b4:	054001c4 	movi	r21,7
100026b8:	00000306 	br	100026c8 <___vfprintf_internal_r+0x1360>
100026bc:	42000204 	addi	r8,r8,8
100026c0:	8c7ffc04 	addi	r17,r17,-16
100026c4:	9c41720e 	bge	r19,r17,10002c90 <___vfprintf_internal_r+0x1928>
100026c8:	18c00404 	addi	r3,r3,16
100026cc:	10800044 	addi	r2,r2,1
100026d0:	45000015 	stw	r20,0(r8)
100026d4:	44c00115 	stw	r19,4(r8)
100026d8:	d8c12015 	stw	r3,1152(sp)
100026dc:	d8811f15 	stw	r2,1148(sp)
100026e0:	a8bff60e 	bge	r21,r2,100026bc <__alt_data_end+0xf80026bc>
100026e4:	b809883a 	mov	r4,r23
100026e8:	b00b883a 	mov	r5,r22
100026ec:	d9811e04 	addi	r6,sp,1144
100026f0:	00086700 	call	10008670 <__sprint_r>
100026f4:	103c341e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100026f8:	d8c12017 	ldw	r3,1152(sp)
100026fc:	d8811f17 	ldw	r2,1148(sp)
10002700:	da000404 	addi	r8,sp,16
10002704:	003fee06 	br	100026c0 <__alt_data_end+0xf80026c0>
10002708:	b809883a 	mov	r4,r23
1000270c:	b00b883a 	mov	r5,r22
10002710:	d9811e04 	addi	r6,sp,1144
10002714:	00086700 	call	10008670 <__sprint_r>
10002718:	103c2b1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
1000271c:	d8c12017 	ldw	r3,1152(sp)
10002720:	d8812787 	ldb	r2,1182(sp)
10002724:	da000404 	addi	r8,sp,16
10002728:	003cce06 	br	10001a64 <__alt_data_end+0xf8001a64>
1000272c:	d8813317 	ldw	r2,1228(sp)
10002730:	14ffffc4 	addi	r19,r2,-1
10002734:	04ff630e 	bge	zero,r19,100024c4 <__alt_data_end+0xf80024c4>
10002738:	05400404 	movi	r21,16
1000273c:	acc0810e 	bge	r21,r19,10002944 <___vfprintf_internal_r+0x15dc>
10002740:	01440074 	movhi	r5,4097
10002744:	29407384 	addi	r5,r5,462
10002748:	d9412c15 	stw	r5,1200(sp)
1000274c:	01c001c4 	movi	r7,7
10002750:	00000306 	br	10002760 <___vfprintf_internal_r+0x13f8>
10002754:	8c400204 	addi	r17,r17,8
10002758:	9cfffc04 	addi	r19,r19,-16
1000275c:	acc07c0e 	bge	r21,r19,10002950 <___vfprintf_internal_r+0x15e8>
10002760:	18c00404 	addi	r3,r3,16
10002764:	84000044 	addi	r16,r16,1
10002768:	8d000015 	stw	r20,0(r17)
1000276c:	8d400115 	stw	r21,4(r17)
10002770:	d8c12015 	stw	r3,1152(sp)
10002774:	dc011f15 	stw	r16,1148(sp)
10002778:	3c3ff60e 	bge	r7,r16,10002754 <__alt_data_end+0xf8002754>
1000277c:	b809883a 	mov	r4,r23
10002780:	b00b883a 	mov	r5,r22
10002784:	d9811e04 	addi	r6,sp,1144
10002788:	d9c13d15 	stw	r7,1268(sp)
1000278c:	00086700 	call	10008670 <__sprint_r>
10002790:	d9c13d17 	ldw	r7,1268(sp)
10002794:	103c0c1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002798:	d8c12017 	ldw	r3,1152(sp)
1000279c:	dc011f17 	ldw	r16,1148(sp)
100027a0:	dc400404 	addi	r17,sp,16
100027a4:	003fec06 	br	10002758 <__alt_data_end+0xf8002758>
100027a8:	00800084 	movi	r2,2
100027ac:	9546b03a 	or	r3,r18,r21
100027b0:	003d7d06 	br	10001da8 <__alt_data_end+0xf8001da8>
100027b4:	10803fcc 	andi	r2,r2,255
100027b8:	1080201c 	xori	r2,r2,128
100027bc:	10bfe004 	addi	r2,r2,-128
100027c0:	01000c04 	movi	r4,48
100027c4:	1101d726 	beq	r2,r4,10002f24 <___vfprintf_internal_r+0x1bbc>
100027c8:	d9413117 	ldw	r5,1220(sp)
100027cc:	d8812817 	ldw	r2,1184(sp)
100027d0:	193fffc5 	stb	r4,-1(r3)
100027d4:	297fffc4 	addi	r5,r5,-1
100027d8:	d9413115 	stw	r5,1220(sp)
100027dc:	1163c83a 	sub	r17,r2,r5
100027e0:	003c5c06 	br	10001954 <__alt_data_end+0xf8001954>
100027e4:	b809883a 	mov	r4,r23
100027e8:	b00b883a 	mov	r5,r22
100027ec:	d9811e04 	addi	r6,sp,1144
100027f0:	00086700 	call	10008670 <__sprint_r>
100027f4:	103bf41e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100027f8:	d8c12017 	ldw	r3,1152(sp)
100027fc:	da000404 	addi	r8,sp,16
10002800:	d9413117 	ldw	r5,1220(sp)
10002804:	d9013417 	ldw	r4,1232(sp)
10002808:	d8812617 	ldw	r2,1176(sp)
1000280c:	2923883a 	add	r17,r5,r4
10002810:	d9413317 	ldw	r5,1228(sp)
10002814:	11400216 	blt	r2,r5,10002820 <___vfprintf_internal_r+0x14b8>
10002818:	e100004c 	andi	r4,fp,1
1000281c:	20000d26 	beq	r4,zero,10002854 <___vfprintf_internal_r+0x14ec>
10002820:	d9013817 	ldw	r4,1248(sp)
10002824:	d9413517 	ldw	r5,1236(sp)
10002828:	1907883a 	add	r3,r3,r4
1000282c:	d9011f17 	ldw	r4,1148(sp)
10002830:	41400015 	stw	r5,0(r8)
10002834:	d9413817 	ldw	r5,1248(sp)
10002838:	21000044 	addi	r4,r4,1
1000283c:	d8c12015 	stw	r3,1152(sp)
10002840:	41400115 	stw	r5,4(r8)
10002844:	d9011f15 	stw	r4,1148(sp)
10002848:	014001c4 	movi	r5,7
1000284c:	2901fd16 	blt	r5,r4,10003044 <___vfprintf_internal_r+0x1cdc>
10002850:	42000204 	addi	r8,r8,8
10002854:	d9013317 	ldw	r4,1228(sp)
10002858:	2085c83a 	sub	r2,r4,r2
1000285c:	8449c83a 	sub	r4,r16,r17
10002860:	1021883a 	mov	r16,r2
10002864:	2080010e 	bge	r4,r2,1000286c <___vfprintf_internal_r+0x1504>
10002868:	2021883a 	mov	r16,r4
1000286c:	04000a0e 	bge	zero,r16,10002898 <___vfprintf_internal_r+0x1530>
10002870:	d9011f17 	ldw	r4,1148(sp)
10002874:	1c07883a 	add	r3,r3,r16
10002878:	44400015 	stw	r17,0(r8)
1000287c:	21000044 	addi	r4,r4,1
10002880:	44000115 	stw	r16,4(r8)
10002884:	d8c12015 	stw	r3,1152(sp)
10002888:	d9011f15 	stw	r4,1148(sp)
1000288c:	014001c4 	movi	r5,7
10002890:	29020916 	blt	r5,r4,100030b8 <___vfprintf_internal_r+0x1d50>
10002894:	42000204 	addi	r8,r8,8
10002898:	80020116 	blt	r16,zero,100030a0 <___vfprintf_internal_r+0x1d38>
1000289c:	1421c83a 	sub	r16,r2,r16
100028a0:	043cc40e 	bge	zero,r16,10001bb4 <__alt_data_end+0xf8001bb4>
100028a4:	04400404 	movi	r17,16
100028a8:	d8811f17 	ldw	r2,1148(sp)
100028ac:	8c3f110e 	bge	r17,r16,100024f4 <__alt_data_end+0xf80024f4>
100028b0:	01440074 	movhi	r5,4097
100028b4:	29407384 	addi	r5,r5,462
100028b8:	d9412c15 	stw	r5,1200(sp)
100028bc:	04c001c4 	movi	r19,7
100028c0:	00000306 	br	100028d0 <___vfprintf_internal_r+0x1568>
100028c4:	42000204 	addi	r8,r8,8
100028c8:	843ffc04 	addi	r16,r16,-16
100028cc:	8c3f0c0e 	bge	r17,r16,10002500 <__alt_data_end+0xf8002500>
100028d0:	18c00404 	addi	r3,r3,16
100028d4:	10800044 	addi	r2,r2,1
100028d8:	45000015 	stw	r20,0(r8)
100028dc:	44400115 	stw	r17,4(r8)
100028e0:	d8c12015 	stw	r3,1152(sp)
100028e4:	d8811f15 	stw	r2,1148(sp)
100028e8:	98bff60e 	bge	r19,r2,100028c4 <__alt_data_end+0xf80028c4>
100028ec:	b809883a 	mov	r4,r23
100028f0:	b00b883a 	mov	r5,r22
100028f4:	d9811e04 	addi	r6,sp,1144
100028f8:	00086700 	call	10008670 <__sprint_r>
100028fc:	103bb21e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002900:	d8c12017 	ldw	r3,1152(sp)
10002904:	d8811f17 	ldw	r2,1148(sp)
10002908:	da000404 	addi	r8,sp,16
1000290c:	003fee06 	br	100028c8 <__alt_data_end+0xf80028c8>
10002910:	e088703a 	and	r4,fp,r2
10002914:	203ec01e 	bne	r4,zero,10002418 <__alt_data_end+0xf8002418>
10002918:	dc011f17 	ldw	r16,1148(sp)
1000291c:	d9013117 	ldw	r4,1220(sp)
10002920:	40800115 	stw	r2,4(r8)
10002924:	84000044 	addi	r16,r16,1
10002928:	41000015 	stw	r4,0(r8)
1000292c:	d8c12015 	stw	r3,1152(sp)
10002930:	dc011f15 	stw	r16,1148(sp)
10002934:	008001c4 	movi	r2,7
10002938:	14000e16 	blt	r2,r16,10002974 <___vfprintf_internal_r+0x160c>
1000293c:	44400204 	addi	r17,r8,8
10002940:	003ee006 	br	100024c4 <__alt_data_end+0xf80024c4>
10002944:	01040074 	movhi	r4,4097
10002948:	21007384 	addi	r4,r4,462
1000294c:	d9012c15 	stw	r4,1200(sp)
10002950:	d8812c17 	ldw	r2,1200(sp)
10002954:	1cc7883a 	add	r3,r3,r19
10002958:	84000044 	addi	r16,r16,1
1000295c:	88800015 	stw	r2,0(r17)
10002960:	8cc00115 	stw	r19,4(r17)
10002964:	d8c12015 	stw	r3,1152(sp)
10002968:	dc011f15 	stw	r16,1148(sp)
1000296c:	008001c4 	movi	r2,7
10002970:	143ed30e 	bge	r2,r16,100024c0 <__alt_data_end+0xf80024c0>
10002974:	b809883a 	mov	r4,r23
10002978:	b00b883a 	mov	r5,r22
1000297c:	d9811e04 	addi	r6,sp,1144
10002980:	00086700 	call	10008670 <__sprint_r>
10002984:	103b901e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002988:	d8c12017 	ldw	r3,1152(sp)
1000298c:	dc011f17 	ldw	r16,1148(sp)
10002990:	dc400404 	addi	r17,sp,16
10002994:	003ecb06 	br	100024c4 <__alt_data_end+0xf80024c4>
10002998:	b809883a 	mov	r4,r23
1000299c:	b00b883a 	mov	r5,r22
100029a0:	d9811e04 	addi	r6,sp,1144
100029a4:	00086700 	call	10008670 <__sprint_r>
100029a8:	103b871e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100029ac:	d8c12017 	ldw	r3,1152(sp)
100029b0:	dc011f17 	ldw	r16,1148(sp)
100029b4:	da000404 	addi	r8,sp,16
100029b8:	003ea206 	br	10002444 <__alt_data_end+0xf8002444>
100029bc:	b809883a 	mov	r4,r23
100029c0:	b00b883a 	mov	r5,r22
100029c4:	d9811e04 	addi	r6,sp,1144
100029c8:	00086700 	call	10008670 <__sprint_r>
100029cc:	103b7e1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100029d0:	d8c12017 	ldw	r3,1152(sp)
100029d4:	dc011f17 	ldw	r16,1148(sp)
100029d8:	dc400404 	addi	r17,sp,16
100029dc:	003ea406 	br	10002470 <__alt_data_end+0xf8002470>
100029e0:	b809883a 	mov	r4,r23
100029e4:	b00b883a 	mov	r5,r22
100029e8:	d9811e04 	addi	r6,sp,1144
100029ec:	00086700 	call	10008670 <__sprint_r>
100029f0:	103b751e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100029f4:	d8c12017 	ldw	r3,1152(sp)
100029f8:	da000404 	addi	r8,sp,16
100029fc:	003c3706 	br	10001adc <__alt_data_end+0xf8001adc>
10002a00:	04a5c83a 	sub	r18,zero,r18
10002a04:	9004c03a 	cmpne	r2,r18,zero
10002a08:	056bc83a 	sub	r21,zero,r21
10002a0c:	a8abc83a 	sub	r21,r21,r2
10002a10:	04c00b44 	movi	r19,45
10002a14:	dcc12785 	stb	r19,1182(sp)
10002a18:	da413215 	stw	r9,1224(sp)
10002a1c:	00800044 	movi	r2,1
10002a20:	9546b03a 	or	r3,r18,r21
10002a24:	003bb106 	br	100018ec <__alt_data_end+0xf80018ec>
10002a28:	da013f15 	stw	r8,1276(sp)
10002a2c:	da413e15 	stw	r9,1272(sp)
10002a30:	00082cc0 	call	100082cc <__fpclassifyd>
10002a34:	da013f17 	ldw	r8,1276(sp)
10002a38:	da413e17 	ldw	r9,1272(sp)
10002a3c:	1000e526 	beq	r2,zero,10002dd4 <___vfprintf_internal_r+0x1a6c>
10002a40:	04fff7c4 	movi	r19,-33
10002a44:	00bfffc4 	movi	r2,-1
10002a48:	84e6703a 	and	r19,r16,r19
10002a4c:	48822926 	beq	r9,r2,100032f4 <___vfprintf_internal_r+0x1f8c>
10002a50:	008011c4 	movi	r2,71
10002a54:	98821626 	beq	r19,r2,100032b0 <___vfprintf_internal_r+0x1f48>
10002a58:	d9013917 	ldw	r4,1252(sp)
10002a5c:	e0c04014 	ori	r3,fp,256
10002a60:	d8c12d15 	stw	r3,1204(sp)
10002a64:	20021f16 	blt	r4,zero,100032e4 <___vfprintf_internal_r+0x1f7c>
10002a68:	dc413917 	ldw	r17,1252(sp)
10002a6c:	d8012b05 	stb	zero,1196(sp)
10002a70:	00801984 	movi	r2,102
10002a74:	80814d26 	beq	r16,r2,10002fac <___vfprintf_internal_r+0x1c44>
10002a78:	00801184 	movi	r2,70
10002a7c:	80814b26 	beq	r16,r2,10002fac <___vfprintf_internal_r+0x1c44>
10002a80:	00801144 	movi	r2,69
10002a84:	98821d26 	beq	r19,r2,100032fc <___vfprintf_internal_r+0x1f94>
10002a88:	482b883a 	mov	r21,r9
10002a8c:	d8812604 	addi	r2,sp,1176
10002a90:	d8800115 	stw	r2,4(sp)
10002a94:	d9413717 	ldw	r5,1244(sp)
10002a98:	d8812504 	addi	r2,sp,1172
10002a9c:	d8800215 	stw	r2,8(sp)
10002aa0:	d8812104 	addi	r2,sp,1156
10002aa4:	dd400015 	stw	r21,0(sp)
10002aa8:	d8800315 	stw	r2,12(sp)
10002aac:	b809883a 	mov	r4,r23
10002ab0:	880d883a 	mov	r6,r17
10002ab4:	01c00084 	movi	r7,2
10002ab8:	da013f15 	stw	r8,1276(sp)
10002abc:	da413e15 	stw	r9,1272(sp)
10002ac0:	00037e00 	call	100037e0 <_dtoa_r>
10002ac4:	d8813115 	stw	r2,1220(sp)
10002ac8:	008019c4 	movi	r2,103
10002acc:	da013f17 	ldw	r8,1276(sp)
10002ad0:	da413e17 	ldw	r9,1272(sp)
10002ad4:	80800226 	beq	r16,r2,10002ae0 <___vfprintf_internal_r+0x1778>
10002ad8:	008011c4 	movi	r2,71
10002adc:	8081451e 	bne	r16,r2,10002ff4 <___vfprintf_internal_r+0x1c8c>
10002ae0:	e080004c 	andi	r2,fp,1
10002ae4:	10021e26 	beq	r2,zero,10003360 <___vfprintf_internal_r+0x1ff8>
10002ae8:	d8c13117 	ldw	r3,1220(sp)
10002aec:	1d55883a 	add	r10,r3,r21
10002af0:	d9013717 	ldw	r4,1244(sp)
10002af4:	880b883a 	mov	r5,r17
10002af8:	000d883a 	mov	r6,zero
10002afc:	000f883a 	mov	r7,zero
10002b00:	da013f15 	stw	r8,1276(sp)
10002b04:	da413e15 	stw	r9,1272(sp)
10002b08:	da813d15 	stw	r10,1268(sp)
10002b0c:	000c2940 	call	1000c294 <__eqdf2>
10002b10:	da013f17 	ldw	r8,1276(sp)
10002b14:	da413e17 	ldw	r9,1272(sp)
10002b18:	da813d17 	ldw	r10,1268(sp)
10002b1c:	1001a126 	beq	r2,zero,100031a4 <___vfprintf_internal_r+0x1e3c>
10002b20:	d8812117 	ldw	r2,1156(sp)
10002b24:	1280062e 	bgeu	r2,r10,10002b40 <___vfprintf_internal_r+0x17d8>
10002b28:	01000c04 	movi	r4,48
10002b2c:	10c00044 	addi	r3,r2,1
10002b30:	d8c12115 	stw	r3,1156(sp)
10002b34:	11000005 	stb	r4,0(r2)
10002b38:	d8812117 	ldw	r2,1156(sp)
10002b3c:	12bffb36 	bltu	r2,r10,10002b2c <__alt_data_end+0xf8002b2c>
10002b40:	d8c13117 	ldw	r3,1220(sp)
10002b44:	10c5c83a 	sub	r2,r2,r3
10002b48:	d8813315 	stw	r2,1228(sp)
10002b4c:	008011c4 	movi	r2,71
10002b50:	98818926 	beq	r19,r2,10003178 <___vfprintf_internal_r+0x1e10>
10002b54:	00801944 	movi	r2,101
10002b58:	14023c0e 	bge	r2,r16,1000344c <___vfprintf_internal_r+0x20e4>
10002b5c:	d8c12617 	ldw	r3,1176(sp)
10002b60:	00801984 	movi	r2,102
10002b64:	d8c13415 	stw	r3,1232(sp)
10002b68:	8081ef26 	beq	r16,r2,10003328 <___vfprintf_internal_r+0x1fc0>
10002b6c:	d8c13417 	ldw	r3,1232(sp)
10002b70:	d9013317 	ldw	r4,1228(sp)
10002b74:	1901e316 	blt	r3,r4,10003304 <___vfprintf_internal_r+0x1f9c>
10002b78:	e080004c 	andi	r2,fp,1
10002b7c:	1001f426 	beq	r2,zero,10003350 <___vfprintf_internal_r+0x1fe8>
10002b80:	d8c13417 	ldw	r3,1232(sp)
10002b84:	1c400044 	addi	r17,r3,1
10002b88:	8839883a 	mov	fp,r17
10002b8c:	8801e416 	blt	r17,zero,10003320 <___vfprintf_internal_r+0x1fb8>
10002b90:	dd412b07 	ldb	r21,1196(sp)
10002b94:	a801701e 	bne	r21,zero,10003158 <___vfprintf_internal_r+0x1df0>
10002b98:	df012b15 	stw	fp,1196(sp)
10002b9c:	dcc12783 	ldbu	r19,1182(sp)
10002ba0:	df012d17 	ldw	fp,1204(sp)
10002ba4:	d8013215 	stw	zero,1224(sp)
10002ba8:	dc812d15 	stw	r18,1204(sp)
10002bac:	003b6e06 	br	10001968 <__alt_data_end+0xf8001968>
10002bb0:	e080040c 	andi	r2,fp,16
10002bb4:	1000b51e 	bne	r2,zero,10002e8c <___vfprintf_internal_r+0x1b24>
10002bb8:	e080100c 	andi	r2,fp,64
10002bbc:	10015b26 	beq	r2,zero,1000312c <___vfprintf_internal_r+0x1dc4>
10002bc0:	d9012d17 	ldw	r4,1204(sp)
10002bc4:	d9412f17 	ldw	r5,1212(sp)
10002bc8:	20800017 	ldw	r2,0(r4)
10002bcc:	21000104 	addi	r4,r4,4
10002bd0:	d9012d15 	stw	r4,1204(sp)
10002bd4:	1140000d 	sth	r5,0(r2)
10002bd8:	003a2006 	br	1000145c <__alt_data_end+0xf800145c>
10002bdc:	e0c0100c 	andi	r3,fp,64
10002be0:	1800a226 	beq	r3,zero,10002e6c <___vfprintf_internal_r+0x1b04>
10002be4:	d8c12d17 	ldw	r3,1204(sp)
10002be8:	1480000b 	ldhu	r18,0(r2)
10002bec:	002b883a 	mov	r21,zero
10002bf0:	18c00104 	addi	r3,r3,4
10002bf4:	d8c12d15 	stw	r3,1204(sp)
10002bf8:	0005883a 	mov	r2,zero
10002bfc:	9007883a 	mov	r3,r18
10002c00:	003c6906 	br	10001da8 <__alt_data_end+0xf8001da8>
10002c04:	e0c0100c 	andi	r3,fp,64
10002c08:	18009026 	beq	r3,zero,10002e4c <___vfprintf_internal_r+0x1ae4>
10002c0c:	1480000b 	ldhu	r18,0(r2)
10002c10:	d8812d17 	ldw	r2,1204(sp)
10002c14:	002b883a 	mov	r21,zero
10002c18:	9007883a 	mov	r3,r18
10002c1c:	10800104 	addi	r2,r2,4
10002c20:	d8812d15 	stw	r2,1204(sp)
10002c24:	00800044 	movi	r2,1
10002c28:	003c5f06 	br	10001da8 <__alt_data_end+0xf8001da8>
10002c2c:	e0c0100c 	andi	r3,fp,64
10002c30:	18008026 	beq	r3,zero,10002e34 <___vfprintf_internal_r+0x1acc>
10002c34:	d9012d17 	ldw	r4,1204(sp)
10002c38:	1480000b 	ldhu	r18,0(r2)
10002c3c:	002b883a 	mov	r21,zero
10002c40:	21000104 	addi	r4,r4,4
10002c44:	d9012d15 	stw	r4,1204(sp)
10002c48:	003c7906 	br	10001e30 <__alt_data_end+0xf8001e30>
10002c4c:	e080100c 	andi	r2,fp,64
10002c50:	10007126 	beq	r2,zero,10002e18 <___vfprintf_internal_r+0x1ab0>
10002c54:	1c80000f 	ldh	r18,0(r3)
10002c58:	d8812d17 	ldw	r2,1204(sp)
10002c5c:	902bd7fa 	srai	r21,r18,31
10002c60:	10800104 	addi	r2,r2,4
10002c64:	d8812d15 	stw	r2,1204(sp)
10002c68:	a805883a 	mov	r2,r21
10002c6c:	003b1a06 	br	100018d8 <__alt_data_end+0xf80018d8>
10002c70:	e4000007 	ldb	r16,0(fp)
10002c74:	e005883a 	mov	r2,fp
10002c78:	003a2306 	br	10001508 <__alt_data_end+0xf8001508>
10002c7c:	00800084 	movi	r2,2
10002c80:	003c4906 	br	10001da8 <__alt_data_end+0xf8001da8>
10002c84:	01040074 	movhi	r4,4097
10002c88:	21007384 	addi	r4,r4,462
10002c8c:	d9012c15 	stw	r4,1200(sp)
10002c90:	d9012c17 	ldw	r4,1200(sp)
10002c94:	1c47883a 	add	r3,r3,r17
10002c98:	10800044 	addi	r2,r2,1
10002c9c:	41000015 	stw	r4,0(r8)
10002ca0:	44400115 	stw	r17,4(r8)
10002ca4:	d8c12015 	stw	r3,1152(sp)
10002ca8:	d8811f15 	stw	r2,1148(sp)
10002cac:	010001c4 	movi	r4,7
10002cb0:	20becc16 	blt	r4,r2,100027e4 <__alt_data_end+0xf80027e4>
10002cb4:	42000204 	addi	r8,r8,8
10002cb8:	003ed106 	br	10002800 <__alt_data_end+0xf8002800>
10002cbc:	01040074 	movhi	r4,4097
10002cc0:	21007384 	addi	r4,r4,462
10002cc4:	d9012c15 	stw	r4,1200(sp)
10002cc8:	003ba306 	br	10001b58 <__alt_data_end+0xf8001b58>
10002ccc:	b809883a 	mov	r4,r23
10002cd0:	b00b883a 	mov	r5,r22
10002cd4:	d9811e04 	addi	r6,sp,1144
10002cd8:	00086700 	call	10008670 <__sprint_r>
10002cdc:	103aba1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002ce0:	d8c12017 	ldw	r3,1152(sp)
10002ce4:	da000404 	addi	r8,sp,16
10002ce8:	003d6c06 	br	1000229c <__alt_data_end+0xf800229c>
10002cec:	d8811f17 	ldw	r2,1148(sp)
10002cf0:	01440074 	movhi	r5,4097
10002cf4:	01000044 	movi	r4,1
10002cf8:	18c00044 	addi	r3,r3,1
10002cfc:	10800044 	addi	r2,r2,1
10002d00:	29407304 	addi	r5,r5,460
10002d04:	41000115 	stw	r4,4(r8)
10002d08:	41400015 	stw	r5,0(r8)
10002d0c:	d8c12015 	stw	r3,1152(sp)
10002d10:	d8811f15 	stw	r2,1148(sp)
10002d14:	010001c4 	movi	r4,7
10002d18:	20806716 	blt	r4,r2,10002eb8 <___vfprintf_internal_r+0x1b50>
10002d1c:	42000204 	addi	r8,r8,8
10002d20:	8000041e 	bne	r16,zero,10002d34 <___vfprintf_internal_r+0x19cc>
10002d24:	d8813317 	ldw	r2,1228(sp)
10002d28:	1000021e 	bne	r2,zero,10002d34 <___vfprintf_internal_r+0x19cc>
10002d2c:	e080004c 	andi	r2,fp,1
10002d30:	103ba026 	beq	r2,zero,10001bb4 <__alt_data_end+0xf8001bb4>
10002d34:	d9013817 	ldw	r4,1248(sp)
10002d38:	d8811f17 	ldw	r2,1148(sp)
10002d3c:	d9413517 	ldw	r5,1236(sp)
10002d40:	1907883a 	add	r3,r3,r4
10002d44:	10800044 	addi	r2,r2,1
10002d48:	41000115 	stw	r4,4(r8)
10002d4c:	41400015 	stw	r5,0(r8)
10002d50:	d8c12015 	stw	r3,1152(sp)
10002d54:	d8811f15 	stw	r2,1148(sp)
10002d58:	010001c4 	movi	r4,7
10002d5c:	20815716 	blt	r4,r2,100032bc <___vfprintf_internal_r+0x1f54>
10002d60:	42000204 	addi	r8,r8,8
10002d64:	0421c83a 	sub	r16,zero,r16
10002d68:	0400810e 	bge	zero,r16,10002f70 <___vfprintf_internal_r+0x1c08>
10002d6c:	04400404 	movi	r17,16
10002d70:	8c00bd0e 	bge	r17,r16,10003068 <___vfprintf_internal_r+0x1d00>
10002d74:	01440074 	movhi	r5,4097
10002d78:	29407384 	addi	r5,r5,462
10002d7c:	d9412c15 	stw	r5,1200(sp)
10002d80:	04c001c4 	movi	r19,7
10002d84:	00000306 	br	10002d94 <___vfprintf_internal_r+0x1a2c>
10002d88:	42000204 	addi	r8,r8,8
10002d8c:	843ffc04 	addi	r16,r16,-16
10002d90:	8c00b80e 	bge	r17,r16,10003074 <___vfprintf_internal_r+0x1d0c>
10002d94:	18c00404 	addi	r3,r3,16
10002d98:	10800044 	addi	r2,r2,1
10002d9c:	45000015 	stw	r20,0(r8)
10002da0:	44400115 	stw	r17,4(r8)
10002da4:	d8c12015 	stw	r3,1152(sp)
10002da8:	d8811f15 	stw	r2,1148(sp)
10002dac:	98bff60e 	bge	r19,r2,10002d88 <__alt_data_end+0xf8002d88>
10002db0:	b809883a 	mov	r4,r23
10002db4:	b00b883a 	mov	r5,r22
10002db8:	d9811e04 	addi	r6,sp,1144
10002dbc:	00086700 	call	10008670 <__sprint_r>
10002dc0:	103a811e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002dc4:	d8c12017 	ldw	r3,1152(sp)
10002dc8:	d8811f17 	ldw	r2,1148(sp)
10002dcc:	da000404 	addi	r8,sp,16
10002dd0:	003fee06 	br	10002d8c <__alt_data_end+0xf8002d8c>
10002dd4:	008011c4 	movi	r2,71
10002dd8:	1400db16 	blt	r2,r16,10003148 <___vfprintf_internal_r+0x1de0>
10002ddc:	01040074 	movhi	r4,4097
10002de0:	21006504 	addi	r4,r4,404
10002de4:	d9013115 	stw	r4,1220(sp)
10002de8:	00c000c4 	movi	r3,3
10002dec:	00bfdfc4 	movi	r2,-129
10002df0:	d8c12b15 	stw	r3,1196(sp)
10002df4:	e0b8703a 	and	fp,fp,r2
10002df8:	dcc12783 	ldbu	r19,1182(sp)
10002dfc:	dc812d15 	stw	r18,1204(sp)
10002e00:	1823883a 	mov	r17,r3
10002e04:	d8013215 	stw	zero,1224(sp)
10002e08:	d8013415 	stw	zero,1232(sp)
10002e0c:	003ad606 	br	10001968 <__alt_data_end+0xf8001968>
10002e10:	4823883a 	mov	r17,r9
10002e14:	003cc906 	br	1000213c <__alt_data_end+0xf800213c>
10002e18:	1c800017 	ldw	r18,0(r3)
10002e1c:	d8c12d17 	ldw	r3,1204(sp)
10002e20:	902bd7fa 	srai	r21,r18,31
10002e24:	18c00104 	addi	r3,r3,4
10002e28:	d8c12d15 	stw	r3,1204(sp)
10002e2c:	a805883a 	mov	r2,r21
10002e30:	003aa906 	br	100018d8 <__alt_data_end+0xf80018d8>
10002e34:	d9412d17 	ldw	r5,1204(sp)
10002e38:	14800017 	ldw	r18,0(r2)
10002e3c:	002b883a 	mov	r21,zero
10002e40:	29400104 	addi	r5,r5,4
10002e44:	d9412d15 	stw	r5,1204(sp)
10002e48:	003bf906 	br	10001e30 <__alt_data_end+0xf8001e30>
10002e4c:	d8c12d17 	ldw	r3,1204(sp)
10002e50:	14800017 	ldw	r18,0(r2)
10002e54:	002b883a 	mov	r21,zero
10002e58:	18c00104 	addi	r3,r3,4
10002e5c:	d8c12d15 	stw	r3,1204(sp)
10002e60:	00800044 	movi	r2,1
10002e64:	9007883a 	mov	r3,r18
10002e68:	003bcf06 	br	10001da8 <__alt_data_end+0xf8001da8>
10002e6c:	d9012d17 	ldw	r4,1204(sp)
10002e70:	14800017 	ldw	r18,0(r2)
10002e74:	002b883a 	mov	r21,zero
10002e78:	21000104 	addi	r4,r4,4
10002e7c:	d9012d15 	stw	r4,1204(sp)
10002e80:	0005883a 	mov	r2,zero
10002e84:	9007883a 	mov	r3,r18
10002e88:	003bc706 	br	10001da8 <__alt_data_end+0xf8001da8>
10002e8c:	d9412d17 	ldw	r5,1204(sp)
10002e90:	d8c12f17 	ldw	r3,1212(sp)
10002e94:	28800017 	ldw	r2,0(r5)
10002e98:	29400104 	addi	r5,r5,4
10002e9c:	d9412d15 	stw	r5,1204(sp)
10002ea0:	10c00015 	stw	r3,0(r2)
10002ea4:	00396d06 	br	1000145c <__alt_data_end+0xf800145c>
10002ea8:	01040074 	movhi	r4,4097
10002eac:	21006304 	addi	r4,r4,396
10002eb0:	d9013115 	stw	r4,1220(sp)
10002eb4:	003ba206 	br	10001d40 <__alt_data_end+0xf8001d40>
10002eb8:	b809883a 	mov	r4,r23
10002ebc:	b00b883a 	mov	r5,r22
10002ec0:	d9811e04 	addi	r6,sp,1144
10002ec4:	00086700 	call	10008670 <__sprint_r>
10002ec8:	103a3f1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002ecc:	dc012617 	ldw	r16,1176(sp)
10002ed0:	d8c12017 	ldw	r3,1152(sp)
10002ed4:	da000404 	addi	r8,sp,16
10002ed8:	003f9106 	br	10002d20 <__alt_data_end+0xf8002d20>
10002edc:	e0800044 	addi	r2,fp,1
10002ee0:	9cc00814 	ori	r19,r19,32
10002ee4:	e4000047 	ldb	r16,1(fp)
10002ee8:	00398706 	br	10001508 <__alt_data_end+0xf8001508>
10002eec:	d8812e17 	ldw	r2,1208(sp)
10002ef0:	d8c12d15 	stw	r3,1204(sp)
10002ef4:	0085c83a 	sub	r2,zero,r2
10002ef8:	d8812e15 	stw	r2,1208(sp)
10002efc:	e005883a 	mov	r2,fp
10002f00:	003a3a06 	br	100017ec <__alt_data_end+0xf80017ec>
10002f04:	b809883a 	mov	r4,r23
10002f08:	b00b883a 	mov	r5,r22
10002f0c:	d9811e04 	addi	r6,sp,1144
10002f10:	00086700 	call	10008670 <__sprint_r>
10002f14:	103a2c1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002f18:	d8c12017 	ldw	r3,1152(sp)
10002f1c:	da000404 	addi	r8,sp,16
10002f20:	003cf006 	br	100022e4 <__alt_data_end+0xf80022e4>
10002f24:	d8c12817 	ldw	r3,1184(sp)
10002f28:	d9013117 	ldw	r4,1220(sp)
10002f2c:	1923c83a 	sub	r17,r3,r4
10002f30:	003a8806 	br	10001954 <__alt_data_end+0xf8001954>
10002f34:	da013f15 	stw	r8,1276(sp)
10002f38:	00012d00 	call	100012d0 <strlen>
10002f3c:	1023883a 	mov	r17,r2
10002f40:	da013f17 	ldw	r8,1276(sp)
10002f44:	883c7f0e 	bge	r17,zero,10002144 <__alt_data_end+0xf8002144>
10002f48:	0005883a 	mov	r2,zero
10002f4c:	003c7d06 	br	10002144 <__alt_data_end+0xf8002144>
10002f50:	b809883a 	mov	r4,r23
10002f54:	b00b883a 	mov	r5,r22
10002f58:	d9811e04 	addi	r6,sp,1144
10002f5c:	00086700 	call	10008670 <__sprint_r>
10002f60:	103a191e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10002f64:	d8c12017 	ldw	r3,1152(sp)
10002f68:	d8811f17 	ldw	r2,1148(sp)
10002f6c:	da000404 	addi	r8,sp,16
10002f70:	d9413317 	ldw	r5,1228(sp)
10002f74:	d9013117 	ldw	r4,1220(sp)
10002f78:	10800044 	addi	r2,r2,1
10002f7c:	28c7883a 	add	r3,r5,r3
10002f80:	41000015 	stw	r4,0(r8)
10002f84:	41400115 	stw	r5,4(r8)
10002f88:	d8c12015 	stw	r3,1152(sp)
10002f8c:	d8811f15 	stw	r2,1148(sp)
10002f90:	010001c4 	movi	r4,7
10002f94:	20bb060e 	bge	r4,r2,10001bb0 <__alt_data_end+0xf8001bb0>
10002f98:	003d6206 	br	10002524 <__alt_data_end+0xf8002524>
10002f9c:	01040074 	movhi	r4,4097
10002fa0:	21007784 	addi	r4,r4,478
10002fa4:	d9013615 	stw	r4,1240(sp)
10002fa8:	003aa306 	br	10001a38 <__alt_data_end+0xf8001a38>
10002fac:	d8812604 	addi	r2,sp,1176
10002fb0:	d8800115 	stw	r2,4(sp)
10002fb4:	d9413717 	ldw	r5,1244(sp)
10002fb8:	d8812504 	addi	r2,sp,1172
10002fbc:	d8800215 	stw	r2,8(sp)
10002fc0:	d8812104 	addi	r2,sp,1156
10002fc4:	da400015 	stw	r9,0(sp)
10002fc8:	d8800315 	stw	r2,12(sp)
10002fcc:	b809883a 	mov	r4,r23
10002fd0:	880d883a 	mov	r6,r17
10002fd4:	01c000c4 	movi	r7,3
10002fd8:	da013f15 	stw	r8,1276(sp)
10002fdc:	da413e15 	stw	r9,1272(sp)
10002fe0:	00037e00 	call	100037e0 <_dtoa_r>
10002fe4:	da413e17 	ldw	r9,1272(sp)
10002fe8:	da013f17 	ldw	r8,1276(sp)
10002fec:	d8813115 	stw	r2,1220(sp)
10002ff0:	482b883a 	mov	r21,r9
10002ff4:	d8c13117 	ldw	r3,1220(sp)
10002ff8:	00801184 	movi	r2,70
10002ffc:	1d55883a 	add	r10,r3,r21
10003000:	98bebb1e 	bne	r19,r2,10002af0 <__alt_data_end+0xf8002af0>
10003004:	19000007 	ldb	r4,0(r3)
10003008:	00800c04 	movi	r2,48
1000300c:	2080dd26 	beq	r4,r2,10003384 <___vfprintf_internal_r+0x201c>
10003010:	d8c12617 	ldw	r3,1176(sp)
10003014:	50d5883a 	add	r10,r10,r3
10003018:	003eb506 	br	10002af0 <__alt_data_end+0xf8002af0>
1000301c:	0023883a 	mov	r17,zero
10003020:	003d9b06 	br	10002690 <__alt_data_end+0xf8002690>
10003024:	b809883a 	mov	r4,r23
10003028:	b00b883a 	mov	r5,r22
1000302c:	d9811e04 	addi	r6,sp,1144
10003030:	00086700 	call	10008670 <__sprint_r>
10003034:	1039e41e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10003038:	d8c12017 	ldw	r3,1152(sp)
1000303c:	da000404 	addi	r8,sp,16
10003040:	003d9206 	br	1000268c <__alt_data_end+0xf800268c>
10003044:	b809883a 	mov	r4,r23
10003048:	b00b883a 	mov	r5,r22
1000304c:	d9811e04 	addi	r6,sp,1144
10003050:	00086700 	call	10008670 <__sprint_r>
10003054:	1039dc1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
10003058:	d8812617 	ldw	r2,1176(sp)
1000305c:	d8c12017 	ldw	r3,1152(sp)
10003060:	da000404 	addi	r8,sp,16
10003064:	003dfb06 	br	10002854 <__alt_data_end+0xf8002854>
10003068:	01040074 	movhi	r4,4097
1000306c:	21007384 	addi	r4,r4,462
10003070:	d9012c15 	stw	r4,1200(sp)
10003074:	d9012c17 	ldw	r4,1200(sp)
10003078:	1c07883a 	add	r3,r3,r16
1000307c:	10800044 	addi	r2,r2,1
10003080:	41000015 	stw	r4,0(r8)
10003084:	44000115 	stw	r16,4(r8)
10003088:	d8c12015 	stw	r3,1152(sp)
1000308c:	d8811f15 	stw	r2,1148(sp)
10003090:	010001c4 	movi	r4,7
10003094:	20bfae16 	blt	r4,r2,10002f50 <__alt_data_end+0xf8002f50>
10003098:	42000204 	addi	r8,r8,8
1000309c:	003fb406 	br	10002f70 <__alt_data_end+0xf8002f70>
100030a0:	0021883a 	mov	r16,zero
100030a4:	003dfd06 	br	1000289c <__alt_data_end+0xf800289c>
100030a8:	01440074 	movhi	r5,4097
100030ac:	29407784 	addi	r5,r5,478
100030b0:	d9413615 	stw	r5,1240(sp)
100030b4:	003ae306 	br	10001c44 <__alt_data_end+0xf8001c44>
100030b8:	b809883a 	mov	r4,r23
100030bc:	b00b883a 	mov	r5,r22
100030c0:	d9811e04 	addi	r6,sp,1144
100030c4:	00086700 	call	10008670 <__sprint_r>
100030c8:	1039bf1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100030cc:	d8812617 	ldw	r2,1176(sp)
100030d0:	d9413317 	ldw	r5,1228(sp)
100030d4:	d8c12017 	ldw	r3,1152(sp)
100030d8:	da000404 	addi	r8,sp,16
100030dc:	2885c83a 	sub	r2,r5,r2
100030e0:	003ded06 	br	10002898 <__alt_data_end+0xf8002898>
100030e4:	00800184 	movi	r2,6
100030e8:	1240012e 	bgeu	r2,r9,100030f0 <___vfprintf_internal_r+0x1d88>
100030ec:	1013883a 	mov	r9,r2
100030f0:	4823883a 	mov	r17,r9
100030f4:	4805883a 	mov	r2,r9
100030f8:	4800b216 	blt	r9,zero,100033c4 <___vfprintf_internal_r+0x205c>
100030fc:	01440074 	movhi	r5,4097
10003100:	29407104 	addi	r5,r5,452
10003104:	d8812b15 	stw	r2,1196(sp)
10003108:	dc812d15 	stw	r18,1204(sp)
1000310c:	d8013215 	stw	zero,1224(sp)
10003110:	d8013415 	stw	zero,1232(sp)
10003114:	d9413115 	stw	r5,1220(sp)
10003118:	0005883a 	mov	r2,zero
1000311c:	003a1906 	br	10001984 <__alt_data_end+0xf8001984>
10003120:	04c00b44 	movi	r19,45
10003124:	dcc12785 	stb	r19,1182(sp)
10003128:	003b0006 	br	10001d2c <__alt_data_end+0xf8001d2c>
1000312c:	d8c12d17 	ldw	r3,1204(sp)
10003130:	d9012f17 	ldw	r4,1212(sp)
10003134:	18800017 	ldw	r2,0(r3)
10003138:	18c00104 	addi	r3,r3,4
1000313c:	d8c12d15 	stw	r3,1204(sp)
10003140:	11000015 	stw	r4,0(r2)
10003144:	0038c506 	br	1000145c <__alt_data_end+0xf800145c>
10003148:	01440074 	movhi	r5,4097
1000314c:	29406604 	addi	r5,r5,408
10003150:	d9413115 	stw	r5,1220(sp)
10003154:	003f2406 	br	10002de8 <__alt_data_end+0xf8002de8>
10003158:	00800b44 	movi	r2,45
1000315c:	d8812785 	stb	r2,1182(sp)
10003160:	df012b15 	stw	fp,1196(sp)
10003164:	d8013215 	stw	zero,1224(sp)
10003168:	df012d17 	ldw	fp,1204(sp)
1000316c:	00800b44 	movi	r2,45
10003170:	dc812d15 	stw	r18,1204(sp)
10003174:	003a0006 	br	10001978 <__alt_data_end+0xf8001978>
10003178:	d8c12617 	ldw	r3,1176(sp)
1000317c:	00bfff44 	movi	r2,-3
10003180:	18800a16 	blt	r3,r2,100031ac <___vfprintf_internal_r+0x1e44>
10003184:	48c00916 	blt	r9,r3,100031ac <___vfprintf_internal_r+0x1e44>
10003188:	d8c13415 	stw	r3,1232(sp)
1000318c:	040019c4 	movi	r16,103
10003190:	003e7606 	br	10002b6c <__alt_data_end+0xf8002b6c>
10003194:	01040074 	movhi	r4,4097
10003198:	21007384 	addi	r4,r4,462
1000319c:	d9012c15 	stw	r4,1200(sp)
100031a0:	003c8e06 	br	100023dc <__alt_data_end+0xf80023dc>
100031a4:	5005883a 	mov	r2,r10
100031a8:	003e6506 	br	10002b40 <__alt_data_end+0xf8002b40>
100031ac:	843fff84 	addi	r16,r16,-2
100031b0:	1d7fffc4 	addi	r21,r3,-1
100031b4:	dd412615 	stw	r21,1176(sp)
100031b8:	dc0122c5 	stb	r16,1163(sp)
100031bc:	a8009216 	blt	r21,zero,10003408 <___vfprintf_internal_r+0x20a0>
100031c0:	00800ac4 	movi	r2,43
100031c4:	d8812305 	stb	r2,1164(sp)
100031c8:	00800244 	movi	r2,9
100031cc:	1540660e 	bge	r2,r21,10003368 <___vfprintf_internal_r+0x2000>
100031d0:	dcc122c4 	addi	r19,sp,1163
100031d4:	dc012c15 	stw	r16,1200(sp)
100031d8:	4023883a 	mov	r17,r8
100031dc:	9821883a 	mov	r16,r19
100031e0:	a809883a 	mov	r4,r21
100031e4:	01400284 	movi	r5,10
100031e8:	0000fd00 	call	10000fd0 <__modsi3>
100031ec:	10800c04 	addi	r2,r2,48
100031f0:	843fffc4 	addi	r16,r16,-1
100031f4:	a809883a 	mov	r4,r21
100031f8:	01400284 	movi	r5,10
100031fc:	80800005 	stb	r2,0(r16)
10003200:	0000f7c0 	call	10000f7c <__divsi3>
10003204:	01000244 	movi	r4,9
10003208:	102b883a 	mov	r21,r2
1000320c:	20bff416 	blt	r4,r2,100031e0 <__alt_data_end+0xf80031e0>
10003210:	8811883a 	mov	r8,r17
10003214:	10800c04 	addi	r2,r2,48
10003218:	8023883a 	mov	r17,r16
1000321c:	897fffc4 	addi	r5,r17,-1
10003220:	88bfffc5 	stb	r2,-1(r17)
10003224:	dc012c17 	ldw	r16,1200(sp)
10003228:	2cc08a2e 	bgeu	r5,r19,10003454 <___vfprintf_internal_r+0x20ec>
1000322c:	d9812384 	addi	r6,sp,1166
10003230:	344dc83a 	sub	r6,r6,r17
10003234:	d9012344 	addi	r4,sp,1165
10003238:	998d883a 	add	r6,r19,r6
1000323c:	00000106 	br	10003244 <___vfprintf_internal_r+0x1edc>
10003240:	28800003 	ldbu	r2,0(r5)
10003244:	20800005 	stb	r2,0(r4)
10003248:	21000044 	addi	r4,r4,1
1000324c:	29400044 	addi	r5,r5,1
10003250:	21bffb1e 	bne	r4,r6,10003240 <__alt_data_end+0xf8003240>
10003254:	d8812304 	addi	r2,sp,1164
10003258:	1445c83a 	sub	r2,r2,r17
1000325c:	d9412344 	addi	r5,sp,1165
10003260:	2885883a 	add	r2,r5,r2
10003264:	14e7c83a 	sub	r19,r2,r19
10003268:	d8813317 	ldw	r2,1228(sp)
1000326c:	d8c13317 	ldw	r3,1228(sp)
10003270:	dcc13a15 	stw	r19,1256(sp)
10003274:	14e3883a 	add	r17,r2,r19
10003278:	00800044 	movi	r2,1
1000327c:	10c0550e 	bge	r2,r3,100033d4 <___vfprintf_internal_r+0x206c>
10003280:	8c400044 	addi	r17,r17,1
10003284:	8839883a 	mov	fp,r17
10003288:	88005016 	blt	r17,zero,100033cc <___vfprintf_internal_r+0x2064>
1000328c:	d8013415 	stw	zero,1232(sp)
10003290:	003e3f06 	br	10002b90 <__alt_data_end+0xf8002b90>
10003294:	da412b15 	stw	r9,1196(sp)
10003298:	dcc12783 	ldbu	r19,1182(sp)
1000329c:	4823883a 	mov	r17,r9
100032a0:	dc812d15 	stw	r18,1204(sp)
100032a4:	d8013215 	stw	zero,1224(sp)
100032a8:	d8013415 	stw	zero,1232(sp)
100032ac:	0039ae06 	br	10001968 <__alt_data_end+0xf8001968>
100032b0:	483de91e 	bne	r9,zero,10002a58 <__alt_data_end+0xf8002a58>
100032b4:	8813883a 	mov	r9,r17
100032b8:	003de706 	br	10002a58 <__alt_data_end+0xf8002a58>
100032bc:	b809883a 	mov	r4,r23
100032c0:	b00b883a 	mov	r5,r22
100032c4:	d9811e04 	addi	r6,sp,1144
100032c8:	00086700 	call	10008670 <__sprint_r>
100032cc:	10393e1e 	bne	r2,zero,100017c8 <__alt_data_end+0xf80017c8>
100032d0:	dc012617 	ldw	r16,1176(sp)
100032d4:	d8c12017 	ldw	r3,1152(sp)
100032d8:	d8811f17 	ldw	r2,1148(sp)
100032dc:	da000404 	addi	r8,sp,16
100032e0:	003ea006 	br	10002d64 <__alt_data_end+0xf8002d64>
100032e4:	00c00b44 	movi	r3,45
100032e8:	2460003c 	xorhi	r17,r4,32768
100032ec:	d8c12b05 	stb	r3,1196(sp)
100032f0:	003ddf06 	br	10002a70 <__alt_data_end+0xf8002a70>
100032f4:	02400184 	movi	r9,6
100032f8:	003dd706 	br	10002a58 <__alt_data_end+0xf8002a58>
100032fc:	4d400044 	addi	r21,r9,1
10003300:	003de206 	br	10002a8c <__alt_data_end+0xf8002a8c>
10003304:	d8c13417 	ldw	r3,1232(sp)
10003308:	00c0490e 	bge	zero,r3,10003430 <___vfprintf_internal_r+0x20c8>
1000330c:	04400044 	movi	r17,1
10003310:	d9013317 	ldw	r4,1228(sp)
10003314:	8923883a 	add	r17,r17,r4
10003318:	8839883a 	mov	fp,r17
1000331c:	883e1c0e 	bge	r17,zero,10002b90 <__alt_data_end+0xf8002b90>
10003320:	0039883a 	mov	fp,zero
10003324:	003e1a06 	br	10002b90 <__alt_data_end+0xf8002b90>
10003328:	00c03b0e 	bge	zero,r3,10003418 <___vfprintf_internal_r+0x20b0>
1000332c:	4800021e 	bne	r9,zero,10003338 <___vfprintf_internal_r+0x1fd0>
10003330:	e080004c 	andi	r2,fp,1
10003334:	10000626 	beq	r2,zero,10003350 <___vfprintf_internal_r+0x1fe8>
10003338:	d8c13417 	ldw	r3,1232(sp)
1000333c:	4a400044 	addi	r9,r9,1
10003340:	1a63883a 	add	r17,r3,r9
10003344:	8839883a 	mov	fp,r17
10003348:	883e110e 	bge	r17,zero,10002b90 <__alt_data_end+0xf8002b90>
1000334c:	003ff406 	br	10003320 <__alt_data_end+0xf8003320>
10003350:	1839883a 	mov	fp,r3
10003354:	18004116 	blt	r3,zero,1000345c <___vfprintf_internal_r+0x20f4>
10003358:	dc413417 	ldw	r17,1232(sp)
1000335c:	003e0c06 	br	10002b90 <__alt_data_end+0xf8002b90>
10003360:	d8812117 	ldw	r2,1156(sp)
10003364:	003df606 	br	10002b40 <__alt_data_end+0xf8002b40>
10003368:	00800c04 	movi	r2,48
1000336c:	a8c00c04 	addi	r3,r21,48
10003370:	d8812345 	stb	r2,1165(sp)
10003374:	d8c12385 	stb	r3,1166(sp)
10003378:	d88123c4 	addi	r2,sp,1167
1000337c:	dcc122c4 	addi	r19,sp,1163
10003380:	003fb806 	br	10003264 <__alt_data_end+0xf8003264>
10003384:	d9013717 	ldw	r4,1244(sp)
10003388:	880b883a 	mov	r5,r17
1000338c:	000d883a 	mov	r6,zero
10003390:	000f883a 	mov	r7,zero
10003394:	da013f15 	stw	r8,1276(sp)
10003398:	da413e15 	stw	r9,1272(sp)
1000339c:	da813d15 	stw	r10,1268(sp)
100033a0:	000c2940 	call	1000c294 <__eqdf2>
100033a4:	da013f17 	ldw	r8,1276(sp)
100033a8:	da413e17 	ldw	r9,1272(sp)
100033ac:	da813d17 	ldw	r10,1268(sp)
100033b0:	103f1726 	beq	r2,zero,10003010 <__alt_data_end+0xf8003010>
100033b4:	00800044 	movi	r2,1
100033b8:	1547c83a 	sub	r3,r2,r21
100033bc:	d8c12615 	stw	r3,1176(sp)
100033c0:	003f1406 	br	10003014 <__alt_data_end+0xf8003014>
100033c4:	0005883a 	mov	r2,zero
100033c8:	003f4c06 	br	100030fc <__alt_data_end+0xf80030fc>
100033cc:	0039883a 	mov	fp,zero
100033d0:	003fae06 	br	1000328c <__alt_data_end+0xf800328c>
100033d4:	e084703a 	and	r2,fp,r2
100033d8:	103faa26 	beq	r2,zero,10003284 <__alt_data_end+0xf8003284>
100033dc:	003fa806 	br	10003280 <__alt_data_end+0xf8003280>
100033e0:	d9412d17 	ldw	r5,1204(sp)
100033e4:	2a400017 	ldw	r9,0(r5)
100033e8:	28c00104 	addi	r3,r5,4
100033ec:	d8c12d15 	stw	r3,1204(sp)
100033f0:	483ebc0e 	bge	r9,zero,10002ee4 <__alt_data_end+0xf8002ee4>
100033f4:	027fffc4 	movi	r9,-1
100033f8:	e4000047 	ldb	r16,1(fp)
100033fc:	00384206 	br	10001508 <__alt_data_end+0xf8001508>
10003400:	043fffc4 	movi	r16,-1
10003404:	0038ce06 	br	10001740 <__alt_data_end+0xf8001740>
10003408:	00800b44 	movi	r2,45
1000340c:	056bc83a 	sub	r21,zero,r21
10003410:	d8812305 	stb	r2,1164(sp)
10003414:	003f6c06 	br	100031c8 <__alt_data_end+0xf80031c8>
10003418:	4800081e 	bne	r9,zero,1000343c <___vfprintf_internal_r+0x20d4>
1000341c:	e080004c 	andi	r2,fp,1
10003420:	1000061e 	bne	r2,zero,1000343c <___vfprintf_internal_r+0x20d4>
10003424:	07000044 	movi	fp,1
10003428:	e023883a 	mov	r17,fp
1000342c:	003dd806 	br	10002b90 <__alt_data_end+0xf8002b90>
10003430:	04400084 	movi	r17,2
10003434:	88e3c83a 	sub	r17,r17,r3
10003438:	003fb506 	br	10003310 <__alt_data_end+0xf8003310>
1000343c:	4c400084 	addi	r17,r9,2
10003440:	8839883a 	mov	fp,r17
10003444:	883dd20e 	bge	r17,zero,10002b90 <__alt_data_end+0xf8002b90>
10003448:	003fb506 	br	10003320 <__alt_data_end+0xf8003320>
1000344c:	d8c12617 	ldw	r3,1176(sp)
10003450:	003f5706 	br	100031b0 <__alt_data_end+0xf80031b0>
10003454:	d8812344 	addi	r2,sp,1165
10003458:	003f8206 	br	10003264 <__alt_data_end+0xf8003264>
1000345c:	0039883a 	mov	fp,zero
10003460:	003fbd06 	br	10003358 <__alt_data_end+0xf8003358>

10003464 <__vfprintf_internal>:
10003464:	2007883a 	mov	r3,r4
10003468:	01040074 	movhi	r4,4097
1000346c:	21095d04 	addi	r4,r4,9588
10003470:	21000017 	ldw	r4,0(r4)
10003474:	2805883a 	mov	r2,r5
10003478:	300f883a 	mov	r7,r6
1000347c:	180b883a 	mov	r5,r3
10003480:	100d883a 	mov	r6,r2
10003484:	00013681 	jmpi	10001368 <___vfprintf_internal_r>

10003488 <__swsetup_r>:
10003488:	00840074 	movhi	r2,4097
1000348c:	defffd04 	addi	sp,sp,-12
10003490:	10895d04 	addi	r2,r2,9588
10003494:	dc400115 	stw	r17,4(sp)
10003498:	2023883a 	mov	r17,r4
1000349c:	11000017 	ldw	r4,0(r2)
100034a0:	dc000015 	stw	r16,0(sp)
100034a4:	dfc00215 	stw	ra,8(sp)
100034a8:	2821883a 	mov	r16,r5
100034ac:	20000226 	beq	r4,zero,100034b8 <__swsetup_r+0x30>
100034b0:	20c00e17 	ldw	r3,56(r4)
100034b4:	18002e26 	beq	r3,zero,10003570 <__swsetup_r+0xe8>
100034b8:	8080030b 	ldhu	r2,12(r16)
100034bc:	10c0020c 	andi	r3,r2,8
100034c0:	100d883a 	mov	r6,r2
100034c4:	18000f26 	beq	r3,zero,10003504 <__swsetup_r+0x7c>
100034c8:	80c00417 	ldw	r3,16(r16)
100034cc:	18001526 	beq	r3,zero,10003524 <__swsetup_r+0x9c>
100034d0:	1100004c 	andi	r4,r2,1
100034d4:	20001c1e 	bne	r4,zero,10003548 <__swsetup_r+0xc0>
100034d8:	1080008c 	andi	r2,r2,2
100034dc:	1000261e 	bne	r2,zero,10003578 <__swsetup_r+0xf0>
100034e0:	80800517 	ldw	r2,20(r16)
100034e4:	80800215 	stw	r2,8(r16)
100034e8:	18001c26 	beq	r3,zero,1000355c <__swsetup_r+0xd4>
100034ec:	0005883a 	mov	r2,zero
100034f0:	dfc00217 	ldw	ra,8(sp)
100034f4:	dc400117 	ldw	r17,4(sp)
100034f8:	dc000017 	ldw	r16,0(sp)
100034fc:	dec00304 	addi	sp,sp,12
10003500:	f800283a 	ret
10003504:	3080040c 	andi	r2,r6,16
10003508:	10001726 	beq	r2,zero,10003568 <__swsetup_r+0xe0>
1000350c:	3080010c 	andi	r2,r6,4
10003510:	10001b1e 	bne	r2,zero,10003580 <__swsetup_r+0xf8>
10003514:	80c00417 	ldw	r3,16(r16)
10003518:	30800214 	ori	r2,r6,8
1000351c:	8080030d 	sth	r2,12(r16)
10003520:	183feb1e 	bne	r3,zero,100034d0 <__alt_data_end+0xf80034d0>
10003524:	1140a00c 	andi	r5,r2,640
10003528:	01008004 	movi	r4,512
1000352c:	293fe826 	beq	r5,r4,100034d0 <__alt_data_end+0xf80034d0>
10003530:	8809883a 	mov	r4,r17
10003534:	800b883a 	mov	r5,r16
10003538:	000601c0 	call	1000601c <__smakebuf_r>
1000353c:	8080030b 	ldhu	r2,12(r16)
10003540:	80c00417 	ldw	r3,16(r16)
10003544:	003fe206 	br	100034d0 <__alt_data_end+0xf80034d0>
10003548:	80800517 	ldw	r2,20(r16)
1000354c:	80000215 	stw	zero,8(r16)
10003550:	0085c83a 	sub	r2,zero,r2
10003554:	80800615 	stw	r2,24(r16)
10003558:	183fe41e 	bne	r3,zero,100034ec <__alt_data_end+0xf80034ec>
1000355c:	8080030b 	ldhu	r2,12(r16)
10003560:	1080200c 	andi	r2,r2,128
10003564:	103fe226 	beq	r2,zero,100034f0 <__alt_data_end+0xf80034f0>
10003568:	00bfffc4 	movi	r2,-1
1000356c:	003fe006 	br	100034f0 <__alt_data_end+0xf80034f0>
10003570:	00054c40 	call	100054c4 <__sinit>
10003574:	003fd006 	br	100034b8 <__alt_data_end+0xf80034b8>
10003578:	0005883a 	mov	r2,zero
1000357c:	003fd906 	br	100034e4 <__alt_data_end+0xf80034e4>
10003580:	81400c17 	ldw	r5,48(r16)
10003584:	28000626 	beq	r5,zero,100035a0 <__swsetup_r+0x118>
10003588:	80801004 	addi	r2,r16,64
1000358c:	28800326 	beq	r5,r2,1000359c <__swsetup_r+0x114>
10003590:	8809883a 	mov	r4,r17
10003594:	00056380 	call	10005638 <_free_r>
10003598:	8180030b 	ldhu	r6,12(r16)
1000359c:	80000c15 	stw	zero,48(r16)
100035a0:	80c00417 	ldw	r3,16(r16)
100035a4:	00bff6c4 	movi	r2,-37
100035a8:	118c703a 	and	r6,r2,r6
100035ac:	80000115 	stw	zero,4(r16)
100035b0:	80c00015 	stw	r3,0(r16)
100035b4:	003fd806 	br	10003518 <__alt_data_end+0xf8003518>

100035b8 <quorem>:
100035b8:	defff204 	addi	sp,sp,-56
100035bc:	ddc00b15 	stw	r23,44(sp)
100035c0:	20800417 	ldw	r2,16(r4)
100035c4:	2dc00417 	ldw	r23,16(r5)
100035c8:	dfc00d15 	stw	ra,52(sp)
100035cc:	df000c15 	stw	fp,48(sp)
100035d0:	dd800a15 	stw	r22,40(sp)
100035d4:	dd400915 	stw	r21,36(sp)
100035d8:	dd000815 	stw	r20,32(sp)
100035dc:	dcc00715 	stw	r19,28(sp)
100035e0:	dc800615 	stw	r18,24(sp)
100035e4:	dc400515 	stw	r17,20(sp)
100035e8:	dc000415 	stw	r16,16(sp)
100035ec:	15c07a16 	blt	r2,r23,100037d8 <quorem+0x220>
100035f0:	bdffffc4 	addi	r23,r23,-1
100035f4:	bde9883a 	add	r20,r23,r23
100035f8:	28c00504 	addi	r3,r5,20
100035fc:	a529883a 	add	r20,r20,r20
10003600:	1d39883a 	add	fp,r3,r20
10003604:	24c00504 	addi	r19,r4,20
10003608:	d9400215 	stw	r5,8(sp)
1000360c:	9d29883a 	add	r20,r19,r20
10003610:	e1400017 	ldw	r5,0(fp)
10003614:	d9000015 	stw	r4,0(sp)
10003618:	a1000017 	ldw	r4,0(r20)
1000361c:	29400044 	addi	r5,r5,1
10003620:	d8c00115 	stw	r3,4(sp)
10003624:	dd000315 	stw	r20,12(sp)
10003628:	000102c0 	call	1000102c <__udivsi3>
1000362c:	1025883a 	mov	r18,r2
10003630:	10003026 	beq	r2,zero,100036f4 <quorem+0x13c>
10003634:	dc400117 	ldw	r17,4(sp)
10003638:	9829883a 	mov	r20,r19
1000363c:	002d883a 	mov	r22,zero
10003640:	0021883a 	mov	r16,zero
10003644:	8d400017 	ldw	r21,0(r17)
10003648:	900b883a 	mov	r5,r18
1000364c:	8c400104 	addi	r17,r17,4
10003650:	a93fffcc 	andi	r4,r21,65535
10003654:	000103c0 	call	1000103c <__mulsi3>
10003658:	a808d43a 	srli	r4,r21,16
1000365c:	900b883a 	mov	r5,r18
10003660:	b0ad883a 	add	r22,r22,r2
10003664:	000103c0 	call	1000103c <__mulsi3>
10003668:	a1000017 	ldw	r4,0(r20)
1000366c:	b00cd43a 	srli	r6,r22,16
10003670:	b0ffffcc 	andi	r3,r22,65535
10003674:	217fffcc 	andi	r5,r4,65535
10003678:	2c21883a 	add	r16,r5,r16
1000367c:	80c7c83a 	sub	r3,r16,r3
10003680:	2008d43a 	srli	r4,r4,16
10003684:	3085883a 	add	r2,r6,r2
10003688:	1821d43a 	srai	r16,r3,16
1000368c:	117fffcc 	andi	r5,r2,65535
10003690:	2149c83a 	sub	r4,r4,r5
10003694:	2421883a 	add	r16,r4,r16
10003698:	8008943a 	slli	r4,r16,16
1000369c:	18ffffcc 	andi	r3,r3,65535
100036a0:	102cd43a 	srli	r22,r2,16
100036a4:	20c8b03a 	or	r4,r4,r3
100036a8:	a1000015 	stw	r4,0(r20)
100036ac:	8021d43a 	srai	r16,r16,16
100036b0:	a5000104 	addi	r20,r20,4
100036b4:	e47fe32e 	bgeu	fp,r17,10003644 <__alt_data_end+0xf8003644>
100036b8:	d8c00317 	ldw	r3,12(sp)
100036bc:	18800017 	ldw	r2,0(r3)
100036c0:	10000c1e 	bne	r2,zero,100036f4 <quorem+0x13c>
100036c4:	18bfff04 	addi	r2,r3,-4
100036c8:	9880082e 	bgeu	r19,r2,100036ec <quorem+0x134>
100036cc:	18ffff17 	ldw	r3,-4(r3)
100036d0:	18000326 	beq	r3,zero,100036e0 <quorem+0x128>
100036d4:	00000506 	br	100036ec <quorem+0x134>
100036d8:	10c00017 	ldw	r3,0(r2)
100036dc:	1800031e 	bne	r3,zero,100036ec <quorem+0x134>
100036e0:	10bfff04 	addi	r2,r2,-4
100036e4:	bdffffc4 	addi	r23,r23,-1
100036e8:	98bffb36 	bltu	r19,r2,100036d8 <__alt_data_end+0xf80036d8>
100036ec:	d8c00017 	ldw	r3,0(sp)
100036f0:	1dc00415 	stw	r23,16(r3)
100036f4:	d9000017 	ldw	r4,0(sp)
100036f8:	d9400217 	ldw	r5,8(sp)
100036fc:	00076600 	call	10007660 <__mcmp>
10003700:	10002816 	blt	r2,zero,100037a4 <quorem+0x1ec>
10003704:	dc400117 	ldw	r17,4(sp)
10003708:	94800044 	addi	r18,r18,1
1000370c:	980d883a 	mov	r6,r19
10003710:	0007883a 	mov	r3,zero
10003714:	31000017 	ldw	r4,0(r6)
10003718:	89400017 	ldw	r5,0(r17)
1000371c:	31800104 	addi	r6,r6,4
10003720:	20bfffcc 	andi	r2,r4,65535
10003724:	10c7883a 	add	r3,r2,r3
10003728:	28bfffcc 	andi	r2,r5,65535
1000372c:	1885c83a 	sub	r2,r3,r2
10003730:	280ad43a 	srli	r5,r5,16
10003734:	2008d43a 	srli	r4,r4,16
10003738:	1007d43a 	srai	r3,r2,16
1000373c:	10bfffcc 	andi	r2,r2,65535
10003740:	2149c83a 	sub	r4,r4,r5
10003744:	20c9883a 	add	r4,r4,r3
10003748:	200a943a 	slli	r5,r4,16
1000374c:	8c400104 	addi	r17,r17,4
10003750:	2007d43a 	srai	r3,r4,16
10003754:	2884b03a 	or	r2,r5,r2
10003758:	30bfff15 	stw	r2,-4(r6)
1000375c:	e47fed2e 	bgeu	fp,r17,10003714 <__alt_data_end+0xf8003714>
10003760:	bdc5883a 	add	r2,r23,r23
10003764:	1085883a 	add	r2,r2,r2
10003768:	9887883a 	add	r3,r19,r2
1000376c:	18800017 	ldw	r2,0(r3)
10003770:	10000c1e 	bne	r2,zero,100037a4 <quorem+0x1ec>
10003774:	18bfff04 	addi	r2,r3,-4
10003778:	9880082e 	bgeu	r19,r2,1000379c <quorem+0x1e4>
1000377c:	18ffff17 	ldw	r3,-4(r3)
10003780:	18000326 	beq	r3,zero,10003790 <quorem+0x1d8>
10003784:	00000506 	br	1000379c <quorem+0x1e4>
10003788:	10c00017 	ldw	r3,0(r2)
1000378c:	1800031e 	bne	r3,zero,1000379c <quorem+0x1e4>
10003790:	10bfff04 	addi	r2,r2,-4
10003794:	bdffffc4 	addi	r23,r23,-1
10003798:	98bffb36 	bltu	r19,r2,10003788 <__alt_data_end+0xf8003788>
1000379c:	d8c00017 	ldw	r3,0(sp)
100037a0:	1dc00415 	stw	r23,16(r3)
100037a4:	9005883a 	mov	r2,r18
100037a8:	dfc00d17 	ldw	ra,52(sp)
100037ac:	df000c17 	ldw	fp,48(sp)
100037b0:	ddc00b17 	ldw	r23,44(sp)
100037b4:	dd800a17 	ldw	r22,40(sp)
100037b8:	dd400917 	ldw	r21,36(sp)
100037bc:	dd000817 	ldw	r20,32(sp)
100037c0:	dcc00717 	ldw	r19,28(sp)
100037c4:	dc800617 	ldw	r18,24(sp)
100037c8:	dc400517 	ldw	r17,20(sp)
100037cc:	dc000417 	ldw	r16,16(sp)
100037d0:	dec00e04 	addi	sp,sp,56
100037d4:	f800283a 	ret
100037d8:	0005883a 	mov	r2,zero
100037dc:	003ff206 	br	100037a8 <__alt_data_end+0xf80037a8>

100037e0 <_dtoa_r>:
100037e0:	20801017 	ldw	r2,64(r4)
100037e4:	deffde04 	addi	sp,sp,-136
100037e8:	dd401d15 	stw	r21,116(sp)
100037ec:	dcc01b15 	stw	r19,108(sp)
100037f0:	dc801a15 	stw	r18,104(sp)
100037f4:	dc401915 	stw	r17,100(sp)
100037f8:	dc001815 	stw	r16,96(sp)
100037fc:	dfc02115 	stw	ra,132(sp)
10003800:	df002015 	stw	fp,128(sp)
10003804:	ddc01f15 	stw	r23,124(sp)
10003808:	dd801e15 	stw	r22,120(sp)
1000380c:	dd001c15 	stw	r20,112(sp)
10003810:	d9c00315 	stw	r7,12(sp)
10003814:	2021883a 	mov	r16,r4
10003818:	302b883a 	mov	r21,r6
1000381c:	2825883a 	mov	r18,r5
10003820:	dc402417 	ldw	r17,144(sp)
10003824:	3027883a 	mov	r19,r6
10003828:	10000826 	beq	r2,zero,1000384c <_dtoa_r+0x6c>
1000382c:	21801117 	ldw	r6,68(r4)
10003830:	00c00044 	movi	r3,1
10003834:	100b883a 	mov	r5,r2
10003838:	1986983a 	sll	r3,r3,r6
1000383c:	11800115 	stw	r6,4(r2)
10003840:	10c00215 	stw	r3,8(r2)
10003844:	0006d8c0 	call	10006d8c <_Bfree>
10003848:	80001015 	stw	zero,64(r16)
1000384c:	a8002d16 	blt	r21,zero,10003904 <_dtoa_r+0x124>
10003850:	88000015 	stw	zero,0(r17)
10003854:	a8dffc2c 	andhi	r3,r21,32752
10003858:	009ffc34 	movhi	r2,32752
1000385c:	18801b26 	beq	r3,r2,100038cc <_dtoa_r+0xec>
10003860:	9009883a 	mov	r4,r18
10003864:	980b883a 	mov	r5,r19
10003868:	000d883a 	mov	r6,zero
1000386c:	000f883a 	mov	r7,zero
10003870:	000c2940 	call	1000c294 <__eqdf2>
10003874:	10002a1e 	bne	r2,zero,10003920 <_dtoa_r+0x140>
10003878:	d8c02317 	ldw	r3,140(sp)
1000387c:	d9002517 	ldw	r4,148(sp)
10003880:	00800044 	movi	r2,1
10003884:	18800015 	stw	r2,0(r3)
10003888:	2001a226 	beq	r4,zero,10003f14 <_dtoa_r+0x734>
1000388c:	00840074 	movhi	r2,4097
10003890:	10807344 	addi	r2,r2,461
10003894:	20800015 	stw	r2,0(r4)
10003898:	10bfffc4 	addi	r2,r2,-1
1000389c:	dfc02117 	ldw	ra,132(sp)
100038a0:	df002017 	ldw	fp,128(sp)
100038a4:	ddc01f17 	ldw	r23,124(sp)
100038a8:	dd801e17 	ldw	r22,120(sp)
100038ac:	dd401d17 	ldw	r21,116(sp)
100038b0:	dd001c17 	ldw	r20,112(sp)
100038b4:	dcc01b17 	ldw	r19,108(sp)
100038b8:	dc801a17 	ldw	r18,104(sp)
100038bc:	dc401917 	ldw	r17,100(sp)
100038c0:	dc001817 	ldw	r16,96(sp)
100038c4:	dec02204 	addi	sp,sp,136
100038c8:	f800283a 	ret
100038cc:	d8c02317 	ldw	r3,140(sp)
100038d0:	0089c3c4 	movi	r2,9999
100038d4:	18800015 	stw	r2,0(r3)
100038d8:	90017c26 	beq	r18,zero,10003ecc <_dtoa_r+0x6ec>
100038dc:	00840074 	movhi	r2,4097
100038e0:	10807f04 	addi	r2,r2,508
100038e4:	d9002517 	ldw	r4,148(sp)
100038e8:	203fec26 	beq	r4,zero,1000389c <__alt_data_end+0xf800389c>
100038ec:	10c000c7 	ldb	r3,3(r2)
100038f0:	18017d1e 	bne	r3,zero,10003ee8 <_dtoa_r+0x708>
100038f4:	10c000c4 	addi	r3,r2,3
100038f8:	d9802517 	ldw	r6,148(sp)
100038fc:	30c00015 	stw	r3,0(r6)
10003900:	003fe606 	br	1000389c <__alt_data_end+0xf800389c>
10003904:	04e00034 	movhi	r19,32768
10003908:	9cffffc4 	addi	r19,r19,-1
1000390c:	00800044 	movi	r2,1
10003910:	ace6703a 	and	r19,r21,r19
10003914:	88800015 	stw	r2,0(r17)
10003918:	982b883a 	mov	r21,r19
1000391c:	003fcd06 	br	10003854 <__alt_data_end+0xf8003854>
10003920:	d8800204 	addi	r2,sp,8
10003924:	a822d53a 	srli	r17,r21,20
10003928:	d8800015 	stw	r2,0(sp)
1000392c:	8009883a 	mov	r4,r16
10003930:	900b883a 	mov	r5,r18
10003934:	980d883a 	mov	r6,r19
10003938:	d9c00104 	addi	r7,sp,4
1000393c:	00079d40 	call	100079d4 <__d2b>
10003940:	1039883a 	mov	fp,r2
10003944:	88016a1e 	bne	r17,zero,10003ef0 <_dtoa_r+0x710>
10003948:	dd000217 	ldw	r20,8(sp)
1000394c:	dc400117 	ldw	r17,4(sp)
10003950:	00befbc4 	movi	r2,-1041
10003954:	a463883a 	add	r17,r20,r17
10003958:	8882ea16 	blt	r17,r2,10004504 <_dtoa_r+0xd24>
1000395c:	00bf0384 	movi	r2,-1010
10003960:	1445c83a 	sub	r2,r2,r17
10003964:	89010484 	addi	r4,r17,1042
10003968:	a8aa983a 	sll	r21,r21,r2
1000396c:	9108d83a 	srl	r4,r18,r4
10003970:	a908b03a 	or	r4,r21,r4
10003974:	000d76c0 	call	1000d76c <__floatunsidf>
10003978:	017f8434 	movhi	r5,65040
1000397c:	01800044 	movi	r6,1
10003980:	1009883a 	mov	r4,r2
10003984:	194b883a 	add	r5,r3,r5
10003988:	8c7fffc4 	addi	r17,r17,-1
1000398c:	d9800f15 	stw	r6,60(sp)
10003990:	000d883a 	mov	r6,zero
10003994:	01cffe34 	movhi	r7,16376
10003998:	000cd440 	call	1000cd44 <__subdf3>
1000399c:	0198dbf4 	movhi	r6,25455
100039a0:	01cff4f4 	movhi	r7,16339
100039a4:	1009883a 	mov	r4,r2
100039a8:	180b883a 	mov	r5,r3
100039ac:	3190d844 	addi	r6,r6,17249
100039b0:	39e1e9c4 	addi	r7,r7,-30809
100039b4:	000c4d80 	call	1000c4d8 <__muldf3>
100039b8:	01a2d874 	movhi	r6,35681
100039bc:	01cff1f4 	movhi	r7,16327
100039c0:	180b883a 	mov	r5,r3
100039c4:	31b22cc4 	addi	r6,r6,-14157
100039c8:	39e28a04 	addi	r7,r7,-30168
100039cc:	1009883a 	mov	r4,r2
100039d0:	000b0780 	call	1000b078 <__adddf3>
100039d4:	8809883a 	mov	r4,r17
100039d8:	102d883a 	mov	r22,r2
100039dc:	182b883a 	mov	r21,r3
100039e0:	000d69c0 	call	1000d69c <__floatsidf>
100039e4:	019427f4 	movhi	r6,20639
100039e8:	01cff4f4 	movhi	r7,16339
100039ec:	1009883a 	mov	r4,r2
100039f0:	180b883a 	mov	r5,r3
100039f4:	319e7ec4 	addi	r6,r6,31227
100039f8:	39d104c4 	addi	r7,r7,17427
100039fc:	000c4d80 	call	1000c4d8 <__muldf3>
10003a00:	b009883a 	mov	r4,r22
10003a04:	a80b883a 	mov	r5,r21
10003a08:	100d883a 	mov	r6,r2
10003a0c:	180f883a 	mov	r7,r3
10003a10:	000b0780 	call	1000b078 <__adddf3>
10003a14:	1009883a 	mov	r4,r2
10003a18:	180b883a 	mov	r5,r3
10003a1c:	102d883a 	mov	r22,r2
10003a20:	182b883a 	mov	r21,r3
10003a24:	000d6140 	call	1000d614 <__fixdfsi>
10003a28:	b009883a 	mov	r4,r22
10003a2c:	a80b883a 	mov	r5,r21
10003a30:	000d883a 	mov	r6,zero
10003a34:	000f883a 	mov	r7,zero
10003a38:	d8800515 	stw	r2,20(sp)
10003a3c:	000c3f80 	call	1000c3f8 <__ledf2>
10003a40:	10023116 	blt	r2,zero,10004308 <_dtoa_r+0xb28>
10003a44:	d8c00517 	ldw	r3,20(sp)
10003a48:	00800584 	movi	r2,22
10003a4c:	10c21f36 	bltu	r2,r3,100042cc <_dtoa_r+0xaec>
10003a50:	180490fa 	slli	r2,r3,3
10003a54:	00c40074 	movhi	r3,4097
10003a58:	18c09b04 	addi	r3,r3,620
10003a5c:	1885883a 	add	r2,r3,r2
10003a60:	11000017 	ldw	r4,0(r2)
10003a64:	11400117 	ldw	r5,4(r2)
10003a68:	900d883a 	mov	r6,r18
10003a6c:	980f883a 	mov	r7,r19
10003a70:	000c3180 	call	1000c318 <__gedf2>
10003a74:	0082a70e 	bge	zero,r2,10004514 <_dtoa_r+0xd34>
10003a78:	d9000517 	ldw	r4,20(sp)
10003a7c:	d8000c15 	stw	zero,48(sp)
10003a80:	213fffc4 	addi	r4,r4,-1
10003a84:	d9000515 	stw	r4,20(sp)
10003a88:	a463c83a 	sub	r17,r20,r17
10003a8c:	8dbfffc4 	addi	r22,r17,-1
10003a90:	b0021916 	blt	r22,zero,100042f8 <_dtoa_r+0xb18>
10003a94:	d8000815 	stw	zero,32(sp)
10003a98:	d8800517 	ldw	r2,20(sp)
10003a9c:	10020e16 	blt	r2,zero,100042d8 <_dtoa_r+0xaf8>
10003aa0:	b0ad883a 	add	r22,r22,r2
10003aa4:	d8800a15 	stw	r2,40(sp)
10003aa8:	d8000915 	stw	zero,36(sp)
10003aac:	d8c00317 	ldw	r3,12(sp)
10003ab0:	00800244 	movi	r2,9
10003ab4:	10c11a36 	bltu	r2,r3,10003f20 <_dtoa_r+0x740>
10003ab8:	00800144 	movi	r2,5
10003abc:	10c4fc0e 	bge	r2,r3,10004eb0 <_dtoa_r+0x16d0>
10003ac0:	18ffff04 	addi	r3,r3,-4
10003ac4:	d8c00315 	stw	r3,12(sp)
10003ac8:	0029883a 	mov	r20,zero
10003acc:	d9800317 	ldw	r6,12(sp)
10003ad0:	008000c4 	movi	r2,3
10003ad4:	3083bd26 	beq	r6,r2,100049cc <_dtoa_r+0x11ec>
10003ad8:	1183670e 	bge	r2,r6,10004878 <_dtoa_r+0x1098>
10003adc:	d8c00317 	ldw	r3,12(sp)
10003ae0:	00800104 	movi	r2,4
10003ae4:	1882e726 	beq	r3,r2,10004684 <_dtoa_r+0xea4>
10003ae8:	00800144 	movi	r2,5
10003aec:	1884f21e 	bne	r3,r2,10004eb8 <_dtoa_r+0x16d8>
10003af0:	00800044 	movi	r2,1
10003af4:	d8800b15 	stw	r2,44(sp)
10003af8:	d8c02217 	ldw	r3,136(sp)
10003afc:	d9000517 	ldw	r4,20(sp)
10003b00:	1907883a 	add	r3,r3,r4
10003b04:	19800044 	addi	r6,r3,1
10003b08:	d8c00d15 	stw	r3,52(sp)
10003b0c:	d9800615 	stw	r6,24(sp)
10003b10:	0183c30e 	bge	zero,r6,10004a20 <_dtoa_r+0x1240>
10003b14:	d9800617 	ldw	r6,24(sp)
10003b18:	3023883a 	mov	r17,r6
10003b1c:	80001115 	stw	zero,68(r16)
10003b20:	008005c4 	movi	r2,23
10003b24:	1184f62e 	bgeu	r2,r6,10004f00 <_dtoa_r+0x1720>
10003b28:	00c00044 	movi	r3,1
10003b2c:	00800104 	movi	r2,4
10003b30:	1085883a 	add	r2,r2,r2
10003b34:	11000504 	addi	r4,r2,20
10003b38:	180b883a 	mov	r5,r3
10003b3c:	18c00044 	addi	r3,r3,1
10003b40:	313ffb2e 	bgeu	r6,r4,10003b30 <__alt_data_end+0xf8003b30>
10003b44:	81401115 	stw	r5,68(r16)
10003b48:	8009883a 	mov	r4,r16
10003b4c:	0006ce40 	call	10006ce4 <_Balloc>
10003b50:	d8800715 	stw	r2,28(sp)
10003b54:	80801015 	stw	r2,64(r16)
10003b58:	00800384 	movi	r2,14
10003b5c:	1440fd36 	bltu	r2,r17,10003f54 <_dtoa_r+0x774>
10003b60:	a000fc26 	beq	r20,zero,10003f54 <_dtoa_r+0x774>
10003b64:	d8800517 	ldw	r2,20(sp)
10003b68:	0083b90e 	bge	zero,r2,10004a50 <_dtoa_r+0x1270>
10003b6c:	d8c00517 	ldw	r3,20(sp)
10003b70:	108003cc 	andi	r2,r2,15
10003b74:	100490fa 	slli	r2,r2,3
10003b78:	182fd13a 	srai	r23,r3,4
10003b7c:	00c40074 	movhi	r3,4097
10003b80:	18c09b04 	addi	r3,r3,620
10003b84:	1885883a 	add	r2,r3,r2
10003b88:	b8c0040c 	andi	r3,r23,16
10003b8c:	12c00017 	ldw	r11,0(r2)
10003b90:	12800117 	ldw	r10,4(r2)
10003b94:	18039726 	beq	r3,zero,100049f4 <_dtoa_r+0x1214>
10003b98:	00840074 	movhi	r2,4097
10003b9c:	10809104 	addi	r2,r2,580
10003ba0:	11800817 	ldw	r6,32(r2)
10003ba4:	11c00917 	ldw	r7,36(r2)
10003ba8:	9009883a 	mov	r4,r18
10003bac:	980b883a 	mov	r5,r19
10003bb0:	da801615 	stw	r10,88(sp)
10003bb4:	dac01515 	stw	r11,84(sp)
10003bb8:	000b9140 	call	1000b914 <__divdf3>
10003bbc:	da801617 	ldw	r10,88(sp)
10003bc0:	dac01517 	ldw	r11,84(sp)
10003bc4:	bdc003cc 	andi	r23,r23,15
10003bc8:	044000c4 	movi	r17,3
10003bcc:	d8800e15 	stw	r2,56(sp)
10003bd0:	182b883a 	mov	r21,r3
10003bd4:	b8001126 	beq	r23,zero,10003c1c <_dtoa_r+0x43c>
10003bd8:	05040074 	movhi	r20,4097
10003bdc:	a5009104 	addi	r20,r20,580
10003be0:	5805883a 	mov	r2,r11
10003be4:	5007883a 	mov	r3,r10
10003be8:	b980004c 	andi	r6,r23,1
10003bec:	1009883a 	mov	r4,r2
10003bf0:	b82fd07a 	srai	r23,r23,1
10003bf4:	180b883a 	mov	r5,r3
10003bf8:	30000426 	beq	r6,zero,10003c0c <_dtoa_r+0x42c>
10003bfc:	a1800017 	ldw	r6,0(r20)
10003c00:	a1c00117 	ldw	r7,4(r20)
10003c04:	8c400044 	addi	r17,r17,1
10003c08:	000c4d80 	call	1000c4d8 <__muldf3>
10003c0c:	a5000204 	addi	r20,r20,8
10003c10:	b83ff51e 	bne	r23,zero,10003be8 <__alt_data_end+0xf8003be8>
10003c14:	1017883a 	mov	r11,r2
10003c18:	1815883a 	mov	r10,r3
10003c1c:	d9000e17 	ldw	r4,56(sp)
10003c20:	a80b883a 	mov	r5,r21
10003c24:	580d883a 	mov	r6,r11
10003c28:	500f883a 	mov	r7,r10
10003c2c:	000b9140 	call	1000b914 <__divdf3>
10003c30:	1029883a 	mov	r20,r2
10003c34:	182b883a 	mov	r21,r3
10003c38:	d9800c17 	ldw	r6,48(sp)
10003c3c:	30000626 	beq	r6,zero,10003c58 <_dtoa_r+0x478>
10003c40:	a009883a 	mov	r4,r20
10003c44:	a80b883a 	mov	r5,r21
10003c48:	000d883a 	mov	r6,zero
10003c4c:	01cffc34 	movhi	r7,16368
10003c50:	000c3f80 	call	1000c3f8 <__ledf2>
10003c54:	10043216 	blt	r2,zero,10004d20 <_dtoa_r+0x1540>
10003c58:	8809883a 	mov	r4,r17
10003c5c:	000d69c0 	call	1000d69c <__floatsidf>
10003c60:	1009883a 	mov	r4,r2
10003c64:	180b883a 	mov	r5,r3
10003c68:	a00d883a 	mov	r6,r20
10003c6c:	a80f883a 	mov	r7,r21
10003c70:	000c4d80 	call	1000c4d8 <__muldf3>
10003c74:	000d883a 	mov	r6,zero
10003c78:	1009883a 	mov	r4,r2
10003c7c:	180b883a 	mov	r5,r3
10003c80:	01d00734 	movhi	r7,16412
10003c84:	000b0780 	call	1000b078 <__adddf3>
10003c88:	1023883a 	mov	r17,r2
10003c8c:	d9800617 	ldw	r6,24(sp)
10003c90:	00bf3034 	movhi	r2,64704
10003c94:	1885883a 	add	r2,r3,r2
10003c98:	d8800e15 	stw	r2,56(sp)
10003c9c:	30032e26 	beq	r6,zero,10004958 <_dtoa_r+0x1178>
10003ca0:	d8c00517 	ldw	r3,20(sp)
10003ca4:	da800617 	ldw	r10,24(sp)
10003ca8:	d8c01215 	stw	r3,72(sp)
10003cac:	d9000b17 	ldw	r4,44(sp)
10003cb0:	2003b026 	beq	r4,zero,10004b74 <_dtoa_r+0x1394>
10003cb4:	50bfffc4 	addi	r2,r10,-1
10003cb8:	100490fa 	slli	r2,r2,3
10003cbc:	00c40074 	movhi	r3,4097
10003cc0:	18c09b04 	addi	r3,r3,620
10003cc4:	1885883a 	add	r2,r3,r2
10003cc8:	11800017 	ldw	r6,0(r2)
10003ccc:	11c00117 	ldw	r7,4(r2)
10003cd0:	d8800717 	ldw	r2,28(sp)
10003cd4:	0009883a 	mov	r4,zero
10003cd8:	014ff834 	movhi	r5,16352
10003cdc:	da801615 	stw	r10,88(sp)
10003ce0:	15c00044 	addi	r23,r2,1
10003ce4:	000b9140 	call	1000b914 <__divdf3>
10003ce8:	d9c00e17 	ldw	r7,56(sp)
10003cec:	880d883a 	mov	r6,r17
10003cf0:	1009883a 	mov	r4,r2
10003cf4:	180b883a 	mov	r5,r3
10003cf8:	000cd440 	call	1000cd44 <__subdf3>
10003cfc:	a80b883a 	mov	r5,r21
10003d00:	a009883a 	mov	r4,r20
10003d04:	d8c01015 	stw	r3,64(sp)
10003d08:	d8800e15 	stw	r2,56(sp)
10003d0c:	000d6140 	call	1000d614 <__fixdfsi>
10003d10:	1009883a 	mov	r4,r2
10003d14:	d8801715 	stw	r2,92(sp)
10003d18:	000d69c0 	call	1000d69c <__floatsidf>
10003d1c:	a009883a 	mov	r4,r20
10003d20:	a80b883a 	mov	r5,r21
10003d24:	100d883a 	mov	r6,r2
10003d28:	180f883a 	mov	r7,r3
10003d2c:	000cd440 	call	1000cd44 <__subdf3>
10003d30:	da001717 	ldw	r8,92(sp)
10003d34:	1829883a 	mov	r20,r3
10003d38:	d8c00717 	ldw	r3,28(sp)
10003d3c:	d9000e17 	ldw	r4,56(sp)
10003d40:	d9401017 	ldw	r5,64(sp)
10003d44:	42000c04 	addi	r8,r8,48
10003d48:	1023883a 	mov	r17,r2
10003d4c:	1a000005 	stb	r8,0(r3)
10003d50:	880d883a 	mov	r6,r17
10003d54:	a00f883a 	mov	r7,r20
10003d58:	402b883a 	mov	r21,r8
10003d5c:	000c3180 	call	1000c318 <__gedf2>
10003d60:	00844516 	blt	zero,r2,10004e78 <_dtoa_r+0x1698>
10003d64:	0009883a 	mov	r4,zero
10003d68:	014ffc34 	movhi	r5,16368
10003d6c:	880d883a 	mov	r6,r17
10003d70:	a00f883a 	mov	r7,r20
10003d74:	000cd440 	call	1000cd44 <__subdf3>
10003d78:	d9000e17 	ldw	r4,56(sp)
10003d7c:	d9401017 	ldw	r5,64(sp)
10003d80:	100d883a 	mov	r6,r2
10003d84:	180f883a 	mov	r7,r3
10003d88:	000c3180 	call	1000c318 <__gedf2>
10003d8c:	da801617 	ldw	r10,88(sp)
10003d90:	00843616 	blt	zero,r2,10004e6c <_dtoa_r+0x168c>
10003d94:	00800044 	movi	r2,1
10003d98:	12806e0e 	bge	r2,r10,10003f54 <_dtoa_r+0x774>
10003d9c:	d9000717 	ldw	r4,28(sp)
10003da0:	dd801315 	stw	r22,76(sp)
10003da4:	dc001115 	stw	r16,68(sp)
10003da8:	2295883a 	add	r10,r4,r10
10003dac:	dcc01415 	stw	r19,80(sp)
10003db0:	502d883a 	mov	r22,r10
10003db4:	dcc01017 	ldw	r19,64(sp)
10003db8:	b821883a 	mov	r16,r23
10003dbc:	dc801015 	stw	r18,64(sp)
10003dc0:	dc800e17 	ldw	r18,56(sp)
10003dc4:	00000906 	br	10003dec <_dtoa_r+0x60c>
10003dc8:	000cd440 	call	1000cd44 <__subdf3>
10003dcc:	1009883a 	mov	r4,r2
10003dd0:	180b883a 	mov	r5,r3
10003dd4:	900d883a 	mov	r6,r18
10003dd8:	980f883a 	mov	r7,r19
10003ddc:	000c3f80 	call	1000c3f8 <__ledf2>
10003de0:	10040e16 	blt	r2,zero,10004e1c <_dtoa_r+0x163c>
10003de4:	b821883a 	mov	r16,r23
10003de8:	bd841026 	beq	r23,r22,10004e2c <_dtoa_r+0x164c>
10003dec:	9009883a 	mov	r4,r18
10003df0:	980b883a 	mov	r5,r19
10003df4:	000d883a 	mov	r6,zero
10003df8:	01d00934 	movhi	r7,16420
10003dfc:	000c4d80 	call	1000c4d8 <__muldf3>
10003e00:	000d883a 	mov	r6,zero
10003e04:	01d00934 	movhi	r7,16420
10003e08:	8809883a 	mov	r4,r17
10003e0c:	a00b883a 	mov	r5,r20
10003e10:	1025883a 	mov	r18,r2
10003e14:	1827883a 	mov	r19,r3
10003e18:	000c4d80 	call	1000c4d8 <__muldf3>
10003e1c:	180b883a 	mov	r5,r3
10003e20:	1009883a 	mov	r4,r2
10003e24:	1823883a 	mov	r17,r3
10003e28:	1029883a 	mov	r20,r2
10003e2c:	000d6140 	call	1000d614 <__fixdfsi>
10003e30:	1009883a 	mov	r4,r2
10003e34:	102b883a 	mov	r21,r2
10003e38:	000d69c0 	call	1000d69c <__floatsidf>
10003e3c:	a009883a 	mov	r4,r20
10003e40:	880b883a 	mov	r5,r17
10003e44:	100d883a 	mov	r6,r2
10003e48:	180f883a 	mov	r7,r3
10003e4c:	000cd440 	call	1000cd44 <__subdf3>
10003e50:	ad400c04 	addi	r21,r21,48
10003e54:	1009883a 	mov	r4,r2
10003e58:	180b883a 	mov	r5,r3
10003e5c:	900d883a 	mov	r6,r18
10003e60:	980f883a 	mov	r7,r19
10003e64:	85400005 	stb	r21,0(r16)
10003e68:	1023883a 	mov	r17,r2
10003e6c:	1829883a 	mov	r20,r3
10003e70:	000c3f80 	call	1000c3f8 <__ledf2>
10003e74:	bdc00044 	addi	r23,r23,1
10003e78:	0009883a 	mov	r4,zero
10003e7c:	014ffc34 	movhi	r5,16368
10003e80:	880d883a 	mov	r6,r17
10003e84:	a00f883a 	mov	r7,r20
10003e88:	103fcf0e 	bge	r2,zero,10003dc8 <__alt_data_end+0xf8003dc8>
10003e8c:	d9801217 	ldw	r6,72(sp)
10003e90:	dc001117 	ldw	r16,68(sp)
10003e94:	d9800515 	stw	r6,20(sp)
10003e98:	8009883a 	mov	r4,r16
10003e9c:	e00b883a 	mov	r5,fp
10003ea0:	0006d8c0 	call	10006d8c <_Bfree>
10003ea4:	d8c00517 	ldw	r3,20(sp)
10003ea8:	d9002317 	ldw	r4,140(sp)
10003eac:	d9802517 	ldw	r6,148(sp)
10003eb0:	b8000005 	stb	zero,0(r23)
10003eb4:	18800044 	addi	r2,r3,1
10003eb8:	20800015 	stw	r2,0(r4)
10003ebc:	30027226 	beq	r6,zero,10004888 <_dtoa_r+0x10a8>
10003ec0:	35c00015 	stw	r23,0(r6)
10003ec4:	d8800717 	ldw	r2,28(sp)
10003ec8:	003e7406 	br	1000389c <__alt_data_end+0xf800389c>
10003ecc:	00800434 	movhi	r2,16
10003ed0:	10bfffc4 	addi	r2,r2,-1
10003ed4:	a8aa703a 	and	r21,r21,r2
10003ed8:	a83e801e 	bne	r21,zero,100038dc <__alt_data_end+0xf80038dc>
10003edc:	00840074 	movhi	r2,4097
10003ee0:	10807c04 	addi	r2,r2,496
10003ee4:	003e7f06 	br	100038e4 <__alt_data_end+0xf80038e4>
10003ee8:	10c00204 	addi	r3,r2,8
10003eec:	003e8206 	br	100038f8 <__alt_data_end+0xf80038f8>
10003ef0:	01400434 	movhi	r5,16
10003ef4:	297fffc4 	addi	r5,r5,-1
10003ef8:	994a703a 	and	r5,r19,r5
10003efc:	9009883a 	mov	r4,r18
10003f00:	8c7f0044 	addi	r17,r17,-1023
10003f04:	294ffc34 	orhi	r5,r5,16368
10003f08:	dd000217 	ldw	r20,8(sp)
10003f0c:	d8000f15 	stw	zero,60(sp)
10003f10:	003e9f06 	br	10003990 <__alt_data_end+0xf8003990>
10003f14:	00840074 	movhi	r2,4097
10003f18:	10807304 	addi	r2,r2,460
10003f1c:	003e5f06 	br	1000389c <__alt_data_end+0xf800389c>
10003f20:	80001115 	stw	zero,68(r16)
10003f24:	8009883a 	mov	r4,r16
10003f28:	000b883a 	mov	r5,zero
10003f2c:	0006ce40 	call	10006ce4 <_Balloc>
10003f30:	01bfffc4 	movi	r6,-1
10003f34:	d8800715 	stw	r2,28(sp)
10003f38:	80801015 	stw	r2,64(r16)
10003f3c:	00800044 	movi	r2,1
10003f40:	d9800615 	stw	r6,24(sp)
10003f44:	d8800b15 	stw	r2,44(sp)
10003f48:	d8002215 	stw	zero,136(sp)
10003f4c:	d9800d15 	stw	r6,52(sp)
10003f50:	d8000315 	stw	zero,12(sp)
10003f54:	d8800117 	ldw	r2,4(sp)
10003f58:	10008e16 	blt	r2,zero,10004194 <_dtoa_r+0x9b4>
10003f5c:	d9000517 	ldw	r4,20(sp)
10003f60:	00c00384 	movi	r3,14
10003f64:	19008b16 	blt	r3,r4,10004194 <_dtoa_r+0x9b4>
10003f68:	200490fa 	slli	r2,r4,3
10003f6c:	00c40074 	movhi	r3,4097
10003f70:	d9802217 	ldw	r6,136(sp)
10003f74:	18c09b04 	addi	r3,r3,620
10003f78:	1885883a 	add	r2,r3,r2
10003f7c:	14400017 	ldw	r17,0(r2)
10003f80:	15000117 	ldw	r20,4(r2)
10003f84:	3001c716 	blt	r6,zero,100046a4 <_dtoa_r+0xec4>
10003f88:	880d883a 	mov	r6,r17
10003f8c:	a00f883a 	mov	r7,r20
10003f90:	9009883a 	mov	r4,r18
10003f94:	980b883a 	mov	r5,r19
10003f98:	000b9140 	call	1000b914 <__divdf3>
10003f9c:	180b883a 	mov	r5,r3
10003fa0:	1009883a 	mov	r4,r2
10003fa4:	000d6140 	call	1000d614 <__fixdfsi>
10003fa8:	1009883a 	mov	r4,r2
10003fac:	102d883a 	mov	r22,r2
10003fb0:	000d69c0 	call	1000d69c <__floatsidf>
10003fb4:	1009883a 	mov	r4,r2
10003fb8:	180b883a 	mov	r5,r3
10003fbc:	880d883a 	mov	r6,r17
10003fc0:	a00f883a 	mov	r7,r20
10003fc4:	000c4d80 	call	1000c4d8 <__muldf3>
10003fc8:	9009883a 	mov	r4,r18
10003fcc:	980b883a 	mov	r5,r19
10003fd0:	100d883a 	mov	r6,r2
10003fd4:	180f883a 	mov	r7,r3
10003fd8:	000cd440 	call	1000cd44 <__subdf3>
10003fdc:	d9000717 	ldw	r4,28(sp)
10003fe0:	d9800617 	ldw	r6,24(sp)
10003fe4:	180b883a 	mov	r5,r3
10003fe8:	b0c00c04 	addi	r3,r22,48
10003fec:	20c00005 	stb	r3,0(r4)
10003ff0:	25c00044 	addi	r23,r4,1
10003ff4:	01000044 	movi	r4,1
10003ff8:	1011883a 	mov	r8,r2
10003ffc:	2807883a 	mov	r3,r5
10004000:	31003d26 	beq	r6,r4,100040f8 <_dtoa_r+0x918>
10004004:	000d883a 	mov	r6,zero
10004008:	01d00934 	movhi	r7,16420
1000400c:	1009883a 	mov	r4,r2
10004010:	000c4d80 	call	1000c4d8 <__muldf3>
10004014:	1009883a 	mov	r4,r2
10004018:	180b883a 	mov	r5,r3
1000401c:	000d883a 	mov	r6,zero
10004020:	000f883a 	mov	r7,zero
10004024:	1027883a 	mov	r19,r2
10004028:	182b883a 	mov	r21,r3
1000402c:	000c2940 	call	1000c294 <__eqdf2>
10004030:	103f9926 	beq	r2,zero,10003e98 <__alt_data_end+0xf8003e98>
10004034:	d8c00617 	ldw	r3,24(sp)
10004038:	d9000717 	ldw	r4,28(sp)
1000403c:	b825883a 	mov	r18,r23
10004040:	18bfffc4 	addi	r2,r3,-1
10004044:	20ad883a 	add	r22,r4,r2
10004048:	dc000315 	stw	r16,12(sp)
1000404c:	00000a06 	br	10004078 <_dtoa_r+0x898>
10004050:	000c4d80 	call	1000c4d8 <__muldf3>
10004054:	1009883a 	mov	r4,r2
10004058:	180b883a 	mov	r5,r3
1000405c:	000d883a 	mov	r6,zero
10004060:	000f883a 	mov	r7,zero
10004064:	1027883a 	mov	r19,r2
10004068:	182b883a 	mov	r21,r3
1000406c:	b825883a 	mov	r18,r23
10004070:	000c2940 	call	1000c294 <__eqdf2>
10004074:	10022626 	beq	r2,zero,10004910 <_dtoa_r+0x1130>
10004078:	880d883a 	mov	r6,r17
1000407c:	a00f883a 	mov	r7,r20
10004080:	9809883a 	mov	r4,r19
10004084:	a80b883a 	mov	r5,r21
10004088:	000b9140 	call	1000b914 <__divdf3>
1000408c:	180b883a 	mov	r5,r3
10004090:	1009883a 	mov	r4,r2
10004094:	000d6140 	call	1000d614 <__fixdfsi>
10004098:	1009883a 	mov	r4,r2
1000409c:	1021883a 	mov	r16,r2
100040a0:	000d69c0 	call	1000d69c <__floatsidf>
100040a4:	1009883a 	mov	r4,r2
100040a8:	180b883a 	mov	r5,r3
100040ac:	880d883a 	mov	r6,r17
100040b0:	a00f883a 	mov	r7,r20
100040b4:	000c4d80 	call	1000c4d8 <__muldf3>
100040b8:	9809883a 	mov	r4,r19
100040bc:	a80b883a 	mov	r5,r21
100040c0:	100d883a 	mov	r6,r2
100040c4:	180f883a 	mov	r7,r3
100040c8:	000cd440 	call	1000cd44 <__subdf3>
100040cc:	82000c04 	addi	r8,r16,48
100040d0:	92000005 	stb	r8,0(r18)
100040d4:	1009883a 	mov	r4,r2
100040d8:	180b883a 	mov	r5,r3
100040dc:	000d883a 	mov	r6,zero
100040e0:	01d00934 	movhi	r7,16420
100040e4:	1011883a 	mov	r8,r2
100040e8:	bdc00044 	addi	r23,r23,1
100040ec:	95bfd81e 	bne	r18,r22,10004050 <__alt_data_end+0xf8004050>
100040f0:	802d883a 	mov	r22,r16
100040f4:	dc000317 	ldw	r16,12(sp)
100040f8:	4009883a 	mov	r4,r8
100040fc:	180b883a 	mov	r5,r3
10004100:	400d883a 	mov	r6,r8
10004104:	180f883a 	mov	r7,r3
10004108:	000b0780 	call	1000b078 <__adddf3>
1000410c:	8809883a 	mov	r4,r17
10004110:	a00b883a 	mov	r5,r20
10004114:	100d883a 	mov	r6,r2
10004118:	180f883a 	mov	r7,r3
1000411c:	1027883a 	mov	r19,r2
10004120:	1825883a 	mov	r18,r3
10004124:	000c3f80 	call	1000c3f8 <__ledf2>
10004128:	10000816 	blt	r2,zero,1000414c <_dtoa_r+0x96c>
1000412c:	8809883a 	mov	r4,r17
10004130:	a00b883a 	mov	r5,r20
10004134:	980d883a 	mov	r6,r19
10004138:	900f883a 	mov	r7,r18
1000413c:	000c2940 	call	1000c294 <__eqdf2>
10004140:	103f551e 	bne	r2,zero,10003e98 <__alt_data_end+0xf8003e98>
10004144:	b580004c 	andi	r22,r22,1
10004148:	b03f5326 	beq	r22,zero,10003e98 <__alt_data_end+0xf8003e98>
1000414c:	bd7fffc3 	ldbu	r21,-1(r23)
10004150:	b8bfffc4 	addi	r2,r23,-1
10004154:	1007883a 	mov	r3,r2
10004158:	01400e44 	movi	r5,57
1000415c:	d9800717 	ldw	r6,28(sp)
10004160:	00000506 	br	10004178 <_dtoa_r+0x998>
10004164:	18ffffc4 	addi	r3,r3,-1
10004168:	30825e26 	beq	r6,r2,10004ae4 <_dtoa_r+0x1304>
1000416c:	1d400003 	ldbu	r21,0(r3)
10004170:	102f883a 	mov	r23,r2
10004174:	10bfffc4 	addi	r2,r2,-1
10004178:	a9003fcc 	andi	r4,r21,255
1000417c:	2100201c 	xori	r4,r4,128
10004180:	213fe004 	addi	r4,r4,-128
10004184:	217ff726 	beq	r4,r5,10004164 <__alt_data_end+0xf8004164>
10004188:	aa000044 	addi	r8,r21,1
1000418c:	12000005 	stb	r8,0(r2)
10004190:	003f4106 	br	10003e98 <__alt_data_end+0xf8003e98>
10004194:	d8c00b17 	ldw	r3,44(sp)
10004198:	18006726 	beq	r3,zero,10004338 <_dtoa_r+0xb58>
1000419c:	d9000317 	ldw	r4,12(sp)
100041a0:	00c00044 	movi	r3,1
100041a4:	19016a0e 	bge	r3,r4,10004750 <_dtoa_r+0xf70>
100041a8:	d8800617 	ldw	r2,24(sp)
100041ac:	d8c00917 	ldw	r3,36(sp)
100041b0:	157fffc4 	addi	r21,r2,-1
100041b4:	1d420716 	blt	r3,r21,100049d4 <_dtoa_r+0x11f4>
100041b8:	1d6bc83a 	sub	r21,r3,r21
100041bc:	d8800617 	ldw	r2,24(sp)
100041c0:	1002c716 	blt	r2,zero,10004ce0 <_dtoa_r+0x1500>
100041c4:	dd000817 	ldw	r20,32(sp)
100041c8:	d8800617 	ldw	r2,24(sp)
100041cc:	d9800817 	ldw	r6,32(sp)
100041d0:	8009883a 	mov	r4,r16
100041d4:	01400044 	movi	r5,1
100041d8:	308d883a 	add	r6,r6,r2
100041dc:	d9800815 	stw	r6,32(sp)
100041e0:	b0ad883a 	add	r22,r22,r2
100041e4:	000710c0 	call	1000710c <__i2b>
100041e8:	1023883a 	mov	r17,r2
100041ec:	a0000826 	beq	r20,zero,10004210 <_dtoa_r+0xa30>
100041f0:	0580070e 	bge	zero,r22,10004210 <_dtoa_r+0xa30>
100041f4:	b005883a 	mov	r2,r22
100041f8:	a5812016 	blt	r20,r22,1000467c <_dtoa_r+0xe9c>
100041fc:	d8c00817 	ldw	r3,32(sp)
10004200:	a0a9c83a 	sub	r20,r20,r2
10004204:	b0adc83a 	sub	r22,r22,r2
10004208:	1887c83a 	sub	r3,r3,r2
1000420c:	d8c00815 	stw	r3,32(sp)
10004210:	d9000917 	ldw	r4,36(sp)
10004214:	0100140e 	bge	zero,r4,10004268 <_dtoa_r+0xa88>
10004218:	d9800b17 	ldw	r6,44(sp)
1000421c:	3001e526 	beq	r6,zero,100049b4 <_dtoa_r+0x11d4>
10004220:	05400e0e 	bge	zero,r21,1000425c <_dtoa_r+0xa7c>
10004224:	880b883a 	mov	r5,r17
10004228:	8009883a 	mov	r4,r16
1000422c:	a80d883a 	mov	r6,r21
10004230:	00073d80 	call	100073d8 <__pow5mult>
10004234:	e00d883a 	mov	r6,fp
10004238:	8009883a 	mov	r4,r16
1000423c:	100b883a 	mov	r5,r2
10004240:	1023883a 	mov	r17,r2
10004244:	00071480 	call	10007148 <__multiply>
10004248:	102f883a 	mov	r23,r2
1000424c:	e00b883a 	mov	r5,fp
10004250:	8009883a 	mov	r4,r16
10004254:	0006d8c0 	call	10006d8c <_Bfree>
10004258:	b839883a 	mov	fp,r23
1000425c:	d8800917 	ldw	r2,36(sp)
10004260:	154dc83a 	sub	r6,r2,r21
10004264:	3001281e 	bne	r6,zero,10004708 <_dtoa_r+0xf28>
10004268:	05c00044 	movi	r23,1
1000426c:	8009883a 	mov	r4,r16
10004270:	b80b883a 	mov	r5,r23
10004274:	000710c0 	call	1000710c <__i2b>
10004278:	d8c00a17 	ldw	r3,40(sp)
1000427c:	102b883a 	mov	r21,r2
10004280:	00c0310e 	bge	zero,r3,10004348 <_dtoa_r+0xb68>
10004284:	8009883a 	mov	r4,r16
10004288:	100b883a 	mov	r5,r2
1000428c:	180d883a 	mov	r6,r3
10004290:	00073d80 	call	100073d8 <__pow5mult>
10004294:	d9000317 	ldw	r4,12(sp)
10004298:	102b883a 	mov	r21,r2
1000429c:	b9011f0e 	bge	r23,r4,1000471c <_dtoa_r+0xf3c>
100042a0:	0027883a 	mov	r19,zero
100042a4:	a8800417 	ldw	r2,16(r21)
100042a8:	10800104 	addi	r2,r2,4
100042ac:	1085883a 	add	r2,r2,r2
100042b0:	1085883a 	add	r2,r2,r2
100042b4:	a885883a 	add	r2,r21,r2
100042b8:	11000017 	ldw	r4,0(r2)
100042bc:	0006ff40 	call	10006ff4 <__hi0bits>
100042c0:	00c00804 	movi	r3,32
100042c4:	1885c83a 	sub	r2,r3,r2
100042c8:	00002506 	br	10004360 <_dtoa_r+0xb80>
100042cc:	01800044 	movi	r6,1
100042d0:	d9800c15 	stw	r6,48(sp)
100042d4:	003dec06 	br	10003a88 <__alt_data_end+0xf8003a88>
100042d8:	d8c00817 	ldw	r3,32(sp)
100042dc:	d9000517 	ldw	r4,20(sp)
100042e0:	d8000a15 	stw	zero,40(sp)
100042e4:	1907c83a 	sub	r3,r3,r4
100042e8:	010dc83a 	sub	r6,zero,r4
100042ec:	d8c00815 	stw	r3,32(sp)
100042f0:	d9800915 	stw	r6,36(sp)
100042f4:	003ded06 	br	10003aac <__alt_data_end+0xf8003aac>
100042f8:	05adc83a 	sub	r22,zero,r22
100042fc:	dd800815 	stw	r22,32(sp)
10004300:	002d883a 	mov	r22,zero
10004304:	003de406 	br	10003a98 <__alt_data_end+0xf8003a98>
10004308:	d9000517 	ldw	r4,20(sp)
1000430c:	000d69c0 	call	1000d69c <__floatsidf>
10004310:	1009883a 	mov	r4,r2
10004314:	180b883a 	mov	r5,r3
10004318:	b00d883a 	mov	r6,r22
1000431c:	a80f883a 	mov	r7,r21
10004320:	000c2940 	call	1000c294 <__eqdf2>
10004324:	103dc726 	beq	r2,zero,10003a44 <__alt_data_end+0xf8003a44>
10004328:	d8800517 	ldw	r2,20(sp)
1000432c:	10bfffc4 	addi	r2,r2,-1
10004330:	d8800515 	stw	r2,20(sp)
10004334:	003dc306 	br	10003a44 <__alt_data_end+0xf8003a44>
10004338:	dd400917 	ldw	r21,36(sp)
1000433c:	dd000817 	ldw	r20,32(sp)
10004340:	0023883a 	mov	r17,zero
10004344:	003fa906 	br	100041ec <__alt_data_end+0xf80041ec>
10004348:	d9800317 	ldw	r6,12(sp)
1000434c:	b981670e 	bge	r23,r6,100048ec <_dtoa_r+0x110c>
10004350:	0027883a 	mov	r19,zero
10004354:	d8c00a17 	ldw	r3,40(sp)
10004358:	183fd21e 	bne	r3,zero,100042a4 <__alt_data_end+0xf80042a4>
1000435c:	00800044 	movi	r2,1
10004360:	1585883a 	add	r2,r2,r22
10004364:	108007cc 	andi	r2,r2,31
10004368:	10005f26 	beq	r2,zero,100044e8 <_dtoa_r+0xd08>
1000436c:	00c00804 	movi	r3,32
10004370:	1887c83a 	sub	r3,r3,r2
10004374:	01000104 	movi	r4,4
10004378:	20c2dd0e 	bge	r4,r3,10004ef0 <_dtoa_r+0x1710>
1000437c:	d9000817 	ldw	r4,32(sp)
10004380:	00c00704 	movi	r3,28
10004384:	1885c83a 	sub	r2,r3,r2
10004388:	2089883a 	add	r4,r4,r2
1000438c:	d9000815 	stw	r4,32(sp)
10004390:	a0a9883a 	add	r20,r20,r2
10004394:	b0ad883a 	add	r22,r22,r2
10004398:	d8800817 	ldw	r2,32(sp)
1000439c:	0080050e 	bge	zero,r2,100043b4 <_dtoa_r+0xbd4>
100043a0:	e00b883a 	mov	r5,fp
100043a4:	8009883a 	mov	r4,r16
100043a8:	100d883a 	mov	r6,r2
100043ac:	00075180 	call	10007518 <__lshift>
100043b0:	1039883a 	mov	fp,r2
100043b4:	0580050e 	bge	zero,r22,100043cc <_dtoa_r+0xbec>
100043b8:	a80b883a 	mov	r5,r21
100043bc:	8009883a 	mov	r4,r16
100043c0:	b00d883a 	mov	r6,r22
100043c4:	00075180 	call	10007518 <__lshift>
100043c8:	102b883a 	mov	r21,r2
100043cc:	d8c00c17 	ldw	r3,48(sp)
100043d0:	1801161e 	bne	r3,zero,1000482c <_dtoa_r+0x104c>
100043d4:	d8c00617 	ldw	r3,24(sp)
100043d8:	00c12d0e 	bge	zero,r3,10004890 <_dtoa_r+0x10b0>
100043dc:	d8c00b17 	ldw	r3,44(sp)
100043e0:	1800571e 	bne	r3,zero,10004540 <_dtoa_r+0xd60>
100043e4:	dc800717 	ldw	r18,28(sp)
100043e8:	dcc00617 	ldw	r19,24(sp)
100043ec:	9029883a 	mov	r20,r18
100043f0:	00000206 	br	100043fc <_dtoa_r+0xc1c>
100043f4:	0006db40 	call	10006db4 <__multadd>
100043f8:	1039883a 	mov	fp,r2
100043fc:	e009883a 	mov	r4,fp
10004400:	a80b883a 	mov	r5,r21
10004404:	00035b80 	call	100035b8 <quorem>
10004408:	10800c04 	addi	r2,r2,48
1000440c:	90800005 	stb	r2,0(r18)
10004410:	94800044 	addi	r18,r18,1
10004414:	9507c83a 	sub	r3,r18,r20
10004418:	8009883a 	mov	r4,r16
1000441c:	e00b883a 	mov	r5,fp
10004420:	01800284 	movi	r6,10
10004424:	000f883a 	mov	r7,zero
10004428:	1cfff216 	blt	r3,r19,100043f4 <__alt_data_end+0xf80043f4>
1000442c:	1011883a 	mov	r8,r2
10004430:	d8800617 	ldw	r2,24(sp)
10004434:	00822e0e 	bge	zero,r2,10004cf0 <_dtoa_r+0x1510>
10004438:	d9000717 	ldw	r4,28(sp)
1000443c:	0025883a 	mov	r18,zero
10004440:	20af883a 	add	r23,r4,r2
10004444:	e00b883a 	mov	r5,fp
10004448:	01800044 	movi	r6,1
1000444c:	8009883a 	mov	r4,r16
10004450:	da001715 	stw	r8,92(sp)
10004454:	00075180 	call	10007518 <__lshift>
10004458:	1009883a 	mov	r4,r2
1000445c:	a80b883a 	mov	r5,r21
10004460:	1039883a 	mov	fp,r2
10004464:	00076600 	call	10007660 <__mcmp>
10004468:	da001717 	ldw	r8,92(sp)
1000446c:	00816e0e 	bge	zero,r2,10004a28 <_dtoa_r+0x1248>
10004470:	b93fffc3 	ldbu	r4,-1(r23)
10004474:	b8bfffc4 	addi	r2,r23,-1
10004478:	1007883a 	mov	r3,r2
1000447c:	01800e44 	movi	r6,57
10004480:	d9c00717 	ldw	r7,28(sp)
10004484:	00000506 	br	1000449c <_dtoa_r+0xcbc>
10004488:	18ffffc4 	addi	r3,r3,-1
1000448c:	38811926 	beq	r7,r2,100048f4 <_dtoa_r+0x1114>
10004490:	19000003 	ldbu	r4,0(r3)
10004494:	102f883a 	mov	r23,r2
10004498:	10bfffc4 	addi	r2,r2,-1
1000449c:	21403fcc 	andi	r5,r4,255
100044a0:	2940201c 	xori	r5,r5,128
100044a4:	297fe004 	addi	r5,r5,-128
100044a8:	29bff726 	beq	r5,r6,10004488 <__alt_data_end+0xf8004488>
100044ac:	21000044 	addi	r4,r4,1
100044b0:	11000005 	stb	r4,0(r2)
100044b4:	8009883a 	mov	r4,r16
100044b8:	a80b883a 	mov	r5,r21
100044bc:	0006d8c0 	call	10006d8c <_Bfree>
100044c0:	883e7526 	beq	r17,zero,10003e98 <__alt_data_end+0xf8003e98>
100044c4:	90000426 	beq	r18,zero,100044d8 <_dtoa_r+0xcf8>
100044c8:	94400326 	beq	r18,r17,100044d8 <_dtoa_r+0xcf8>
100044cc:	8009883a 	mov	r4,r16
100044d0:	900b883a 	mov	r5,r18
100044d4:	0006d8c0 	call	10006d8c <_Bfree>
100044d8:	8009883a 	mov	r4,r16
100044dc:	880b883a 	mov	r5,r17
100044e0:	0006d8c0 	call	10006d8c <_Bfree>
100044e4:	003e6c06 	br	10003e98 <__alt_data_end+0xf8003e98>
100044e8:	00800704 	movi	r2,28
100044ec:	d9800817 	ldw	r6,32(sp)
100044f0:	a0a9883a 	add	r20,r20,r2
100044f4:	b0ad883a 	add	r22,r22,r2
100044f8:	308d883a 	add	r6,r6,r2
100044fc:	d9800815 	stw	r6,32(sp)
10004500:	003fa506 	br	10004398 <__alt_data_end+0xf8004398>
10004504:	013efb84 	movi	r4,-1042
10004508:	246bc83a 	sub	r21,r4,r17
1000450c:	9548983a 	sll	r4,r18,r21
10004510:	003d1806 	br	10003974 <__alt_data_end+0xf8003974>
10004514:	d8000c15 	stw	zero,48(sp)
10004518:	003d5b06 	br	10003a88 <__alt_data_end+0xf8003a88>
1000451c:	880b883a 	mov	r5,r17
10004520:	8009883a 	mov	r4,r16
10004524:	01800284 	movi	r6,10
10004528:	000f883a 	mov	r7,zero
1000452c:	0006db40 	call	10006db4 <__multadd>
10004530:	1023883a 	mov	r17,r2
10004534:	d8800d17 	ldw	r2,52(sp)
10004538:	0082550e 	bge	zero,r2,10004e90 <_dtoa_r+0x16b0>
1000453c:	d8800615 	stw	r2,24(sp)
10004540:	0500050e 	bge	zero,r20,10004558 <_dtoa_r+0xd78>
10004544:	880b883a 	mov	r5,r17
10004548:	8009883a 	mov	r4,r16
1000454c:	a00d883a 	mov	r6,r20
10004550:	00075180 	call	10007518 <__lshift>
10004554:	1023883a 	mov	r17,r2
10004558:	98016a1e 	bne	r19,zero,10004b04 <_dtoa_r+0x1324>
1000455c:	8829883a 	mov	r20,r17
10004560:	d9000617 	ldw	r4,24(sp)
10004564:	dcc00717 	ldw	r19,28(sp)
10004568:	9480004c 	andi	r18,r18,1
1000456c:	20bfffc4 	addi	r2,r4,-1
10004570:	9885883a 	add	r2,r19,r2
10004574:	d8800415 	stw	r2,16(sp)
10004578:	dc800615 	stw	r18,24(sp)
1000457c:	e009883a 	mov	r4,fp
10004580:	a80b883a 	mov	r5,r21
10004584:	00035b80 	call	100035b8 <quorem>
10004588:	e009883a 	mov	r4,fp
1000458c:	880b883a 	mov	r5,r17
10004590:	102f883a 	mov	r23,r2
10004594:	00076600 	call	10007660 <__mcmp>
10004598:	8009883a 	mov	r4,r16
1000459c:	a80b883a 	mov	r5,r21
100045a0:	a00d883a 	mov	r6,r20
100045a4:	102d883a 	mov	r22,r2
100045a8:	00076c00 	call	100076c0 <__mdiff>
100045ac:	1007883a 	mov	r3,r2
100045b0:	10800317 	ldw	r2,12(r2)
100045b4:	bc800c04 	addi	r18,r23,48
100045b8:	1000971e 	bne	r2,zero,10004818 <_dtoa_r+0x1038>
100045bc:	180b883a 	mov	r5,r3
100045c0:	e009883a 	mov	r4,fp
100045c4:	d8c01515 	stw	r3,84(sp)
100045c8:	00076600 	call	10007660 <__mcmp>
100045cc:	d8c01517 	ldw	r3,84(sp)
100045d0:	8009883a 	mov	r4,r16
100045d4:	d8801515 	stw	r2,84(sp)
100045d8:	180b883a 	mov	r5,r3
100045dc:	0006d8c0 	call	10006d8c <_Bfree>
100045e0:	d8801517 	ldw	r2,84(sp)
100045e4:	1000041e 	bne	r2,zero,100045f8 <_dtoa_r+0xe18>
100045e8:	d9800317 	ldw	r6,12(sp)
100045ec:	3000021e 	bne	r6,zero,100045f8 <_dtoa_r+0xe18>
100045f0:	d8c00617 	ldw	r3,24(sp)
100045f4:	18007626 	beq	r3,zero,100047d0 <_dtoa_r+0xff0>
100045f8:	b0005b16 	blt	r22,zero,10004768 <_dtoa_r+0xf88>
100045fc:	b000041e 	bne	r22,zero,10004610 <_dtoa_r+0xe30>
10004600:	d9000317 	ldw	r4,12(sp)
10004604:	2000021e 	bne	r4,zero,10004610 <_dtoa_r+0xe30>
10004608:	d8c00617 	ldw	r3,24(sp)
1000460c:	18005626 	beq	r3,zero,10004768 <_dtoa_r+0xf88>
10004610:	00814d16 	blt	zero,r2,10004b48 <_dtoa_r+0x1368>
10004614:	d8c00417 	ldw	r3,16(sp)
10004618:	9d800044 	addi	r22,r19,1
1000461c:	9c800005 	stb	r18,0(r19)
10004620:	b02f883a 	mov	r23,r22
10004624:	98c14c26 	beq	r19,r3,10004b58 <_dtoa_r+0x1378>
10004628:	e00b883a 	mov	r5,fp
1000462c:	8009883a 	mov	r4,r16
10004630:	01800284 	movi	r6,10
10004634:	000f883a 	mov	r7,zero
10004638:	0006db40 	call	10006db4 <__multadd>
1000463c:	1039883a 	mov	fp,r2
10004640:	8d006d26 	beq	r17,r20,100047f8 <_dtoa_r+0x1018>
10004644:	880b883a 	mov	r5,r17
10004648:	01800284 	movi	r6,10
1000464c:	000f883a 	mov	r7,zero
10004650:	8009883a 	mov	r4,r16
10004654:	0006db40 	call	10006db4 <__multadd>
10004658:	a00b883a 	mov	r5,r20
1000465c:	8009883a 	mov	r4,r16
10004660:	01800284 	movi	r6,10
10004664:	000f883a 	mov	r7,zero
10004668:	1023883a 	mov	r17,r2
1000466c:	0006db40 	call	10006db4 <__multadd>
10004670:	1029883a 	mov	r20,r2
10004674:	b027883a 	mov	r19,r22
10004678:	003fc006 	br	1000457c <__alt_data_end+0xf800457c>
1000467c:	a005883a 	mov	r2,r20
10004680:	003ede06 	br	100041fc <__alt_data_end+0xf80041fc>
10004684:	01000044 	movi	r4,1
10004688:	d9000b15 	stw	r4,44(sp)
1000468c:	d9802217 	ldw	r6,136(sp)
10004690:	0180dc0e 	bge	zero,r6,10004a04 <_dtoa_r+0x1224>
10004694:	3023883a 	mov	r17,r6
10004698:	d9800d15 	stw	r6,52(sp)
1000469c:	d9800615 	stw	r6,24(sp)
100046a0:	003d1e06 	br	10003b1c <__alt_data_end+0xf8003b1c>
100046a4:	d8800617 	ldw	r2,24(sp)
100046a8:	00be3716 	blt	zero,r2,10003f88 <__alt_data_end+0xf8003f88>
100046ac:	1000be1e 	bne	r2,zero,100049a8 <_dtoa_r+0x11c8>
100046b0:	8809883a 	mov	r4,r17
100046b4:	a00b883a 	mov	r5,r20
100046b8:	000d883a 	mov	r6,zero
100046bc:	01d00534 	movhi	r7,16404
100046c0:	000c4d80 	call	1000c4d8 <__muldf3>
100046c4:	1009883a 	mov	r4,r2
100046c8:	180b883a 	mov	r5,r3
100046cc:	900d883a 	mov	r6,r18
100046d0:	980f883a 	mov	r7,r19
100046d4:	000c3180 	call	1000c318 <__gedf2>
100046d8:	002b883a 	mov	r21,zero
100046dc:	0023883a 	mov	r17,zero
100046e0:	10007a16 	blt	r2,zero,100048cc <_dtoa_r+0x10ec>
100046e4:	d9002217 	ldw	r4,136(sp)
100046e8:	ddc00717 	ldw	r23,28(sp)
100046ec:	0108303a 	nor	r4,zero,r4
100046f0:	d9000515 	stw	r4,20(sp)
100046f4:	8009883a 	mov	r4,r16
100046f8:	a80b883a 	mov	r5,r21
100046fc:	0006d8c0 	call	10006d8c <_Bfree>
10004700:	883f751e 	bne	r17,zero,100044d8 <__alt_data_end+0xf80044d8>
10004704:	003de406 	br	10003e98 <__alt_data_end+0xf8003e98>
10004708:	e00b883a 	mov	r5,fp
1000470c:	8009883a 	mov	r4,r16
10004710:	00073d80 	call	100073d8 <__pow5mult>
10004714:	1039883a 	mov	fp,r2
10004718:	003ed306 	br	10004268 <__alt_data_end+0xf8004268>
1000471c:	903ee01e 	bne	r18,zero,100042a0 <__alt_data_end+0xf80042a0>
10004720:	00800434 	movhi	r2,16
10004724:	10bfffc4 	addi	r2,r2,-1
10004728:	9884703a 	and	r2,r19,r2
1000472c:	103f081e 	bne	r2,zero,10004350 <__alt_data_end+0xf8004350>
10004730:	9cdffc2c 	andhi	r19,r19,32752
10004734:	983f0626 	beq	r19,zero,10004350 <__alt_data_end+0xf8004350>
10004738:	d8800817 	ldw	r2,32(sp)
1000473c:	b5800044 	addi	r22,r22,1
10004740:	04c00044 	movi	r19,1
10004744:	10800044 	addi	r2,r2,1
10004748:	d8800815 	stw	r2,32(sp)
1000474c:	003f0106 	br	10004354 <__alt_data_end+0xf8004354>
10004750:	d9800f17 	ldw	r6,60(sp)
10004754:	30016826 	beq	r6,zero,10004cf8 <_dtoa_r+0x1518>
10004758:	10810cc4 	addi	r2,r2,1075
1000475c:	dd400917 	ldw	r21,36(sp)
10004760:	dd000817 	ldw	r20,32(sp)
10004764:	003e9906 	br	100041cc <__alt_data_end+0xf80041cc>
10004768:	9011883a 	mov	r8,r18
1000476c:	4007883a 	mov	r3,r8
10004770:	e02d883a 	mov	r22,fp
10004774:	0080100e 	bge	zero,r2,100047b8 <_dtoa_r+0xfd8>
10004778:	01800044 	movi	r6,1
1000477c:	8009883a 	mov	r4,r16
10004780:	e00b883a 	mov	r5,fp
10004784:	da001515 	stw	r8,84(sp)
10004788:	da001715 	stw	r8,92(sp)
1000478c:	00075180 	call	10007518 <__lshift>
10004790:	1009883a 	mov	r4,r2
10004794:	a80b883a 	mov	r5,r21
10004798:	102d883a 	mov	r22,r2
1000479c:	00076600 	call	10007660 <__mcmp>
100047a0:	d8c01517 	ldw	r3,84(sp)
100047a4:	da001717 	ldw	r8,92(sp)
100047a8:	0081a50e 	bge	zero,r2,10004e40 <_dtoa_r+0x1660>
100047ac:	00800e44 	movi	r2,57
100047b0:	40817b26 	beq	r8,r2,10004da0 <_dtoa_r+0x15c0>
100047b4:	40c00044 	addi	r3,r8,1
100047b8:	8825883a 	mov	r18,r17
100047bc:	9dc00044 	addi	r23,r19,1
100047c0:	98c00005 	stb	r3,0(r19)
100047c4:	a023883a 	mov	r17,r20
100047c8:	b039883a 	mov	fp,r22
100047cc:	003f3906 	br	100044b4 <__alt_data_end+0xf80044b4>
100047d0:	00800e44 	movi	r2,57
100047d4:	9011883a 	mov	r8,r18
100047d8:	90817226 	beq	r18,r2,10004da4 <_dtoa_r+0x15c4>
100047dc:	0580010e 	bge	zero,r22,100047e4 <_dtoa_r+0x1004>
100047e0:	ba000c44 	addi	r8,r23,49
100047e4:	8825883a 	mov	r18,r17
100047e8:	9dc00044 	addi	r23,r19,1
100047ec:	9a000005 	stb	r8,0(r19)
100047f0:	a023883a 	mov	r17,r20
100047f4:	003f2f06 	br	100044b4 <__alt_data_end+0xf80044b4>
100047f8:	880b883a 	mov	r5,r17
100047fc:	8009883a 	mov	r4,r16
10004800:	01800284 	movi	r6,10
10004804:	000f883a 	mov	r7,zero
10004808:	0006db40 	call	10006db4 <__multadd>
1000480c:	1023883a 	mov	r17,r2
10004810:	1029883a 	mov	r20,r2
10004814:	003f9706 	br	10004674 <__alt_data_end+0xf8004674>
10004818:	8009883a 	mov	r4,r16
1000481c:	180b883a 	mov	r5,r3
10004820:	0006d8c0 	call	10006d8c <_Bfree>
10004824:	00800044 	movi	r2,1
10004828:	003f7306 	br	100045f8 <__alt_data_end+0xf80045f8>
1000482c:	e009883a 	mov	r4,fp
10004830:	a80b883a 	mov	r5,r21
10004834:	00076600 	call	10007660 <__mcmp>
10004838:	103ee60e 	bge	r2,zero,100043d4 <__alt_data_end+0xf80043d4>
1000483c:	8009883a 	mov	r4,r16
10004840:	e00b883a 	mov	r5,fp
10004844:	01800284 	movi	r6,10
10004848:	000f883a 	mov	r7,zero
1000484c:	0006db40 	call	10006db4 <__multadd>
10004850:	d9000517 	ldw	r4,20(sp)
10004854:	d9800b17 	ldw	r6,44(sp)
10004858:	1039883a 	mov	fp,r2
1000485c:	213fffc4 	addi	r4,r4,-1
10004860:	d9000515 	stw	r4,20(sp)
10004864:	303f2d1e 	bne	r6,zero,1000451c <__alt_data_end+0xf800451c>
10004868:	d9000d17 	ldw	r4,52(sp)
1000486c:	0101780e 	bge	zero,r4,10004e50 <_dtoa_r+0x1670>
10004870:	d9000615 	stw	r4,24(sp)
10004874:	003edb06 	br	100043e4 <__alt_data_end+0xf80043e4>
10004878:	00800084 	movi	r2,2
1000487c:	30818e1e 	bne	r6,r2,10004eb8 <_dtoa_r+0x16d8>
10004880:	d8000b15 	stw	zero,44(sp)
10004884:	003f8106 	br	1000468c <__alt_data_end+0xf800468c>
10004888:	d8800717 	ldw	r2,28(sp)
1000488c:	003c0306 	br	1000389c <__alt_data_end+0xf800389c>
10004890:	d9000317 	ldw	r4,12(sp)
10004894:	00800084 	movi	r2,2
10004898:	113ed00e 	bge	r2,r4,100043dc <__alt_data_end+0xf80043dc>
1000489c:	d8c00617 	ldw	r3,24(sp)
100048a0:	183f901e 	bne	r3,zero,100046e4 <__alt_data_end+0xf80046e4>
100048a4:	a80b883a 	mov	r5,r21
100048a8:	8009883a 	mov	r4,r16
100048ac:	01800144 	movi	r6,5
100048b0:	000f883a 	mov	r7,zero
100048b4:	0006db40 	call	10006db4 <__multadd>
100048b8:	e009883a 	mov	r4,fp
100048bc:	100b883a 	mov	r5,r2
100048c0:	102b883a 	mov	r21,r2
100048c4:	00076600 	call	10007660 <__mcmp>
100048c8:	00bf860e 	bge	zero,r2,100046e4 <__alt_data_end+0xf80046e4>
100048cc:	d9800717 	ldw	r6,28(sp)
100048d0:	00800c44 	movi	r2,49
100048d4:	30800005 	stb	r2,0(r6)
100048d8:	d8800517 	ldw	r2,20(sp)
100048dc:	35c00044 	addi	r23,r6,1
100048e0:	10800044 	addi	r2,r2,1
100048e4:	d8800515 	stw	r2,20(sp)
100048e8:	003f8206 	br	100046f4 <__alt_data_end+0xf80046f4>
100048ec:	903e981e 	bne	r18,zero,10004350 <__alt_data_end+0xf8004350>
100048f0:	003f8b06 	br	10004720 <__alt_data_end+0xf8004720>
100048f4:	d9800517 	ldw	r6,20(sp)
100048f8:	d8c00717 	ldw	r3,28(sp)
100048fc:	00800c44 	movi	r2,49
10004900:	31800044 	addi	r6,r6,1
10004904:	d9800515 	stw	r6,20(sp)
10004908:	18800005 	stb	r2,0(r3)
1000490c:	003ee906 	br	100044b4 <__alt_data_end+0xf80044b4>
10004910:	dc000317 	ldw	r16,12(sp)
10004914:	003d6006 	br	10003e98 <__alt_data_end+0xf8003e98>
10004918:	8809883a 	mov	r4,r17
1000491c:	000d69c0 	call	1000d69c <__floatsidf>
10004920:	a009883a 	mov	r4,r20
10004924:	a80b883a 	mov	r5,r21
10004928:	100d883a 	mov	r6,r2
1000492c:	180f883a 	mov	r7,r3
10004930:	000c4d80 	call	1000c4d8 <__muldf3>
10004934:	1009883a 	mov	r4,r2
10004938:	180b883a 	mov	r5,r3
1000493c:	000d883a 	mov	r6,zero
10004940:	01d00734 	movhi	r7,16412
10004944:	000b0780 	call	1000b078 <__adddf3>
10004948:	1023883a 	mov	r17,r2
1000494c:	00bf3034 	movhi	r2,64704
10004950:	1885883a 	add	r2,r3,r2
10004954:	d8800e15 	stw	r2,56(sp)
10004958:	a009883a 	mov	r4,r20
1000495c:	a80b883a 	mov	r5,r21
10004960:	000d883a 	mov	r6,zero
10004964:	01d00534 	movhi	r7,16404
10004968:	000cd440 	call	1000cd44 <__subdf3>
1000496c:	d9c00e17 	ldw	r7,56(sp)
10004970:	1009883a 	mov	r4,r2
10004974:	180b883a 	mov	r5,r3
10004978:	880d883a 	mov	r6,r17
1000497c:	102b883a 	mov	r21,r2
10004980:	1829883a 	mov	r20,r3
10004984:	000c3180 	call	1000c318 <__gedf2>
10004988:	00807716 	blt	zero,r2,10004b68 <_dtoa_r+0x1388>
1000498c:	d8800e17 	ldw	r2,56(sp)
10004990:	a809883a 	mov	r4,r21
10004994:	a00b883a 	mov	r5,r20
10004998:	11e0003c 	xorhi	r7,r2,32768
1000499c:	880d883a 	mov	r6,r17
100049a0:	000c3f80 	call	1000c3f8 <__ledf2>
100049a4:	103d6b0e 	bge	r2,zero,10003f54 <__alt_data_end+0xf8003f54>
100049a8:	002b883a 	mov	r21,zero
100049ac:	0023883a 	mov	r17,zero
100049b0:	003f4c06 	br	100046e4 <__alt_data_end+0xf80046e4>
100049b4:	d9800917 	ldw	r6,36(sp)
100049b8:	e00b883a 	mov	r5,fp
100049bc:	8009883a 	mov	r4,r16
100049c0:	00073d80 	call	100073d8 <__pow5mult>
100049c4:	1039883a 	mov	fp,r2
100049c8:	003e2706 	br	10004268 <__alt_data_end+0xf8004268>
100049cc:	d8000b15 	stw	zero,44(sp)
100049d0:	003c4906 	br	10003af8 <__alt_data_end+0xf8003af8>
100049d4:	d9000917 	ldw	r4,36(sp)
100049d8:	d9800a17 	ldw	r6,40(sp)
100049dc:	dd400915 	stw	r21,36(sp)
100049e0:	a905c83a 	sub	r2,r21,r4
100049e4:	308d883a 	add	r6,r6,r2
100049e8:	d9800a15 	stw	r6,40(sp)
100049ec:	002b883a 	mov	r21,zero
100049f0:	003df206 	br	100041bc <__alt_data_end+0xf80041bc>
100049f4:	dc800e15 	stw	r18,56(sp)
100049f8:	982b883a 	mov	r21,r19
100049fc:	04400084 	movi	r17,2
10004a00:	003c7406 	br	10003bd4 <__alt_data_end+0xf8003bd4>
10004a04:	04400044 	movi	r17,1
10004a08:	dc400d15 	stw	r17,52(sp)
10004a0c:	dc400615 	stw	r17,24(sp)
10004a10:	dc402215 	stw	r17,136(sp)
10004a14:	80001115 	stw	zero,68(r16)
10004a18:	000b883a 	mov	r5,zero
10004a1c:	003c4a06 	br	10003b48 <__alt_data_end+0xf8003b48>
10004a20:	3023883a 	mov	r17,r6
10004a24:	003ffb06 	br	10004a14 <__alt_data_end+0xf8004a14>
10004a28:	1000021e 	bne	r2,zero,10004a34 <_dtoa_r+0x1254>
10004a2c:	4200004c 	andi	r8,r8,1
10004a30:	403e8f1e 	bne	r8,zero,10004470 <__alt_data_end+0xf8004470>
10004a34:	01000c04 	movi	r4,48
10004a38:	00000106 	br	10004a40 <_dtoa_r+0x1260>
10004a3c:	102f883a 	mov	r23,r2
10004a40:	b8bfffc4 	addi	r2,r23,-1
10004a44:	10c00007 	ldb	r3,0(r2)
10004a48:	193ffc26 	beq	r3,r4,10004a3c <__alt_data_end+0xf8004a3c>
10004a4c:	003e9906 	br	100044b4 <__alt_data_end+0xf80044b4>
10004a50:	d9000517 	ldw	r4,20(sp)
10004a54:	012fc83a 	sub	r23,zero,r4
10004a58:	b800ad26 	beq	r23,zero,10004d10 <_dtoa_r+0x1530>
10004a5c:	b88003cc 	andi	r2,r23,15
10004a60:	100490fa 	slli	r2,r2,3
10004a64:	00c40074 	movhi	r3,4097
10004a68:	18c09b04 	addi	r3,r3,620
10004a6c:	1885883a 	add	r2,r3,r2
10004a70:	11800017 	ldw	r6,0(r2)
10004a74:	11c00117 	ldw	r7,4(r2)
10004a78:	b82fd13a 	srai	r23,r23,4
10004a7c:	9009883a 	mov	r4,r18
10004a80:	980b883a 	mov	r5,r19
10004a84:	000c4d80 	call	1000c4d8 <__muldf3>
10004a88:	1029883a 	mov	r20,r2
10004a8c:	182b883a 	mov	r21,r3
10004a90:	b800f426 	beq	r23,zero,10004e64 <_dtoa_r+0x1684>
10004a94:	02040074 	movhi	r8,4097
10004a98:	42009104 	addi	r8,r8,580
10004a9c:	8029883a 	mov	r20,r16
10004aa0:	04400084 	movi	r17,2
10004aa4:	4021883a 	mov	r16,r8
10004aa8:	b980004c 	andi	r6,r23,1
10004aac:	1009883a 	mov	r4,r2
10004ab0:	b82fd07a 	srai	r23,r23,1
10004ab4:	180b883a 	mov	r5,r3
10004ab8:	30000426 	beq	r6,zero,10004acc <_dtoa_r+0x12ec>
10004abc:	81800017 	ldw	r6,0(r16)
10004ac0:	81c00117 	ldw	r7,4(r16)
10004ac4:	8c400044 	addi	r17,r17,1
10004ac8:	000c4d80 	call	1000c4d8 <__muldf3>
10004acc:	84000204 	addi	r16,r16,8
10004ad0:	b83ff51e 	bne	r23,zero,10004aa8 <__alt_data_end+0xf8004aa8>
10004ad4:	a021883a 	mov	r16,r20
10004ad8:	182b883a 	mov	r21,r3
10004adc:	1029883a 	mov	r20,r2
10004ae0:	003c5506 	br	10003c38 <__alt_data_end+0xf8003c38>
10004ae4:	d9800517 	ldw	r6,20(sp)
10004ae8:	d9000717 	ldw	r4,28(sp)
10004aec:	00c00c04 	movi	r3,48
10004af0:	31800044 	addi	r6,r6,1
10004af4:	d9800515 	stw	r6,20(sp)
10004af8:	20c00005 	stb	r3,0(r4)
10004afc:	02000c44 	movi	r8,49
10004b00:	003da206 	br	1000418c <__alt_data_end+0xf800418c>
10004b04:	89400117 	ldw	r5,4(r17)
10004b08:	8009883a 	mov	r4,r16
10004b0c:	0006ce40 	call	10006ce4 <_Balloc>
10004b10:	89800417 	ldw	r6,16(r17)
10004b14:	11000304 	addi	r4,r2,12
10004b18:	89400304 	addi	r5,r17,12
10004b1c:	31800084 	addi	r6,r6,2
10004b20:	318d883a 	add	r6,r6,r6
10004b24:	318d883a 	add	r6,r6,r6
10004b28:	1027883a 	mov	r19,r2
10004b2c:	00010640 	call	10001064 <memcpy>
10004b30:	8009883a 	mov	r4,r16
10004b34:	980b883a 	mov	r5,r19
10004b38:	01800044 	movi	r6,1
10004b3c:	00075180 	call	10007518 <__lshift>
10004b40:	1029883a 	mov	r20,r2
10004b44:	003e8606 	br	10004560 <__alt_data_end+0xf8004560>
10004b48:	00800e44 	movi	r2,57
10004b4c:	90809526 	beq	r18,r2,10004da4 <_dtoa_r+0x15c4>
10004b50:	92000044 	addi	r8,r18,1
10004b54:	003f2306 	br	100047e4 <__alt_data_end+0xf80047e4>
10004b58:	9011883a 	mov	r8,r18
10004b5c:	8825883a 	mov	r18,r17
10004b60:	a023883a 	mov	r17,r20
10004b64:	003e3706 	br	10004444 <__alt_data_end+0xf8004444>
10004b68:	002b883a 	mov	r21,zero
10004b6c:	0023883a 	mov	r17,zero
10004b70:	003f5606 	br	100048cc <__alt_data_end+0xf80048cc>
10004b74:	51bfffc4 	addi	r6,r10,-1
10004b78:	300490fa 	slli	r2,r6,3
10004b7c:	00c40074 	movhi	r3,4097
10004b80:	18c09b04 	addi	r3,r3,620
10004b84:	1885883a 	add	r2,r3,r2
10004b88:	d9c00e17 	ldw	r7,56(sp)
10004b8c:	11000017 	ldw	r4,0(r2)
10004b90:	11400117 	ldw	r5,4(r2)
10004b94:	d8800717 	ldw	r2,28(sp)
10004b98:	d9801015 	stw	r6,64(sp)
10004b9c:	880d883a 	mov	r6,r17
10004ba0:	da801615 	stw	r10,88(sp)
10004ba4:	15c00044 	addi	r23,r2,1
10004ba8:	000c4d80 	call	1000c4d8 <__muldf3>
10004bac:	a80b883a 	mov	r5,r21
10004bb0:	a009883a 	mov	r4,r20
10004bb4:	d8c01115 	stw	r3,68(sp)
10004bb8:	d8800e15 	stw	r2,56(sp)
10004bbc:	000d6140 	call	1000d614 <__fixdfsi>
10004bc0:	1009883a 	mov	r4,r2
10004bc4:	1023883a 	mov	r17,r2
10004bc8:	000d69c0 	call	1000d69c <__floatsidf>
10004bcc:	a009883a 	mov	r4,r20
10004bd0:	a80b883a 	mov	r5,r21
10004bd4:	100d883a 	mov	r6,r2
10004bd8:	180f883a 	mov	r7,r3
10004bdc:	000cd440 	call	1000cd44 <__subdf3>
10004be0:	1813883a 	mov	r9,r3
10004be4:	d8c00717 	ldw	r3,28(sp)
10004be8:	8c400c04 	addi	r17,r17,48
10004bec:	1011883a 	mov	r8,r2
10004bf0:	1c400005 	stb	r17,0(r3)
10004bf4:	da801617 	ldw	r10,88(sp)
10004bf8:	00800044 	movi	r2,1
10004bfc:	50802326 	beq	r10,r2,10004c8c <_dtoa_r+0x14ac>
10004c00:	d8800717 	ldw	r2,28(sp)
10004c04:	b82b883a 	mov	r21,r23
10004c08:	dc001315 	stw	r16,76(sp)
10004c0c:	12a9883a 	add	r20,r2,r10
10004c10:	4807883a 	mov	r3,r9
10004c14:	4005883a 	mov	r2,r8
10004c18:	dc801415 	stw	r18,80(sp)
10004c1c:	000d883a 	mov	r6,zero
10004c20:	01d00934 	movhi	r7,16420
10004c24:	1009883a 	mov	r4,r2
10004c28:	180b883a 	mov	r5,r3
10004c2c:	000c4d80 	call	1000c4d8 <__muldf3>
10004c30:	180b883a 	mov	r5,r3
10004c34:	1009883a 	mov	r4,r2
10004c38:	1821883a 	mov	r16,r3
10004c3c:	1025883a 	mov	r18,r2
10004c40:	000d6140 	call	1000d614 <__fixdfsi>
10004c44:	1009883a 	mov	r4,r2
10004c48:	1023883a 	mov	r17,r2
10004c4c:	000d69c0 	call	1000d69c <__floatsidf>
10004c50:	9009883a 	mov	r4,r18
10004c54:	800b883a 	mov	r5,r16
10004c58:	100d883a 	mov	r6,r2
10004c5c:	180f883a 	mov	r7,r3
10004c60:	8c400c04 	addi	r17,r17,48
10004c64:	000cd440 	call	1000cd44 <__subdf3>
10004c68:	ad400044 	addi	r21,r21,1
10004c6c:	ac7fffc5 	stb	r17,-1(r21)
10004c70:	ad3fea1e 	bne	r21,r20,10004c1c <__alt_data_end+0xf8004c1c>
10004c74:	1813883a 	mov	r9,r3
10004c78:	d8c01017 	ldw	r3,64(sp)
10004c7c:	dc001317 	ldw	r16,76(sp)
10004c80:	dc801417 	ldw	r18,80(sp)
10004c84:	1011883a 	mov	r8,r2
10004c88:	b8ef883a 	add	r23,r23,r3
10004c8c:	d9000e17 	ldw	r4,56(sp)
10004c90:	d9401117 	ldw	r5,68(sp)
10004c94:	000d883a 	mov	r6,zero
10004c98:	01cff834 	movhi	r7,16352
10004c9c:	da001715 	stw	r8,92(sp)
10004ca0:	da401515 	stw	r9,84(sp)
10004ca4:	000b0780 	call	1000b078 <__adddf3>
10004ca8:	da001717 	ldw	r8,92(sp)
10004cac:	da401517 	ldw	r9,84(sp)
10004cb0:	1009883a 	mov	r4,r2
10004cb4:	400d883a 	mov	r6,r8
10004cb8:	480f883a 	mov	r7,r9
10004cbc:	180b883a 	mov	r5,r3
10004cc0:	000c3f80 	call	1000c3f8 <__ledf2>
10004cc4:	da001717 	ldw	r8,92(sp)
10004cc8:	da401517 	ldw	r9,84(sp)
10004ccc:	10003b0e 	bge	r2,zero,10004dbc <_dtoa_r+0x15dc>
10004cd0:	d9001217 	ldw	r4,72(sp)
10004cd4:	bd7fffc3 	ldbu	r21,-1(r23)
10004cd8:	d9000515 	stw	r4,20(sp)
10004cdc:	003d1c06 	br	10004150 <__alt_data_end+0xf8004150>
10004ce0:	d8c00817 	ldw	r3,32(sp)
10004ce4:	18a9c83a 	sub	r20,r3,r2
10004ce8:	0005883a 	mov	r2,zero
10004cec:	003d3706 	br	100041cc <__alt_data_end+0xf80041cc>
10004cf0:	00800044 	movi	r2,1
10004cf4:	003dd006 	br	10004438 <__alt_data_end+0xf8004438>
10004cf8:	d8c00217 	ldw	r3,8(sp)
10004cfc:	00800d84 	movi	r2,54
10004d00:	dd400917 	ldw	r21,36(sp)
10004d04:	10c5c83a 	sub	r2,r2,r3
10004d08:	dd000817 	ldw	r20,32(sp)
10004d0c:	003d2f06 	br	100041cc <__alt_data_end+0xf80041cc>
10004d10:	9029883a 	mov	r20,r18
10004d14:	982b883a 	mov	r21,r19
10004d18:	04400084 	movi	r17,2
10004d1c:	003bc606 	br	10003c38 <__alt_data_end+0xf8003c38>
10004d20:	d8800617 	ldw	r2,24(sp)
10004d24:	103efc26 	beq	r2,zero,10004918 <__alt_data_end+0xf8004918>
10004d28:	d8c00d17 	ldw	r3,52(sp)
10004d2c:	00fc890e 	bge	zero,r3,10003f54 <__alt_data_end+0xf8003f54>
10004d30:	a80b883a 	mov	r5,r21
10004d34:	a009883a 	mov	r4,r20
10004d38:	000d883a 	mov	r6,zero
10004d3c:	01d00934 	movhi	r7,16420
10004d40:	000c4d80 	call	1000c4d8 <__muldf3>
10004d44:	89000044 	addi	r4,r17,1
10004d48:	1029883a 	mov	r20,r2
10004d4c:	182b883a 	mov	r21,r3
10004d50:	000d69c0 	call	1000d69c <__floatsidf>
10004d54:	a009883a 	mov	r4,r20
10004d58:	a80b883a 	mov	r5,r21
10004d5c:	100d883a 	mov	r6,r2
10004d60:	180f883a 	mov	r7,r3
10004d64:	000c4d80 	call	1000c4d8 <__muldf3>
10004d68:	1009883a 	mov	r4,r2
10004d6c:	180b883a 	mov	r5,r3
10004d70:	000d883a 	mov	r6,zero
10004d74:	01d00734 	movhi	r7,16412
10004d78:	000b0780 	call	1000b078 <__adddf3>
10004d7c:	d9000517 	ldw	r4,20(sp)
10004d80:	1023883a 	mov	r17,r2
10004d84:	00bf3034 	movhi	r2,64704
10004d88:	213fffc4 	addi	r4,r4,-1
10004d8c:	1885883a 	add	r2,r3,r2
10004d90:	d9001215 	stw	r4,72(sp)
10004d94:	d8800e15 	stw	r2,56(sp)
10004d98:	da800d17 	ldw	r10,52(sp)
10004d9c:	003bc306 	br	10003cac <__alt_data_end+0xf8003cac>
10004da0:	b039883a 	mov	fp,r22
10004da4:	01000e44 	movi	r4,57
10004da8:	8825883a 	mov	r18,r17
10004dac:	9dc00044 	addi	r23,r19,1
10004db0:	99000005 	stb	r4,0(r19)
10004db4:	a023883a 	mov	r17,r20
10004db8:	003dae06 	br	10004474 <__alt_data_end+0xf8004474>
10004dbc:	d9800e17 	ldw	r6,56(sp)
10004dc0:	d9c01117 	ldw	r7,68(sp)
10004dc4:	0009883a 	mov	r4,zero
10004dc8:	014ff834 	movhi	r5,16352
10004dcc:	da001715 	stw	r8,92(sp)
10004dd0:	da401515 	stw	r9,84(sp)
10004dd4:	000cd440 	call	1000cd44 <__subdf3>
10004dd8:	da001717 	ldw	r8,92(sp)
10004ddc:	da401517 	ldw	r9,84(sp)
10004de0:	1009883a 	mov	r4,r2
10004de4:	180b883a 	mov	r5,r3
10004de8:	400d883a 	mov	r6,r8
10004dec:	480f883a 	mov	r7,r9
10004df0:	000c3180 	call	1000c318 <__gedf2>
10004df4:	00bc570e 	bge	zero,r2,10003f54 <__alt_data_end+0xf8003f54>
10004df8:	01000c04 	movi	r4,48
10004dfc:	00000106 	br	10004e04 <_dtoa_r+0x1624>
10004e00:	102f883a 	mov	r23,r2
10004e04:	b8bfffc4 	addi	r2,r23,-1
10004e08:	10c00007 	ldb	r3,0(r2)
10004e0c:	193ffc26 	beq	r3,r4,10004e00 <__alt_data_end+0xf8004e00>
10004e10:	d9801217 	ldw	r6,72(sp)
10004e14:	d9800515 	stw	r6,20(sp)
10004e18:	003c1f06 	br	10003e98 <__alt_data_end+0xf8003e98>
10004e1c:	d8801217 	ldw	r2,72(sp)
10004e20:	dc001117 	ldw	r16,68(sp)
10004e24:	d8800515 	stw	r2,20(sp)
10004e28:	003cc906 	br	10004150 <__alt_data_end+0xf8004150>
10004e2c:	dd801317 	ldw	r22,76(sp)
10004e30:	dc001117 	ldw	r16,68(sp)
10004e34:	dcc01417 	ldw	r19,80(sp)
10004e38:	dc801017 	ldw	r18,64(sp)
10004e3c:	003c4506 	br	10003f54 <__alt_data_end+0xf8003f54>
10004e40:	103e5d1e 	bne	r2,zero,100047b8 <__alt_data_end+0xf80047b8>
10004e44:	4080004c 	andi	r2,r8,1
10004e48:	103e5b26 	beq	r2,zero,100047b8 <__alt_data_end+0xf80047b8>
10004e4c:	003e5706 	br	100047ac <__alt_data_end+0xf80047ac>
10004e50:	d8c00317 	ldw	r3,12(sp)
10004e54:	00800084 	movi	r2,2
10004e58:	10c00a16 	blt	r2,r3,10004e84 <_dtoa_r+0x16a4>
10004e5c:	d9000d17 	ldw	r4,52(sp)
10004e60:	003e8306 	br	10004870 <__alt_data_end+0xf8004870>
10004e64:	04400084 	movi	r17,2
10004e68:	003b7306 	br	10003c38 <__alt_data_end+0xf8003c38>
10004e6c:	d9801217 	ldw	r6,72(sp)
10004e70:	d9800515 	stw	r6,20(sp)
10004e74:	003cb606 	br	10004150 <__alt_data_end+0xf8004150>
10004e78:	d9001217 	ldw	r4,72(sp)
10004e7c:	d9000515 	stw	r4,20(sp)
10004e80:	003c0506 	br	10003e98 <__alt_data_end+0xf8003e98>
10004e84:	d9800d17 	ldw	r6,52(sp)
10004e88:	d9800615 	stw	r6,24(sp)
10004e8c:	003e8306 	br	1000489c <__alt_data_end+0xf800489c>
10004e90:	d9800317 	ldw	r6,12(sp)
10004e94:	00800084 	movi	r2,2
10004e98:	11800216 	blt	r2,r6,10004ea4 <_dtoa_r+0x16c4>
10004e9c:	d8800d17 	ldw	r2,52(sp)
10004ea0:	003da606 	br	1000453c <__alt_data_end+0xf800453c>
10004ea4:	d8800d17 	ldw	r2,52(sp)
10004ea8:	d8800615 	stw	r2,24(sp)
10004eac:	003e7b06 	br	1000489c <__alt_data_end+0xf800489c>
10004eb0:	05000044 	movi	r20,1
10004eb4:	003b0506 	br	10003acc <__alt_data_end+0xf8003acc>
10004eb8:	8009883a 	mov	r4,r16
10004ebc:	80001115 	stw	zero,68(r16)
10004ec0:	000b883a 	mov	r5,zero
10004ec4:	0006ce40 	call	10006ce4 <_Balloc>
10004ec8:	d8800715 	stw	r2,28(sp)
10004ecc:	d8c00717 	ldw	r3,28(sp)
10004ed0:	00bfffc4 	movi	r2,-1
10004ed4:	01000044 	movi	r4,1
10004ed8:	d8800615 	stw	r2,24(sp)
10004edc:	80c01015 	stw	r3,64(r16)
10004ee0:	d9000b15 	stw	r4,44(sp)
10004ee4:	d8002215 	stw	zero,136(sp)
10004ee8:	d8800d15 	stw	r2,52(sp)
10004eec:	003c1906 	br	10003f54 <__alt_data_end+0xf8003f54>
10004ef0:	193d2926 	beq	r3,r4,10004398 <__alt_data_end+0xf8004398>
10004ef4:	00c00f04 	movi	r3,60
10004ef8:	1885c83a 	sub	r2,r3,r2
10004efc:	003d7b06 	br	100044ec <__alt_data_end+0xf80044ec>
10004f00:	000b883a 	mov	r5,zero
10004f04:	003b1006 	br	10003b48 <__alt_data_end+0xf8003b48>

10004f08 <_fflush_r>:
10004f08:	defffb04 	addi	sp,sp,-20
10004f0c:	dcc00315 	stw	r19,12(sp)
10004f10:	dc000015 	stw	r16,0(sp)
10004f14:	dfc00415 	stw	ra,16(sp)
10004f18:	dc800215 	stw	r18,8(sp)
10004f1c:	dc400115 	stw	r17,4(sp)
10004f20:	2027883a 	mov	r19,r4
10004f24:	2821883a 	mov	r16,r5
10004f28:	20000226 	beq	r4,zero,10004f34 <_fflush_r+0x2c>
10004f2c:	20800e17 	ldw	r2,56(r4)
10004f30:	10005326 	beq	r2,zero,10005080 <_fflush_r+0x178>
10004f34:	8080030b 	ldhu	r2,12(r16)
10004f38:	10ffffcc 	andi	r3,r2,65535
10004f3c:	18e0001c 	xori	r3,r3,32768
10004f40:	18e00004 	addi	r3,r3,-32768
10004f44:	18002c26 	beq	r3,zero,10004ff8 <_fflush_r+0xf0>
10004f48:	10c0020c 	andi	r3,r2,8
10004f4c:	1800321e 	bne	r3,zero,10005018 <_fflush_r+0x110>
10004f50:	80c00117 	ldw	r3,4(r16)
10004f54:	10820014 	ori	r2,r2,2048
10004f58:	8080030d 	sth	r2,12(r16)
10004f5c:	00c0570e 	bge	zero,r3,100050bc <_fflush_r+0x1b4>
10004f60:	82000a17 	ldw	r8,40(r16)
10004f64:	40002426 	beq	r8,zero,10004ff8 <_fflush_r+0xf0>
10004f68:	9c400017 	ldw	r17,0(r19)
10004f6c:	10c4000c 	andi	r3,r2,4096
10004f70:	98000015 	stw	zero,0(r19)
10004f74:	18004626 	beq	r3,zero,10005090 <_fflush_r+0x188>
10004f78:	81801417 	ldw	r6,80(r16)
10004f7c:	10c0010c 	andi	r3,r2,4
10004f80:	18000626 	beq	r3,zero,10004f9c <_fflush_r+0x94>
10004f84:	80c00117 	ldw	r3,4(r16)
10004f88:	80800c17 	ldw	r2,48(r16)
10004f8c:	30cdc83a 	sub	r6,r6,r3
10004f90:	10000226 	beq	r2,zero,10004f9c <_fflush_r+0x94>
10004f94:	80800f17 	ldw	r2,60(r16)
10004f98:	308dc83a 	sub	r6,r6,r2
10004f9c:	81400717 	ldw	r5,28(r16)
10004fa0:	9809883a 	mov	r4,r19
10004fa4:	000f883a 	mov	r7,zero
10004fa8:	403ee83a 	callr	r8
10004fac:	00ffffc4 	movi	r3,-1
10004fb0:	10c04526 	beq	r2,r3,100050c8 <_fflush_r+0x1c0>
10004fb4:	80c0030b 	ldhu	r3,12(r16)
10004fb8:	81000417 	ldw	r4,16(r16)
10004fbc:	80000115 	stw	zero,4(r16)
10004fc0:	197dffcc 	andi	r5,r3,63487
10004fc4:	8140030d 	sth	r5,12(r16)
10004fc8:	81000015 	stw	r4,0(r16)
10004fcc:	18c4000c 	andi	r3,r3,4096
10004fd0:	18000126 	beq	r3,zero,10004fd8 <_fflush_r+0xd0>
10004fd4:	80801415 	stw	r2,80(r16)
10004fd8:	81400c17 	ldw	r5,48(r16)
10004fdc:	9c400015 	stw	r17,0(r19)
10004fe0:	28000526 	beq	r5,zero,10004ff8 <_fflush_r+0xf0>
10004fe4:	80801004 	addi	r2,r16,64
10004fe8:	28800226 	beq	r5,r2,10004ff4 <_fflush_r+0xec>
10004fec:	9809883a 	mov	r4,r19
10004ff0:	00056380 	call	10005638 <_free_r>
10004ff4:	80000c15 	stw	zero,48(r16)
10004ff8:	0005883a 	mov	r2,zero
10004ffc:	dfc00417 	ldw	ra,16(sp)
10005000:	dcc00317 	ldw	r19,12(sp)
10005004:	dc800217 	ldw	r18,8(sp)
10005008:	dc400117 	ldw	r17,4(sp)
1000500c:	dc000017 	ldw	r16,0(sp)
10005010:	dec00504 	addi	sp,sp,20
10005014:	f800283a 	ret
10005018:	84800417 	ldw	r18,16(r16)
1000501c:	903ff626 	beq	r18,zero,10004ff8 <__alt_data_end+0xf8004ff8>
10005020:	84400017 	ldw	r17,0(r16)
10005024:	108000cc 	andi	r2,r2,3
10005028:	84800015 	stw	r18,0(r16)
1000502c:	8ca3c83a 	sub	r17,r17,r18
10005030:	10001526 	beq	r2,zero,10005088 <_fflush_r+0x180>
10005034:	0005883a 	mov	r2,zero
10005038:	80800215 	stw	r2,8(r16)
1000503c:	04400316 	blt	zero,r17,1000504c <_fflush_r+0x144>
10005040:	003fed06 	br	10004ff8 <__alt_data_end+0xf8004ff8>
10005044:	90a5883a 	add	r18,r18,r2
10005048:	047feb0e 	bge	zero,r17,10004ff8 <__alt_data_end+0xf8004ff8>
1000504c:	80800917 	ldw	r2,36(r16)
10005050:	81400717 	ldw	r5,28(r16)
10005054:	880f883a 	mov	r7,r17
10005058:	900d883a 	mov	r6,r18
1000505c:	9809883a 	mov	r4,r19
10005060:	103ee83a 	callr	r2
10005064:	88a3c83a 	sub	r17,r17,r2
10005068:	00bff616 	blt	zero,r2,10005044 <__alt_data_end+0xf8005044>
1000506c:	80c0030b 	ldhu	r3,12(r16)
10005070:	00bfffc4 	movi	r2,-1
10005074:	18c01014 	ori	r3,r3,64
10005078:	80c0030d 	sth	r3,12(r16)
1000507c:	003fdf06 	br	10004ffc <__alt_data_end+0xf8004ffc>
10005080:	00054c40 	call	100054c4 <__sinit>
10005084:	003fab06 	br	10004f34 <__alt_data_end+0xf8004f34>
10005088:	80800517 	ldw	r2,20(r16)
1000508c:	003fea06 	br	10005038 <__alt_data_end+0xf8005038>
10005090:	81400717 	ldw	r5,28(r16)
10005094:	000d883a 	mov	r6,zero
10005098:	9809883a 	mov	r4,r19
1000509c:	01c00044 	movi	r7,1
100050a0:	403ee83a 	callr	r8
100050a4:	100d883a 	mov	r6,r2
100050a8:	00bfffc4 	movi	r2,-1
100050ac:	30801326 	beq	r6,r2,100050fc <_fflush_r+0x1f4>
100050b0:	8080030b 	ldhu	r2,12(r16)
100050b4:	82000a17 	ldw	r8,40(r16)
100050b8:	003fb006 	br	10004f7c <__alt_data_end+0xf8004f7c>
100050bc:	80c00f17 	ldw	r3,60(r16)
100050c0:	00ffa716 	blt	zero,r3,10004f60 <__alt_data_end+0xf8004f60>
100050c4:	003fcc06 	br	10004ff8 <__alt_data_end+0xf8004ff8>
100050c8:	98c00017 	ldw	r3,0(r19)
100050cc:	183fb926 	beq	r3,zero,10004fb4 <__alt_data_end+0xf8004fb4>
100050d0:	01000744 	movi	r4,29
100050d4:	19000226 	beq	r3,r4,100050e0 <_fflush_r+0x1d8>
100050d8:	01000584 	movi	r4,22
100050dc:	1900101e 	bne	r3,r4,10005120 <_fflush_r+0x218>
100050e0:	8080030b 	ldhu	r2,12(r16)
100050e4:	80c00417 	ldw	r3,16(r16)
100050e8:	80000115 	stw	zero,4(r16)
100050ec:	10bdffcc 	andi	r2,r2,63487
100050f0:	8080030d 	sth	r2,12(r16)
100050f4:	80c00015 	stw	r3,0(r16)
100050f8:	003fb706 	br	10004fd8 <__alt_data_end+0xf8004fd8>
100050fc:	98800017 	ldw	r2,0(r19)
10005100:	103feb26 	beq	r2,zero,100050b0 <__alt_data_end+0xf80050b0>
10005104:	00c00744 	movi	r3,29
10005108:	10c00226 	beq	r2,r3,10005114 <_fflush_r+0x20c>
1000510c:	00c00584 	movi	r3,22
10005110:	10ffd61e 	bne	r2,r3,1000506c <__alt_data_end+0xf800506c>
10005114:	9c400015 	stw	r17,0(r19)
10005118:	0005883a 	mov	r2,zero
1000511c:	003fb706 	br	10004ffc <__alt_data_end+0xf8004ffc>
10005120:	80c0030b 	ldhu	r3,12(r16)
10005124:	18c01014 	ori	r3,r3,64
10005128:	80c0030d 	sth	r3,12(r16)
1000512c:	003fb306 	br	10004ffc <__alt_data_end+0xf8004ffc>

10005130 <fflush>:
10005130:	20000526 	beq	r4,zero,10005148 <fflush+0x18>
10005134:	00840074 	movhi	r2,4097
10005138:	10895d04 	addi	r2,r2,9588
1000513c:	200b883a 	mov	r5,r4
10005140:	11000017 	ldw	r4,0(r2)
10005144:	0004f081 	jmpi	10004f08 <_fflush_r>
10005148:	00840074 	movhi	r2,4097
1000514c:	10895c04 	addi	r2,r2,9584
10005150:	11000017 	ldw	r4,0(r2)
10005154:	01440034 	movhi	r5,4096
10005158:	2953c204 	addi	r5,r5,20232
1000515c:	0005e841 	jmpi	10005e84 <_fwalk_reent>

10005160 <__fp_lock>:
10005160:	0005883a 	mov	r2,zero
10005164:	f800283a 	ret

10005168 <__fp_unlock>:
10005168:	0005883a 	mov	r2,zero
1000516c:	f800283a 	ret

10005170 <_cleanup_r>:
10005170:	01440074 	movhi	r5,4097
10005174:	29675604 	addi	r5,r5,-25256
10005178:	0005dcc1 	jmpi	10005dcc <_fwalk>

1000517c <__sinit.part.1>:
1000517c:	defff604 	addi	sp,sp,-40
10005180:	00c40034 	movhi	r3,4096
10005184:	dfc00915 	stw	ra,36(sp)
10005188:	df000815 	stw	fp,32(sp)
1000518c:	ddc00715 	stw	r23,28(sp)
10005190:	dd800615 	stw	r22,24(sp)
10005194:	dd400515 	stw	r21,20(sp)
10005198:	dd000415 	stw	r20,16(sp)
1000519c:	dcc00315 	stw	r19,12(sp)
100051a0:	dc800215 	stw	r18,8(sp)
100051a4:	dc400115 	stw	r17,4(sp)
100051a8:	dc000015 	stw	r16,0(sp)
100051ac:	18d45c04 	addi	r3,r3,20848
100051b0:	24000117 	ldw	r16,4(r4)
100051b4:	20c00f15 	stw	r3,60(r4)
100051b8:	07000044 	movi	fp,1
100051bc:	00c000c4 	movi	r3,3
100051c0:	2080bb04 	addi	r2,r4,748
100051c4:	20c0b915 	stw	r3,740(r4)
100051c8:	27000e15 	stw	fp,56(r4)
100051cc:	2080ba15 	stw	r2,744(r4)
100051d0:	2000b815 	stw	zero,736(r4)
100051d4:	05c00204 	movi	r23,8
100051d8:	00800104 	movi	r2,4
100051dc:	2025883a 	mov	r18,r4
100051e0:	b80d883a 	mov	r6,r23
100051e4:	81001704 	addi	r4,r16,92
100051e8:	000b883a 	mov	r5,zero
100051ec:	80000015 	stw	zero,0(r16)
100051f0:	80000115 	stw	zero,4(r16)
100051f4:	80000215 	stw	zero,8(r16)
100051f8:	8080030d 	sth	r2,12(r16)
100051fc:	80001915 	stw	zero,100(r16)
10005200:	8000038d 	sth	zero,14(r16)
10005204:	80000415 	stw	zero,16(r16)
10005208:	80000515 	stw	zero,20(r16)
1000520c:	80000615 	stw	zero,24(r16)
10005210:	0006bc00 	call	10006bc0 <memset>
10005214:	05840074 	movhi	r22,4097
10005218:	94400217 	ldw	r17,8(r18)
1000521c:	05440074 	movhi	r21,4097
10005220:	05040074 	movhi	r20,4097
10005224:	04c40074 	movhi	r19,4097
10005228:	b5a0e504 	addi	r22,r22,-31852
1000522c:	ad60fc04 	addi	r21,r21,-31760
10005230:	a5211b04 	addi	r20,r20,-31636
10005234:	9ce13204 	addi	r19,r19,-31544
10005238:	85800815 	stw	r22,32(r16)
1000523c:	85400915 	stw	r21,36(r16)
10005240:	85000a15 	stw	r20,40(r16)
10005244:	84c00b15 	stw	r19,44(r16)
10005248:	84000715 	stw	r16,28(r16)
1000524c:	00800284 	movi	r2,10
10005250:	89001704 	addi	r4,r17,92
10005254:	b80d883a 	mov	r6,r23
10005258:	000b883a 	mov	r5,zero
1000525c:	88000015 	stw	zero,0(r17)
10005260:	88000115 	stw	zero,4(r17)
10005264:	88000215 	stw	zero,8(r17)
10005268:	8880030d 	sth	r2,12(r17)
1000526c:	88001915 	stw	zero,100(r17)
10005270:	8f00038d 	sth	fp,14(r17)
10005274:	88000415 	stw	zero,16(r17)
10005278:	88000515 	stw	zero,20(r17)
1000527c:	88000615 	stw	zero,24(r17)
10005280:	0006bc00 	call	10006bc0 <memset>
10005284:	94000317 	ldw	r16,12(r18)
10005288:	00800484 	movi	r2,18
1000528c:	8c400715 	stw	r17,28(r17)
10005290:	8d800815 	stw	r22,32(r17)
10005294:	8d400915 	stw	r21,36(r17)
10005298:	8d000a15 	stw	r20,40(r17)
1000529c:	8cc00b15 	stw	r19,44(r17)
100052a0:	8080030d 	sth	r2,12(r16)
100052a4:	00800084 	movi	r2,2
100052a8:	80000015 	stw	zero,0(r16)
100052ac:	80000115 	stw	zero,4(r16)
100052b0:	80000215 	stw	zero,8(r16)
100052b4:	80001915 	stw	zero,100(r16)
100052b8:	8080038d 	sth	r2,14(r16)
100052bc:	80000415 	stw	zero,16(r16)
100052c0:	80000515 	stw	zero,20(r16)
100052c4:	80000615 	stw	zero,24(r16)
100052c8:	81001704 	addi	r4,r16,92
100052cc:	000b883a 	mov	r5,zero
100052d0:	b80d883a 	mov	r6,r23
100052d4:	0006bc00 	call	10006bc0 <memset>
100052d8:	84000715 	stw	r16,28(r16)
100052dc:	85800815 	stw	r22,32(r16)
100052e0:	85400915 	stw	r21,36(r16)
100052e4:	85000a15 	stw	r20,40(r16)
100052e8:	84c00b15 	stw	r19,44(r16)
100052ec:	dfc00917 	ldw	ra,36(sp)
100052f0:	df000817 	ldw	fp,32(sp)
100052f4:	ddc00717 	ldw	r23,28(sp)
100052f8:	dd800617 	ldw	r22,24(sp)
100052fc:	dd400517 	ldw	r21,20(sp)
10005300:	dd000417 	ldw	r20,16(sp)
10005304:	dcc00317 	ldw	r19,12(sp)
10005308:	dc800217 	ldw	r18,8(sp)
1000530c:	dc400117 	ldw	r17,4(sp)
10005310:	dc000017 	ldw	r16,0(sp)
10005314:	dec00a04 	addi	sp,sp,40
10005318:	f800283a 	ret

1000531c <__sfmoreglue>:
1000531c:	defffc04 	addi	sp,sp,-16
10005320:	dc800215 	stw	r18,8(sp)
10005324:	2825883a 	mov	r18,r5
10005328:	dc000015 	stw	r16,0(sp)
1000532c:	01401a04 	movi	r5,104
10005330:	2021883a 	mov	r16,r4
10005334:	9009883a 	mov	r4,r18
10005338:	dfc00315 	stw	ra,12(sp)
1000533c:	dc400115 	stw	r17,4(sp)
10005340:	000103c0 	call	1000103c <__mulsi3>
10005344:	8009883a 	mov	r4,r16
10005348:	11400304 	addi	r5,r2,12
1000534c:	1023883a 	mov	r17,r2
10005350:	00061d40 	call	100061d4 <_malloc_r>
10005354:	1021883a 	mov	r16,r2
10005358:	10000726 	beq	r2,zero,10005378 <__sfmoreglue+0x5c>
1000535c:	11000304 	addi	r4,r2,12
10005360:	10000015 	stw	zero,0(r2)
10005364:	14800115 	stw	r18,4(r2)
10005368:	11000215 	stw	r4,8(r2)
1000536c:	000b883a 	mov	r5,zero
10005370:	880d883a 	mov	r6,r17
10005374:	0006bc00 	call	10006bc0 <memset>
10005378:	8005883a 	mov	r2,r16
1000537c:	dfc00317 	ldw	ra,12(sp)
10005380:	dc800217 	ldw	r18,8(sp)
10005384:	dc400117 	ldw	r17,4(sp)
10005388:	dc000017 	ldw	r16,0(sp)
1000538c:	dec00404 	addi	sp,sp,16
10005390:	f800283a 	ret

10005394 <__sfp>:
10005394:	00840074 	movhi	r2,4097
10005398:	defffb04 	addi	sp,sp,-20
1000539c:	10895c04 	addi	r2,r2,9584
100053a0:	dc800215 	stw	r18,8(sp)
100053a4:	14800017 	ldw	r18,0(r2)
100053a8:	dcc00315 	stw	r19,12(sp)
100053ac:	dfc00415 	stw	ra,16(sp)
100053b0:	90800e17 	ldw	r2,56(r18)
100053b4:	dc400115 	stw	r17,4(sp)
100053b8:	dc000015 	stw	r16,0(sp)
100053bc:	2027883a 	mov	r19,r4
100053c0:	1000021e 	bne	r2,zero,100053cc <__sfp+0x38>
100053c4:	9009883a 	mov	r4,r18
100053c8:	000517c0 	call	1000517c <__sinit.part.1>
100053cc:	9480b804 	addi	r18,r18,736
100053d0:	047fffc4 	movi	r17,-1
100053d4:	91400117 	ldw	r5,4(r18)
100053d8:	94000217 	ldw	r16,8(r18)
100053dc:	297fffc4 	addi	r5,r5,-1
100053e0:	28000a16 	blt	r5,zero,1000540c <__sfp+0x78>
100053e4:	8080030f 	ldh	r2,12(r16)
100053e8:	10000c26 	beq	r2,zero,1000541c <__sfp+0x88>
100053ec:	80c01d04 	addi	r3,r16,116
100053f0:	00000206 	br	100053fc <__sfp+0x68>
100053f4:	18bfe60f 	ldh	r2,-104(r3)
100053f8:	10000826 	beq	r2,zero,1000541c <__sfp+0x88>
100053fc:	297fffc4 	addi	r5,r5,-1
10005400:	1c3ffd04 	addi	r16,r3,-12
10005404:	18c01a04 	addi	r3,r3,104
10005408:	2c7ffa1e 	bne	r5,r17,100053f4 <__alt_data_end+0xf80053f4>
1000540c:	90800017 	ldw	r2,0(r18)
10005410:	10001d26 	beq	r2,zero,10005488 <__sfp+0xf4>
10005414:	1025883a 	mov	r18,r2
10005418:	003fee06 	br	100053d4 <__alt_data_end+0xf80053d4>
1000541c:	00bfffc4 	movi	r2,-1
10005420:	8080038d 	sth	r2,14(r16)
10005424:	00800044 	movi	r2,1
10005428:	8080030d 	sth	r2,12(r16)
1000542c:	80001915 	stw	zero,100(r16)
10005430:	80000015 	stw	zero,0(r16)
10005434:	80000215 	stw	zero,8(r16)
10005438:	80000115 	stw	zero,4(r16)
1000543c:	80000415 	stw	zero,16(r16)
10005440:	80000515 	stw	zero,20(r16)
10005444:	80000615 	stw	zero,24(r16)
10005448:	81001704 	addi	r4,r16,92
1000544c:	000b883a 	mov	r5,zero
10005450:	01800204 	movi	r6,8
10005454:	0006bc00 	call	10006bc0 <memset>
10005458:	8005883a 	mov	r2,r16
1000545c:	80000c15 	stw	zero,48(r16)
10005460:	80000d15 	stw	zero,52(r16)
10005464:	80001115 	stw	zero,68(r16)
10005468:	80001215 	stw	zero,72(r16)
1000546c:	dfc00417 	ldw	ra,16(sp)
10005470:	dcc00317 	ldw	r19,12(sp)
10005474:	dc800217 	ldw	r18,8(sp)
10005478:	dc400117 	ldw	r17,4(sp)
1000547c:	dc000017 	ldw	r16,0(sp)
10005480:	dec00504 	addi	sp,sp,20
10005484:	f800283a 	ret
10005488:	9809883a 	mov	r4,r19
1000548c:	01400104 	movi	r5,4
10005490:	000531c0 	call	1000531c <__sfmoreglue>
10005494:	90800015 	stw	r2,0(r18)
10005498:	103fde1e 	bne	r2,zero,10005414 <__alt_data_end+0xf8005414>
1000549c:	00800304 	movi	r2,12
100054a0:	98800015 	stw	r2,0(r19)
100054a4:	0005883a 	mov	r2,zero
100054a8:	003ff006 	br	1000546c <__alt_data_end+0xf800546c>

100054ac <_cleanup>:
100054ac:	00840074 	movhi	r2,4097
100054b0:	10895c04 	addi	r2,r2,9584
100054b4:	11000017 	ldw	r4,0(r2)
100054b8:	01440074 	movhi	r5,4097
100054bc:	29675604 	addi	r5,r5,-25256
100054c0:	0005dcc1 	jmpi	10005dcc <_fwalk>

100054c4 <__sinit>:
100054c4:	20800e17 	ldw	r2,56(r4)
100054c8:	10000126 	beq	r2,zero,100054d0 <__sinit+0xc>
100054cc:	f800283a 	ret
100054d0:	000517c1 	jmpi	1000517c <__sinit.part.1>

100054d4 <__sfp_lock_acquire>:
100054d4:	f800283a 	ret

100054d8 <__sfp_lock_release>:
100054d8:	f800283a 	ret

100054dc <__sinit_lock_acquire>:
100054dc:	f800283a 	ret

100054e0 <__sinit_lock_release>:
100054e0:	f800283a 	ret

100054e4 <__fp_lock_all>:
100054e4:	00840074 	movhi	r2,4097
100054e8:	10895d04 	addi	r2,r2,9588
100054ec:	11000017 	ldw	r4,0(r2)
100054f0:	01440034 	movhi	r5,4096
100054f4:	29545804 	addi	r5,r5,20832
100054f8:	0005dcc1 	jmpi	10005dcc <_fwalk>

100054fc <__fp_unlock_all>:
100054fc:	00840074 	movhi	r2,4097
10005500:	10895d04 	addi	r2,r2,9588
10005504:	11000017 	ldw	r4,0(r2)
10005508:	01440034 	movhi	r5,4096
1000550c:	29545a04 	addi	r5,r5,20840
10005510:	0005dcc1 	jmpi	10005dcc <_fwalk>

10005514 <_malloc_trim_r>:
10005514:	defffb04 	addi	sp,sp,-20
10005518:	dcc00315 	stw	r19,12(sp)
1000551c:	04c40074 	movhi	r19,4097
10005520:	dc800215 	stw	r18,8(sp)
10005524:	dc400115 	stw	r17,4(sp)
10005528:	dc000015 	stw	r16,0(sp)
1000552c:	dfc00415 	stw	ra,16(sp)
10005530:	2821883a 	mov	r16,r5
10005534:	9cc3d804 	addi	r19,r19,3936
10005538:	2025883a 	mov	r18,r4
1000553c:	000de540 	call	1000de54 <__malloc_lock>
10005540:	98800217 	ldw	r2,8(r19)
10005544:	14400117 	ldw	r17,4(r2)
10005548:	00bfff04 	movi	r2,-4
1000554c:	88a2703a 	and	r17,r17,r2
10005550:	8c21c83a 	sub	r16,r17,r16
10005554:	8403fbc4 	addi	r16,r16,4079
10005558:	8020d33a 	srli	r16,r16,12
1000555c:	0083ffc4 	movi	r2,4095
10005560:	843fffc4 	addi	r16,r16,-1
10005564:	8020933a 	slli	r16,r16,12
10005568:	1400060e 	bge	r2,r16,10005584 <_malloc_trim_r+0x70>
1000556c:	9009883a 	mov	r4,r18
10005570:	000b883a 	mov	r5,zero
10005574:	00083400 	call	10008340 <_sbrk_r>
10005578:	98c00217 	ldw	r3,8(r19)
1000557c:	1c47883a 	add	r3,r3,r17
10005580:	10c00a26 	beq	r2,r3,100055ac <_malloc_trim_r+0x98>
10005584:	9009883a 	mov	r4,r18
10005588:	000de740 	call	1000de74 <__malloc_unlock>
1000558c:	0005883a 	mov	r2,zero
10005590:	dfc00417 	ldw	ra,16(sp)
10005594:	dcc00317 	ldw	r19,12(sp)
10005598:	dc800217 	ldw	r18,8(sp)
1000559c:	dc400117 	ldw	r17,4(sp)
100055a0:	dc000017 	ldw	r16,0(sp)
100055a4:	dec00504 	addi	sp,sp,20
100055a8:	f800283a 	ret
100055ac:	9009883a 	mov	r4,r18
100055b0:	040bc83a 	sub	r5,zero,r16
100055b4:	00083400 	call	10008340 <_sbrk_r>
100055b8:	00ffffc4 	movi	r3,-1
100055bc:	10c00d26 	beq	r2,r3,100055f4 <_malloc_trim_r+0xe0>
100055c0:	00c40074 	movhi	r3,4097
100055c4:	18d1c304 	addi	r3,r3,18188
100055c8:	18800017 	ldw	r2,0(r3)
100055cc:	99000217 	ldw	r4,8(r19)
100055d0:	8c23c83a 	sub	r17,r17,r16
100055d4:	8c400054 	ori	r17,r17,1
100055d8:	1421c83a 	sub	r16,r2,r16
100055dc:	24400115 	stw	r17,4(r4)
100055e0:	9009883a 	mov	r4,r18
100055e4:	1c000015 	stw	r16,0(r3)
100055e8:	000de740 	call	1000de74 <__malloc_unlock>
100055ec:	00800044 	movi	r2,1
100055f0:	003fe706 	br	10005590 <__alt_data_end+0xf8005590>
100055f4:	9009883a 	mov	r4,r18
100055f8:	000b883a 	mov	r5,zero
100055fc:	00083400 	call	10008340 <_sbrk_r>
10005600:	99000217 	ldw	r4,8(r19)
10005604:	014003c4 	movi	r5,15
10005608:	1107c83a 	sub	r3,r2,r4
1000560c:	28ffdd0e 	bge	r5,r3,10005584 <__alt_data_end+0xf8005584>
10005610:	01440074 	movhi	r5,4097
10005614:	29495f04 	addi	r5,r5,9596
10005618:	29400017 	ldw	r5,0(r5)
1000561c:	18c00054 	ori	r3,r3,1
10005620:	20c00115 	stw	r3,4(r4)
10005624:	00c40074 	movhi	r3,4097
10005628:	1145c83a 	sub	r2,r2,r5
1000562c:	18d1c304 	addi	r3,r3,18188
10005630:	18800015 	stw	r2,0(r3)
10005634:	003fd306 	br	10005584 <__alt_data_end+0xf8005584>

10005638 <_free_r>:
10005638:	28004c26 	beq	r5,zero,1000576c <_free_r+0x134>
1000563c:	defffd04 	addi	sp,sp,-12
10005640:	dc400115 	stw	r17,4(sp)
10005644:	dc000015 	stw	r16,0(sp)
10005648:	2023883a 	mov	r17,r4
1000564c:	2821883a 	mov	r16,r5
10005650:	dfc00215 	stw	ra,8(sp)
10005654:	000de540 	call	1000de54 <__malloc_lock>
10005658:	813fff17 	ldw	r4,-4(r16)
1000565c:	00bfff84 	movi	r2,-2
10005660:	02440074 	movhi	r9,4097
10005664:	81bffe04 	addi	r6,r16,-8
10005668:	2084703a 	and	r2,r4,r2
1000566c:	4a43d804 	addi	r9,r9,3936
10005670:	308b883a 	add	r5,r6,r2
10005674:	2a000117 	ldw	r8,4(r5)
10005678:	49c00217 	ldw	r7,8(r9)
1000567c:	00ffff04 	movi	r3,-4
10005680:	40c6703a 	and	r3,r8,r3
10005684:	39405326 	beq	r7,r5,100057d4 <_free_r+0x19c>
10005688:	28c00115 	stw	r3,4(r5)
1000568c:	2100004c 	andi	r4,r4,1
10005690:	2000091e 	bne	r4,zero,100056b8 <_free_r+0x80>
10005694:	81fffe17 	ldw	r7,-8(r16)
10005698:	4a000204 	addi	r8,r9,8
1000569c:	31cdc83a 	sub	r6,r6,r7
100056a0:	31000217 	ldw	r4,8(r6)
100056a4:	11c5883a 	add	r2,r2,r7
100056a8:	22006126 	beq	r4,r8,10005830 <_free_r+0x1f8>
100056ac:	31c00317 	ldw	r7,12(r6)
100056b0:	21c00315 	stw	r7,12(r4)
100056b4:	39000215 	stw	r4,8(r7)
100056b8:	28c9883a 	add	r4,r5,r3
100056bc:	21c00117 	ldw	r7,4(r4)
100056c0:	39c0004c 	andi	r7,r7,1
100056c4:	38000d1e 	bne	r7,zero,100056fc <_free_r+0xc4>
100056c8:	29000217 	ldw	r4,8(r5)
100056cc:	10c5883a 	add	r2,r2,r3
100056d0:	00c40074 	movhi	r3,4097
100056d4:	18c3da04 	addi	r3,r3,3944
100056d8:	20c07526 	beq	r4,r3,100058b0 <_free_r+0x278>
100056dc:	29c00317 	ldw	r7,12(r5)
100056e0:	11400054 	ori	r5,r2,1
100056e4:	3087883a 	add	r3,r6,r2
100056e8:	21c00315 	stw	r7,12(r4)
100056ec:	39000215 	stw	r4,8(r7)
100056f0:	31400115 	stw	r5,4(r6)
100056f4:	18800015 	stw	r2,0(r3)
100056f8:	00000406 	br	1000570c <_free_r+0xd4>
100056fc:	10c00054 	ori	r3,r2,1
10005700:	30c00115 	stw	r3,4(r6)
10005704:	3087883a 	add	r3,r6,r2
10005708:	18800015 	stw	r2,0(r3)
1000570c:	00c07fc4 	movi	r3,511
10005710:	18801736 	bltu	r3,r2,10005770 <_free_r+0x138>
10005714:	1004d0fa 	srli	r2,r2,3
10005718:	01400044 	movi	r5,1
1000571c:	49000117 	ldw	r4,4(r9)
10005720:	1087883a 	add	r3,r2,r2
10005724:	18c7883a 	add	r3,r3,r3
10005728:	1005d0ba 	srai	r2,r2,2
1000572c:	18c7883a 	add	r3,r3,r3
10005730:	1a47883a 	add	r3,r3,r9
10005734:	19c00217 	ldw	r7,8(r3)
10005738:	2884983a 	sll	r2,r5,r2
1000573c:	30c00315 	stw	r3,12(r6)
10005740:	31c00215 	stw	r7,8(r6)
10005744:	1104b03a 	or	r2,r2,r4
10005748:	19800215 	stw	r6,8(r3)
1000574c:	48800115 	stw	r2,4(r9)
10005750:	39800315 	stw	r6,12(r7)
10005754:	8809883a 	mov	r4,r17
10005758:	dfc00217 	ldw	ra,8(sp)
1000575c:	dc400117 	ldw	r17,4(sp)
10005760:	dc000017 	ldw	r16,0(sp)
10005764:	dec00304 	addi	sp,sp,12
10005768:	000de741 	jmpi	1000de74 <__malloc_unlock>
1000576c:	f800283a 	ret
10005770:	1006d27a 	srli	r3,r2,9
10005774:	01000104 	movi	r4,4
10005778:	20c04036 	bltu	r4,r3,1000587c <_free_r+0x244>
1000577c:	1006d1ba 	srli	r3,r2,6
10005780:	19400e04 	addi	r5,r3,56
10005784:	2947883a 	add	r3,r5,r5
10005788:	18c7883a 	add	r3,r3,r3
1000578c:	18c7883a 	add	r3,r3,r3
10005790:	1a49883a 	add	r4,r3,r9
10005794:	20c00217 	ldw	r3,8(r4)
10005798:	01c40074 	movhi	r7,4097
1000579c:	39c3d804 	addi	r7,r7,3936
100057a0:	19003b26 	beq	r3,r4,10005890 <_free_r+0x258>
100057a4:	01ffff04 	movi	r7,-4
100057a8:	19400117 	ldw	r5,4(r3)
100057ac:	29ca703a 	and	r5,r5,r7
100057b0:	1140022e 	bgeu	r2,r5,100057bc <_free_r+0x184>
100057b4:	18c00217 	ldw	r3,8(r3)
100057b8:	20fffb1e 	bne	r4,r3,100057a8 <__alt_data_end+0xf80057a8>
100057bc:	18800317 	ldw	r2,12(r3)
100057c0:	30800315 	stw	r2,12(r6)
100057c4:	30c00215 	stw	r3,8(r6)
100057c8:	11800215 	stw	r6,8(r2)
100057cc:	19800315 	stw	r6,12(r3)
100057d0:	003fe006 	br	10005754 <__alt_data_end+0xf8005754>
100057d4:	2100004c 	andi	r4,r4,1
100057d8:	1885883a 	add	r2,r3,r2
100057dc:	2000071e 	bne	r4,zero,100057fc <_free_r+0x1c4>
100057e0:	817ffe17 	ldw	r5,-8(r16)
100057e4:	314dc83a 	sub	r6,r6,r5
100057e8:	30c00317 	ldw	r3,12(r6)
100057ec:	31000217 	ldw	r4,8(r6)
100057f0:	1145883a 	add	r2,r2,r5
100057f4:	20c00315 	stw	r3,12(r4)
100057f8:	19000215 	stw	r4,8(r3)
100057fc:	10c00054 	ori	r3,r2,1
10005800:	30c00115 	stw	r3,4(r6)
10005804:	00c40074 	movhi	r3,4097
10005808:	18c96004 	addi	r3,r3,9600
1000580c:	18c00017 	ldw	r3,0(r3)
10005810:	49800215 	stw	r6,8(r9)
10005814:	10ffcf36 	bltu	r2,r3,10005754 <__alt_data_end+0xf8005754>
10005818:	00840074 	movhi	r2,4097
1000581c:	1091bb04 	addi	r2,r2,18156
10005820:	11400017 	ldw	r5,0(r2)
10005824:	8809883a 	mov	r4,r17
10005828:	00055140 	call	10005514 <_malloc_trim_r>
1000582c:	003fc906 	br	10005754 <__alt_data_end+0xf8005754>
10005830:	28c9883a 	add	r4,r5,r3
10005834:	21000117 	ldw	r4,4(r4)
10005838:	2100004c 	andi	r4,r4,1
1000583c:	20000a1e 	bne	r4,zero,10005868 <_free_r+0x230>
10005840:	29000317 	ldw	r4,12(r5)
10005844:	29400217 	ldw	r5,8(r5)
10005848:	10c5883a 	add	r2,r2,r3
1000584c:	10c00054 	ori	r3,r2,1
10005850:	29000315 	stw	r4,12(r5)
10005854:	21400215 	stw	r5,8(r4)
10005858:	30c00115 	stw	r3,4(r6)
1000585c:	308d883a 	add	r6,r6,r2
10005860:	30800015 	stw	r2,0(r6)
10005864:	003fbb06 	br	10005754 <__alt_data_end+0xf8005754>
10005868:	10c00054 	ori	r3,r2,1
1000586c:	30c00115 	stw	r3,4(r6)
10005870:	308d883a 	add	r6,r6,r2
10005874:	30800015 	stw	r2,0(r6)
10005878:	003fb606 	br	10005754 <__alt_data_end+0xf8005754>
1000587c:	01000504 	movi	r4,20
10005880:	20c01436 	bltu	r4,r3,100058d4 <_free_r+0x29c>
10005884:	194016c4 	addi	r5,r3,91
10005888:	2947883a 	add	r3,r5,r5
1000588c:	003fbe06 	br	10005788 <__alt_data_end+0xf8005788>
10005890:	280bd0ba 	srai	r5,r5,2
10005894:	00800044 	movi	r2,1
10005898:	39000117 	ldw	r4,4(r7)
1000589c:	114a983a 	sll	r5,r2,r5
100058a0:	1805883a 	mov	r2,r3
100058a4:	2908b03a 	or	r4,r5,r4
100058a8:	39000115 	stw	r4,4(r7)
100058ac:	003fc406 	br	100057c0 <__alt_data_end+0xf80057c0>
100058b0:	49800515 	stw	r6,20(r9)
100058b4:	49800415 	stw	r6,16(r9)
100058b8:	10c00054 	ori	r3,r2,1
100058bc:	31000315 	stw	r4,12(r6)
100058c0:	31000215 	stw	r4,8(r6)
100058c4:	30c00115 	stw	r3,4(r6)
100058c8:	308d883a 	add	r6,r6,r2
100058cc:	30800015 	stw	r2,0(r6)
100058d0:	003fa006 	br	10005754 <__alt_data_end+0xf8005754>
100058d4:	01001504 	movi	r4,84
100058d8:	20c00436 	bltu	r4,r3,100058ec <_free_r+0x2b4>
100058dc:	1006d33a 	srli	r3,r2,12
100058e0:	19401b84 	addi	r5,r3,110
100058e4:	2947883a 	add	r3,r5,r5
100058e8:	003fa706 	br	10005788 <__alt_data_end+0xf8005788>
100058ec:	01005504 	movi	r4,340
100058f0:	20c00436 	bltu	r4,r3,10005904 <_free_r+0x2cc>
100058f4:	1006d3fa 	srli	r3,r2,15
100058f8:	19401dc4 	addi	r5,r3,119
100058fc:	2947883a 	add	r3,r5,r5
10005900:	003fa106 	br	10005788 <__alt_data_end+0xf8005788>
10005904:	01015504 	movi	r4,1364
10005908:	20c00436 	bltu	r4,r3,1000591c <_free_r+0x2e4>
1000590c:	1006d4ba 	srli	r3,r2,18
10005910:	19401f04 	addi	r5,r3,124
10005914:	2947883a 	add	r3,r5,r5
10005918:	003f9b06 	br	10005788 <__alt_data_end+0xf8005788>
1000591c:	00c03f04 	movi	r3,252
10005920:	01401f84 	movi	r5,126
10005924:	003f9806 	br	10005788 <__alt_data_end+0xf8005788>

10005928 <__sfvwrite_r>:
10005928:	30800217 	ldw	r2,8(r6)
1000592c:	10004526 	beq	r2,zero,10005a44 <__sfvwrite_r+0x11c>
10005930:	28c0030b 	ldhu	r3,12(r5)
10005934:	defff404 	addi	sp,sp,-48
10005938:	dd400715 	stw	r21,28(sp)
1000593c:	dcc00515 	stw	r19,20(sp)
10005940:	dc000215 	stw	r16,8(sp)
10005944:	dfc00b15 	stw	ra,44(sp)
10005948:	df000a15 	stw	fp,40(sp)
1000594c:	ddc00915 	stw	r23,36(sp)
10005950:	dd800815 	stw	r22,32(sp)
10005954:	dd000615 	stw	r20,24(sp)
10005958:	dc800415 	stw	r18,16(sp)
1000595c:	dc400315 	stw	r17,12(sp)
10005960:	1880020c 	andi	r2,r3,8
10005964:	2821883a 	mov	r16,r5
10005968:	202b883a 	mov	r21,r4
1000596c:	3027883a 	mov	r19,r6
10005970:	10002526 	beq	r2,zero,10005a08 <__sfvwrite_r+0xe0>
10005974:	28800417 	ldw	r2,16(r5)
10005978:	10002326 	beq	r2,zero,10005a08 <__sfvwrite_r+0xe0>
1000597c:	1880008c 	andi	r2,r3,2
10005980:	9c400017 	ldw	r17,0(r19)
10005984:	10003126 	beq	r2,zero,10005a4c <__sfvwrite_r+0x124>
10005988:	0029883a 	mov	r20,zero
1000598c:	0025883a 	mov	r18,zero
10005990:	05810004 	movi	r22,1024
10005994:	a00d883a 	mov	r6,r20
10005998:	a809883a 	mov	r4,r21
1000599c:	90002526 	beq	r18,zero,10005a34 <__sfvwrite_r+0x10c>
100059a0:	900f883a 	mov	r7,r18
100059a4:	81400717 	ldw	r5,28(r16)
100059a8:	b480012e 	bgeu	r22,r18,100059b0 <__sfvwrite_r+0x88>
100059ac:	01c10004 	movi	r7,1024
100059b0:	80800917 	ldw	r2,36(r16)
100059b4:	103ee83a 	callr	r2
100059b8:	0080510e 	bge	zero,r2,10005b00 <__sfvwrite_r+0x1d8>
100059bc:	98c00217 	ldw	r3,8(r19)
100059c0:	a0a9883a 	add	r20,r20,r2
100059c4:	90a5c83a 	sub	r18,r18,r2
100059c8:	1885c83a 	sub	r2,r3,r2
100059cc:	98800215 	stw	r2,8(r19)
100059d0:	103ff01e 	bne	r2,zero,10005994 <__alt_data_end+0xf8005994>
100059d4:	0005883a 	mov	r2,zero
100059d8:	dfc00b17 	ldw	ra,44(sp)
100059dc:	df000a17 	ldw	fp,40(sp)
100059e0:	ddc00917 	ldw	r23,36(sp)
100059e4:	dd800817 	ldw	r22,32(sp)
100059e8:	dd400717 	ldw	r21,28(sp)
100059ec:	dd000617 	ldw	r20,24(sp)
100059f0:	dcc00517 	ldw	r19,20(sp)
100059f4:	dc800417 	ldw	r18,16(sp)
100059f8:	dc400317 	ldw	r17,12(sp)
100059fc:	dc000217 	ldw	r16,8(sp)
10005a00:	dec00c04 	addi	sp,sp,48
10005a04:	f800283a 	ret
10005a08:	a809883a 	mov	r4,r21
10005a0c:	800b883a 	mov	r5,r16
10005a10:	00034880 	call	10003488 <__swsetup_r>
10005a14:	80c0030b 	ldhu	r3,12(r16)
10005a18:	103fd826 	beq	r2,zero,1000597c <__alt_data_end+0xf800597c>
10005a1c:	18c01014 	ori	r3,r3,64
10005a20:	80c0030d 	sth	r3,12(r16)
10005a24:	00c00244 	movi	r3,9
10005a28:	00bfffc4 	movi	r2,-1
10005a2c:	a8c00015 	stw	r3,0(r21)
10005a30:	003fe906 	br	100059d8 <__alt_data_end+0xf80059d8>
10005a34:	8d000017 	ldw	r20,0(r17)
10005a38:	8c800117 	ldw	r18,4(r17)
10005a3c:	8c400204 	addi	r17,r17,8
10005a40:	003fd406 	br	10005994 <__alt_data_end+0xf8005994>
10005a44:	0005883a 	mov	r2,zero
10005a48:	f800283a 	ret
10005a4c:	1880004c 	andi	r2,r3,1
10005a50:	1000301e 	bne	r2,zero,10005b14 <__sfvwrite_r+0x1ec>
10005a54:	002f883a 	mov	r23,zero
10005a58:	0025883a 	mov	r18,zero
10005a5c:	90001c26 	beq	r18,zero,10005ad0 <__sfvwrite_r+0x1a8>
10005a60:	1880800c 	andi	r2,r3,512
10005a64:	85000217 	ldw	r20,8(r16)
10005a68:	10006c26 	beq	r2,zero,10005c1c <__sfvwrite_r+0x2f4>
10005a6c:	a02d883a 	mov	r22,r20
10005a70:	95008536 	bltu	r18,r20,10005c88 <__sfvwrite_r+0x360>
10005a74:	1881200c 	andi	r2,r3,1152
10005a78:	10009d1e 	bne	r2,zero,10005cf0 <__sfvwrite_r+0x3c8>
10005a7c:	81000017 	ldw	r4,0(r16)
10005a80:	a039883a 	mov	fp,r20
10005a84:	9029883a 	mov	r20,r18
10005a88:	b80b883a 	mov	r5,r23
10005a8c:	b00d883a 	mov	r6,r22
10005a90:	0006a640 	call	10006a64 <memmove>
10005a94:	80c00217 	ldw	r3,8(r16)
10005a98:	81000017 	ldw	r4,0(r16)
10005a9c:	9005883a 	mov	r2,r18
10005aa0:	1f39c83a 	sub	fp,r3,fp
10005aa4:	258f883a 	add	r7,r4,r22
10005aa8:	87000215 	stw	fp,8(r16)
10005aac:	81c00015 	stw	r7,0(r16)
10005ab0:	98c00217 	ldw	r3,8(r19)
10005ab4:	b8af883a 	add	r23,r23,r2
10005ab8:	90a5c83a 	sub	r18,r18,r2
10005abc:	1d05c83a 	sub	r2,r3,r20
10005ac0:	98800215 	stw	r2,8(r19)
10005ac4:	103fc326 	beq	r2,zero,100059d4 <__alt_data_end+0xf80059d4>
10005ac8:	80c0030b 	ldhu	r3,12(r16)
10005acc:	903fe41e 	bne	r18,zero,10005a60 <__alt_data_end+0xf8005a60>
10005ad0:	8dc00017 	ldw	r23,0(r17)
10005ad4:	8c800117 	ldw	r18,4(r17)
10005ad8:	8c400204 	addi	r17,r17,8
10005adc:	003fdf06 	br	10005a5c <__alt_data_end+0xf8005a5c>
10005ae0:	0007d2c0 	call	10007d2c <_realloc_r>
10005ae4:	102d883a 	mov	r22,r2
10005ae8:	1000a01e 	bne	r2,zero,10005d6c <__sfvwrite_r+0x444>
10005aec:	81400417 	ldw	r5,16(r16)
10005af0:	a809883a 	mov	r4,r21
10005af4:	00056380 	call	10005638 <_free_r>
10005af8:	00800304 	movi	r2,12
10005afc:	a8800015 	stw	r2,0(r21)
10005b00:	80c0030b 	ldhu	r3,12(r16)
10005b04:	00bfffc4 	movi	r2,-1
10005b08:	18c01014 	ori	r3,r3,64
10005b0c:	80c0030d 	sth	r3,12(r16)
10005b10:	003fb106 	br	100059d8 <__alt_data_end+0xf80059d8>
10005b14:	0029883a 	mov	r20,zero
10005b18:	0011883a 	mov	r8,zero
10005b1c:	0039883a 	mov	fp,zero
10005b20:	0025883a 	mov	r18,zero
10005b24:	90001f26 	beq	r18,zero,10005ba4 <__sfvwrite_r+0x27c>
10005b28:	40006826 	beq	r8,zero,10005ccc <__sfvwrite_r+0x3a4>
10005b2c:	a02f883a 	mov	r23,r20
10005b30:	9500012e 	bgeu	r18,r20,10005b38 <__sfvwrite_r+0x210>
10005b34:	902f883a 	mov	r23,r18
10005b38:	81000017 	ldw	r4,0(r16)
10005b3c:	80800417 	ldw	r2,16(r16)
10005b40:	b82d883a 	mov	r22,r23
10005b44:	81800217 	ldw	r6,8(r16)
10005b48:	81c00517 	ldw	r7,20(r16)
10005b4c:	1100022e 	bgeu	r2,r4,10005b58 <__sfvwrite_r+0x230>
10005b50:	31c7883a 	add	r3,r6,r7
10005b54:	1dc01816 	blt	r3,r23,10005bb8 <__sfvwrite_r+0x290>
10005b58:	b9c03f16 	blt	r23,r7,10005c58 <__sfvwrite_r+0x330>
10005b5c:	80800917 	ldw	r2,36(r16)
10005b60:	81400717 	ldw	r5,28(r16)
10005b64:	a809883a 	mov	r4,r21
10005b68:	da000115 	stw	r8,4(sp)
10005b6c:	e00d883a 	mov	r6,fp
10005b70:	103ee83a 	callr	r2
10005b74:	102d883a 	mov	r22,r2
10005b78:	da000117 	ldw	r8,4(sp)
10005b7c:	00bfe00e 	bge	zero,r2,10005b00 <__alt_data_end+0xf8005b00>
10005b80:	a5a9c83a 	sub	r20,r20,r22
10005b84:	a0001f26 	beq	r20,zero,10005c04 <__sfvwrite_r+0x2dc>
10005b88:	98800217 	ldw	r2,8(r19)
10005b8c:	e5b9883a 	add	fp,fp,r22
10005b90:	95a5c83a 	sub	r18,r18,r22
10005b94:	15adc83a 	sub	r22,r2,r22
10005b98:	9d800215 	stw	r22,8(r19)
10005b9c:	b03f8d26 	beq	r22,zero,100059d4 <__alt_data_end+0xf80059d4>
10005ba0:	903fe11e 	bne	r18,zero,10005b28 <__alt_data_end+0xf8005b28>
10005ba4:	8f000017 	ldw	fp,0(r17)
10005ba8:	8c800117 	ldw	r18,4(r17)
10005bac:	0011883a 	mov	r8,zero
10005bb0:	8c400204 	addi	r17,r17,8
10005bb4:	003fdb06 	br	10005b24 <__alt_data_end+0xf8005b24>
10005bb8:	180d883a 	mov	r6,r3
10005bbc:	e00b883a 	mov	r5,fp
10005bc0:	da000115 	stw	r8,4(sp)
10005bc4:	d8c00015 	stw	r3,0(sp)
10005bc8:	0006a640 	call	10006a64 <memmove>
10005bcc:	d8c00017 	ldw	r3,0(sp)
10005bd0:	80800017 	ldw	r2,0(r16)
10005bd4:	a809883a 	mov	r4,r21
10005bd8:	800b883a 	mov	r5,r16
10005bdc:	10c5883a 	add	r2,r2,r3
10005be0:	80800015 	stw	r2,0(r16)
10005be4:	d8c00015 	stw	r3,0(sp)
10005be8:	0004f080 	call	10004f08 <_fflush_r>
10005bec:	d8c00017 	ldw	r3,0(sp)
10005bf0:	da000117 	ldw	r8,4(sp)
10005bf4:	103fc21e 	bne	r2,zero,10005b00 <__alt_data_end+0xf8005b00>
10005bf8:	182d883a 	mov	r22,r3
10005bfc:	a5a9c83a 	sub	r20,r20,r22
10005c00:	a03fe11e 	bne	r20,zero,10005b88 <__alt_data_end+0xf8005b88>
10005c04:	a809883a 	mov	r4,r21
10005c08:	800b883a 	mov	r5,r16
10005c0c:	0004f080 	call	10004f08 <_fflush_r>
10005c10:	103fbb1e 	bne	r2,zero,10005b00 <__alt_data_end+0xf8005b00>
10005c14:	0011883a 	mov	r8,zero
10005c18:	003fdb06 	br	10005b88 <__alt_data_end+0xf8005b88>
10005c1c:	81000017 	ldw	r4,0(r16)
10005c20:	80800417 	ldw	r2,16(r16)
10005c24:	1100012e 	bgeu	r2,r4,10005c2c <__sfvwrite_r+0x304>
10005c28:	a4805a36 	bltu	r20,r18,10005d94 <__sfvwrite_r+0x46c>
10005c2c:	81c00517 	ldw	r7,20(r16)
10005c30:	91c01a36 	bltu	r18,r7,10005c9c <__sfvwrite_r+0x374>
10005c34:	80800917 	ldw	r2,36(r16)
10005c38:	81400717 	ldw	r5,28(r16)
10005c3c:	a809883a 	mov	r4,r21
10005c40:	b80d883a 	mov	r6,r23
10005c44:	103ee83a 	callr	r2
10005c48:	1029883a 	mov	r20,r2
10005c4c:	00bfac0e 	bge	zero,r2,10005b00 <__alt_data_end+0xf8005b00>
10005c50:	a005883a 	mov	r2,r20
10005c54:	003f9606 	br	10005ab0 <__alt_data_end+0xf8005ab0>
10005c58:	b80d883a 	mov	r6,r23
10005c5c:	e00b883a 	mov	r5,fp
10005c60:	da000115 	stw	r8,4(sp)
10005c64:	0006a640 	call	10006a64 <memmove>
10005c68:	80800217 	ldw	r2,8(r16)
10005c6c:	80c00017 	ldw	r3,0(r16)
10005c70:	da000117 	ldw	r8,4(sp)
10005c74:	15c5c83a 	sub	r2,r2,r23
10005c78:	1def883a 	add	r23,r3,r23
10005c7c:	80800215 	stw	r2,8(r16)
10005c80:	85c00015 	stw	r23,0(r16)
10005c84:	003fbe06 	br	10005b80 <__alt_data_end+0xf8005b80>
10005c88:	81000017 	ldw	r4,0(r16)
10005c8c:	9039883a 	mov	fp,r18
10005c90:	9029883a 	mov	r20,r18
10005c94:	902d883a 	mov	r22,r18
10005c98:	003f7b06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005c9c:	b80b883a 	mov	r5,r23
10005ca0:	900d883a 	mov	r6,r18
10005ca4:	0006a640 	call	10006a64 <memmove>
10005ca8:	80c00217 	ldw	r3,8(r16)
10005cac:	80800017 	ldw	r2,0(r16)
10005cb0:	9029883a 	mov	r20,r18
10005cb4:	1c87c83a 	sub	r3,r3,r18
10005cb8:	1485883a 	add	r2,r2,r18
10005cbc:	80800015 	stw	r2,0(r16)
10005cc0:	80c00215 	stw	r3,8(r16)
10005cc4:	9005883a 	mov	r2,r18
10005cc8:	003f7906 	br	10005ab0 <__alt_data_end+0xf8005ab0>
10005ccc:	e009883a 	mov	r4,fp
10005cd0:	01400284 	movi	r5,10
10005cd4:	900d883a 	mov	r6,r18
10005cd8:	000697c0 	call	1000697c <memchr>
10005cdc:	10003826 	beq	r2,zero,10005dc0 <__sfvwrite_r+0x498>
10005ce0:	10800044 	addi	r2,r2,1
10005ce4:	1729c83a 	sub	r20,r2,fp
10005ce8:	02000044 	movi	r8,1
10005cec:	003f8f06 	br	10005b2c <__alt_data_end+0xf8005b2c>
10005cf0:	80800517 	ldw	r2,20(r16)
10005cf4:	81400417 	ldw	r5,16(r16)
10005cf8:	87000017 	ldw	fp,0(r16)
10005cfc:	10a9883a 	add	r20,r2,r2
10005d00:	a085883a 	add	r2,r20,r2
10005d04:	1028d7fa 	srli	r20,r2,31
10005d08:	e179c83a 	sub	fp,fp,r5
10005d0c:	e1000044 	addi	r4,fp,1
10005d10:	a085883a 	add	r2,r20,r2
10005d14:	1029d07a 	srai	r20,r2,1
10005d18:	2485883a 	add	r2,r4,r18
10005d1c:	a00d883a 	mov	r6,r20
10005d20:	a080022e 	bgeu	r20,r2,10005d2c <__sfvwrite_r+0x404>
10005d24:	1029883a 	mov	r20,r2
10005d28:	100d883a 	mov	r6,r2
10005d2c:	18c1000c 	andi	r3,r3,1024
10005d30:	a809883a 	mov	r4,r21
10005d34:	183f6a26 	beq	r3,zero,10005ae0 <__alt_data_end+0xf8005ae0>
10005d38:	300b883a 	mov	r5,r6
10005d3c:	00061d40 	call	100061d4 <_malloc_r>
10005d40:	102d883a 	mov	r22,r2
10005d44:	103f6c26 	beq	r2,zero,10005af8 <__alt_data_end+0xf8005af8>
10005d48:	81400417 	ldw	r5,16(r16)
10005d4c:	1009883a 	mov	r4,r2
10005d50:	e00d883a 	mov	r6,fp
10005d54:	00010640 	call	10001064 <memcpy>
10005d58:	8080030b 	ldhu	r2,12(r16)
10005d5c:	00fedfc4 	movi	r3,-1153
10005d60:	10c4703a 	and	r2,r2,r3
10005d64:	10802014 	ori	r2,r2,128
10005d68:	8080030d 	sth	r2,12(r16)
10005d6c:	b709883a 	add	r4,r22,fp
10005d70:	a707c83a 	sub	r3,r20,fp
10005d74:	85800415 	stw	r22,16(r16)
10005d78:	85000515 	stw	r20,20(r16)
10005d7c:	81000015 	stw	r4,0(r16)
10005d80:	9039883a 	mov	fp,r18
10005d84:	80c00215 	stw	r3,8(r16)
10005d88:	9029883a 	mov	r20,r18
10005d8c:	902d883a 	mov	r22,r18
10005d90:	003f3d06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005d94:	b80b883a 	mov	r5,r23
10005d98:	a00d883a 	mov	r6,r20
10005d9c:	0006a640 	call	10006a64 <memmove>
10005da0:	80800017 	ldw	r2,0(r16)
10005da4:	a809883a 	mov	r4,r21
10005da8:	800b883a 	mov	r5,r16
10005dac:	1505883a 	add	r2,r2,r20
10005db0:	80800015 	stw	r2,0(r16)
10005db4:	0004f080 	call	10004f08 <_fflush_r>
10005db8:	103fa526 	beq	r2,zero,10005c50 <__alt_data_end+0xf8005c50>
10005dbc:	003f5006 	br	10005b00 <__alt_data_end+0xf8005b00>
10005dc0:	95000044 	addi	r20,r18,1
10005dc4:	02000044 	movi	r8,1
10005dc8:	003f5806 	br	10005b2c <__alt_data_end+0xf8005b2c>

10005dcc <_fwalk>:
10005dcc:	defff804 	addi	sp,sp,-32
10005dd0:	dd400515 	stw	r21,20(sp)
10005dd4:	2540b804 	addi	r21,r4,736
10005dd8:	dd800615 	stw	r22,24(sp)
10005ddc:	dd000415 	stw	r20,16(sp)
10005de0:	dfc00715 	stw	ra,28(sp)
10005de4:	dcc00315 	stw	r19,12(sp)
10005de8:	dc800215 	stw	r18,8(sp)
10005dec:	dc400115 	stw	r17,4(sp)
10005df0:	dc000015 	stw	r16,0(sp)
10005df4:	2829883a 	mov	r20,r5
10005df8:	002d883a 	mov	r22,zero
10005dfc:	00054d40 	call	100054d4 <__sfp_lock_acquire>
10005e00:	a8001426 	beq	r21,zero,10005e54 <_fwalk+0x88>
10005e04:	04ffffc4 	movi	r19,-1
10005e08:	ac400117 	ldw	r17,4(r21)
10005e0c:	ac800217 	ldw	r18,8(r21)
10005e10:	8c7fffc4 	addi	r17,r17,-1
10005e14:	88000d16 	blt	r17,zero,10005e4c <_fwalk+0x80>
10005e18:	94000304 	addi	r16,r18,12
10005e1c:	94800384 	addi	r18,r18,14
10005e20:	80c0000f 	ldh	r3,0(r16)
10005e24:	8c7fffc4 	addi	r17,r17,-1
10005e28:	813ffd04 	addi	r4,r16,-12
10005e2c:	18000426 	beq	r3,zero,10005e40 <_fwalk+0x74>
10005e30:	90c0000f 	ldh	r3,0(r18)
10005e34:	1cc00226 	beq	r3,r19,10005e40 <_fwalk+0x74>
10005e38:	a03ee83a 	callr	r20
10005e3c:	b0acb03a 	or	r22,r22,r2
10005e40:	84001a04 	addi	r16,r16,104
10005e44:	94801a04 	addi	r18,r18,104
10005e48:	8cfff51e 	bne	r17,r19,10005e20 <__alt_data_end+0xf8005e20>
10005e4c:	ad400017 	ldw	r21,0(r21)
10005e50:	a83fed1e 	bne	r21,zero,10005e08 <__alt_data_end+0xf8005e08>
10005e54:	00054d80 	call	100054d8 <__sfp_lock_release>
10005e58:	b005883a 	mov	r2,r22
10005e5c:	dfc00717 	ldw	ra,28(sp)
10005e60:	dd800617 	ldw	r22,24(sp)
10005e64:	dd400517 	ldw	r21,20(sp)
10005e68:	dd000417 	ldw	r20,16(sp)
10005e6c:	dcc00317 	ldw	r19,12(sp)
10005e70:	dc800217 	ldw	r18,8(sp)
10005e74:	dc400117 	ldw	r17,4(sp)
10005e78:	dc000017 	ldw	r16,0(sp)
10005e7c:	dec00804 	addi	sp,sp,32
10005e80:	f800283a 	ret

10005e84 <_fwalk_reent>:
10005e84:	defff804 	addi	sp,sp,-32
10005e88:	dd400515 	stw	r21,20(sp)
10005e8c:	2540b804 	addi	r21,r4,736
10005e90:	dd800615 	stw	r22,24(sp)
10005e94:	dd000415 	stw	r20,16(sp)
10005e98:	dcc00315 	stw	r19,12(sp)
10005e9c:	dfc00715 	stw	ra,28(sp)
10005ea0:	dc800215 	stw	r18,8(sp)
10005ea4:	dc400115 	stw	r17,4(sp)
10005ea8:	dc000015 	stw	r16,0(sp)
10005eac:	2027883a 	mov	r19,r4
10005eb0:	2829883a 	mov	r20,r5
10005eb4:	002d883a 	mov	r22,zero
10005eb8:	00054d40 	call	100054d4 <__sfp_lock_acquire>
10005ebc:	a8001326 	beq	r21,zero,10005f0c <_fwalk_reent+0x88>
10005ec0:	04bfffc4 	movi	r18,-1
10005ec4:	ac400117 	ldw	r17,4(r21)
10005ec8:	ac000217 	ldw	r16,8(r21)
10005ecc:	8c7fffc4 	addi	r17,r17,-1
10005ed0:	88000c16 	blt	r17,zero,10005f04 <_fwalk_reent+0x80>
10005ed4:	84000304 	addi	r16,r16,12
10005ed8:	80c0000f 	ldh	r3,0(r16)
10005edc:	8c7fffc4 	addi	r17,r17,-1
10005ee0:	817ffd04 	addi	r5,r16,-12
10005ee4:	18000526 	beq	r3,zero,10005efc <_fwalk_reent+0x78>
10005ee8:	80c0008f 	ldh	r3,2(r16)
10005eec:	9809883a 	mov	r4,r19
10005ef0:	1c800226 	beq	r3,r18,10005efc <_fwalk_reent+0x78>
10005ef4:	a03ee83a 	callr	r20
10005ef8:	b0acb03a 	or	r22,r22,r2
10005efc:	84001a04 	addi	r16,r16,104
10005f00:	8cbff51e 	bne	r17,r18,10005ed8 <__alt_data_end+0xf8005ed8>
10005f04:	ad400017 	ldw	r21,0(r21)
10005f08:	a83fee1e 	bne	r21,zero,10005ec4 <__alt_data_end+0xf8005ec4>
10005f0c:	00054d80 	call	100054d8 <__sfp_lock_release>
10005f10:	b005883a 	mov	r2,r22
10005f14:	dfc00717 	ldw	ra,28(sp)
10005f18:	dd800617 	ldw	r22,24(sp)
10005f1c:	dd400517 	ldw	r21,20(sp)
10005f20:	dd000417 	ldw	r20,16(sp)
10005f24:	dcc00317 	ldw	r19,12(sp)
10005f28:	dc800217 	ldw	r18,8(sp)
10005f2c:	dc400117 	ldw	r17,4(sp)
10005f30:	dc000017 	ldw	r16,0(sp)
10005f34:	dec00804 	addi	sp,sp,32
10005f38:	f800283a 	ret

10005f3c <_setlocale_r>:
10005f3c:	30001b26 	beq	r6,zero,10005fac <_setlocale_r+0x70>
10005f40:	01440074 	movhi	r5,4097
10005f44:	defffe04 	addi	sp,sp,-8
10005f48:	29408104 	addi	r5,r5,516
10005f4c:	3009883a 	mov	r4,r6
10005f50:	dc000015 	stw	r16,0(sp)
10005f54:	dfc00115 	stw	ra,4(sp)
10005f58:	3021883a 	mov	r16,r6
10005f5c:	00084d00 	call	100084d0 <strcmp>
10005f60:	1000061e 	bne	r2,zero,10005f7c <_setlocale_r+0x40>
10005f64:	00840074 	movhi	r2,4097
10005f68:	10808004 	addi	r2,r2,512
10005f6c:	dfc00117 	ldw	ra,4(sp)
10005f70:	dc000017 	ldw	r16,0(sp)
10005f74:	dec00204 	addi	sp,sp,8
10005f78:	f800283a 	ret
10005f7c:	01440074 	movhi	r5,4097
10005f80:	29408004 	addi	r5,r5,512
10005f84:	8009883a 	mov	r4,r16
10005f88:	00084d00 	call	100084d0 <strcmp>
10005f8c:	103ff526 	beq	r2,zero,10005f64 <__alt_data_end+0xf8005f64>
10005f90:	01440074 	movhi	r5,4097
10005f94:	29406b04 	addi	r5,r5,428
10005f98:	8009883a 	mov	r4,r16
10005f9c:	00084d00 	call	100084d0 <strcmp>
10005fa0:	103ff026 	beq	r2,zero,10005f64 <__alt_data_end+0xf8005f64>
10005fa4:	0005883a 	mov	r2,zero
10005fa8:	003ff006 	br	10005f6c <__alt_data_end+0xf8005f6c>
10005fac:	00840074 	movhi	r2,4097
10005fb0:	10808004 	addi	r2,r2,512
10005fb4:	f800283a 	ret

10005fb8 <__locale_charset>:
10005fb8:	00840074 	movhi	r2,4097
10005fbc:	1083c204 	addi	r2,r2,3848
10005fc0:	f800283a 	ret

10005fc4 <__locale_mb_cur_max>:
10005fc4:	00840074 	movhi	r2,4097
10005fc8:	10895e04 	addi	r2,r2,9592
10005fcc:	10800017 	ldw	r2,0(r2)
10005fd0:	f800283a 	ret

10005fd4 <__locale_msgcharset>:
10005fd4:	00840074 	movhi	r2,4097
10005fd8:	1083ba04 	addi	r2,r2,3816
10005fdc:	f800283a 	ret

10005fe0 <__locale_cjk_lang>:
10005fe0:	0005883a 	mov	r2,zero
10005fe4:	f800283a 	ret

10005fe8 <_localeconv_r>:
10005fe8:	00840074 	movhi	r2,4097
10005fec:	1083ca04 	addi	r2,r2,3880
10005ff0:	f800283a 	ret

10005ff4 <setlocale>:
10005ff4:	00c40074 	movhi	r3,4097
10005ff8:	18c95d04 	addi	r3,r3,9588
10005ffc:	2005883a 	mov	r2,r4
10006000:	19000017 	ldw	r4,0(r3)
10006004:	280d883a 	mov	r6,r5
10006008:	100b883a 	mov	r5,r2
1000600c:	0005f3c1 	jmpi	10005f3c <_setlocale_r>

10006010 <localeconv>:
10006010:	00840074 	movhi	r2,4097
10006014:	1083ca04 	addi	r2,r2,3880
10006018:	f800283a 	ret

1000601c <__smakebuf_r>:
1000601c:	2880030b 	ldhu	r2,12(r5)
10006020:	10c0008c 	andi	r3,r2,2
10006024:	1800401e 	bne	r3,zero,10006128 <__smakebuf_r+0x10c>
10006028:	deffec04 	addi	sp,sp,-80
1000602c:	dc000f15 	stw	r16,60(sp)
10006030:	2821883a 	mov	r16,r5
10006034:	2940038f 	ldh	r5,14(r5)
10006038:	dc401015 	stw	r17,64(sp)
1000603c:	dfc01315 	stw	ra,76(sp)
10006040:	dcc01215 	stw	r19,72(sp)
10006044:	dc801115 	stw	r18,68(sp)
10006048:	2023883a 	mov	r17,r4
1000604c:	28001b16 	blt	r5,zero,100060bc <__smakebuf_r+0xa0>
10006050:	d80d883a 	mov	r6,sp
10006054:	0009f480 	call	10009f48 <_fstat_r>
10006058:	10001716 	blt	r2,zero,100060b8 <__smakebuf_r+0x9c>
1000605c:	d8800117 	ldw	r2,4(sp)
10006060:	00e00014 	movui	r3,32768
10006064:	10bc000c 	andi	r2,r2,61440
10006068:	10c03726 	beq	r2,r3,10006148 <__smakebuf_r+0x12c>
1000606c:	80c0030b 	ldhu	r3,12(r16)
10006070:	18c20014 	ori	r3,r3,2048
10006074:	80c0030d 	sth	r3,12(r16)
10006078:	00c80004 	movi	r3,8192
1000607c:	10c03c1e 	bne	r2,r3,10006170 <__smakebuf_r+0x154>
10006080:	8140038f 	ldh	r5,14(r16)
10006084:	8809883a 	mov	r4,r17
10006088:	0009fa00 	call	10009fa0 <_isatty_r>
1000608c:	10004e26 	beq	r2,zero,100061c8 <__smakebuf_r+0x1ac>
10006090:	8080030b 	ldhu	r2,12(r16)
10006094:	04c00044 	movi	r19,1
10006098:	80c010c4 	addi	r3,r16,67
1000609c:	14c4b03a 	or	r2,r2,r19
100060a0:	8080030d 	sth	r2,12(r16)
100060a4:	80c00015 	stw	r3,0(r16)
100060a8:	80c00415 	stw	r3,16(r16)
100060ac:	84c00515 	stw	r19,20(r16)
100060b0:	04810004 	movi	r18,1024
100060b4:	00000706 	br	100060d4 <__smakebuf_r+0xb8>
100060b8:	8080030b 	ldhu	r2,12(r16)
100060bc:	10c0200c 	andi	r3,r2,128
100060c0:	18001f1e 	bne	r3,zero,10006140 <__smakebuf_r+0x124>
100060c4:	04810004 	movi	r18,1024
100060c8:	10820014 	ori	r2,r2,2048
100060cc:	8080030d 	sth	r2,12(r16)
100060d0:	0027883a 	mov	r19,zero
100060d4:	8809883a 	mov	r4,r17
100060d8:	900b883a 	mov	r5,r18
100060dc:	00061d40 	call	100061d4 <_malloc_r>
100060e0:	10002e26 	beq	r2,zero,1000619c <__smakebuf_r+0x180>
100060e4:	80c0030b 	ldhu	r3,12(r16)
100060e8:	01040034 	movhi	r4,4096
100060ec:	21145c04 	addi	r4,r4,20848
100060f0:	89000f15 	stw	r4,60(r17)
100060f4:	18c02014 	ori	r3,r3,128
100060f8:	80c0030d 	sth	r3,12(r16)
100060fc:	80800015 	stw	r2,0(r16)
10006100:	80800415 	stw	r2,16(r16)
10006104:	84800515 	stw	r18,20(r16)
10006108:	98001c1e 	bne	r19,zero,1000617c <__smakebuf_r+0x160>
1000610c:	dfc01317 	ldw	ra,76(sp)
10006110:	dcc01217 	ldw	r19,72(sp)
10006114:	dc801117 	ldw	r18,68(sp)
10006118:	dc401017 	ldw	r17,64(sp)
1000611c:	dc000f17 	ldw	r16,60(sp)
10006120:	dec01404 	addi	sp,sp,80
10006124:	f800283a 	ret
10006128:	288010c4 	addi	r2,r5,67
1000612c:	28800015 	stw	r2,0(r5)
10006130:	28800415 	stw	r2,16(r5)
10006134:	00800044 	movi	r2,1
10006138:	28800515 	stw	r2,20(r5)
1000613c:	f800283a 	ret
10006140:	04801004 	movi	r18,64
10006144:	003fe006 	br	100060c8 <__alt_data_end+0xf80060c8>
10006148:	81000a17 	ldw	r4,40(r16)
1000614c:	00c40074 	movhi	r3,4097
10006150:	18e11b04 	addi	r3,r3,-31636
10006154:	20ffc51e 	bne	r4,r3,1000606c <__alt_data_end+0xf800606c>
10006158:	80c0030b 	ldhu	r3,12(r16)
1000615c:	01010004 	movi	r4,1024
10006160:	81001315 	stw	r4,76(r16)
10006164:	1906b03a 	or	r3,r3,r4
10006168:	80c0030d 	sth	r3,12(r16)
1000616c:	003fc206 	br	10006078 <__alt_data_end+0xf8006078>
10006170:	0027883a 	mov	r19,zero
10006174:	04810004 	movi	r18,1024
10006178:	003fd606 	br	100060d4 <__alt_data_end+0xf80060d4>
1000617c:	8140038f 	ldh	r5,14(r16)
10006180:	8809883a 	mov	r4,r17
10006184:	0009fa00 	call	10009fa0 <_isatty_r>
10006188:	103fe026 	beq	r2,zero,1000610c <__alt_data_end+0xf800610c>
1000618c:	8080030b 	ldhu	r2,12(r16)
10006190:	10800054 	ori	r2,r2,1
10006194:	8080030d 	sth	r2,12(r16)
10006198:	003fdc06 	br	1000610c <__alt_data_end+0xf800610c>
1000619c:	8080030b 	ldhu	r2,12(r16)
100061a0:	10c0800c 	andi	r3,r2,512
100061a4:	183fd91e 	bne	r3,zero,1000610c <__alt_data_end+0xf800610c>
100061a8:	10800094 	ori	r2,r2,2
100061ac:	80c010c4 	addi	r3,r16,67
100061b0:	8080030d 	sth	r2,12(r16)
100061b4:	00800044 	movi	r2,1
100061b8:	80c00015 	stw	r3,0(r16)
100061bc:	80c00415 	stw	r3,16(r16)
100061c0:	80800515 	stw	r2,20(r16)
100061c4:	003fd106 	br	1000610c <__alt_data_end+0xf800610c>
100061c8:	04c00044 	movi	r19,1
100061cc:	04810004 	movi	r18,1024
100061d0:	003fc006 	br	100060d4 <__alt_data_end+0xf80060d4>

100061d4 <_malloc_r>:
100061d4:	defff504 	addi	sp,sp,-44
100061d8:	dc800315 	stw	r18,12(sp)
100061dc:	dfc00a15 	stw	ra,40(sp)
100061e0:	df000915 	stw	fp,36(sp)
100061e4:	ddc00815 	stw	r23,32(sp)
100061e8:	dd800715 	stw	r22,28(sp)
100061ec:	dd400615 	stw	r21,24(sp)
100061f0:	dd000515 	stw	r20,20(sp)
100061f4:	dcc00415 	stw	r19,16(sp)
100061f8:	dc400215 	stw	r17,8(sp)
100061fc:	dc000115 	stw	r16,4(sp)
10006200:	288002c4 	addi	r2,r5,11
10006204:	00c00584 	movi	r3,22
10006208:	2025883a 	mov	r18,r4
1000620c:	18802a2e 	bgeu	r3,r2,100062b8 <_malloc_r+0xe4>
10006210:	047ffe04 	movi	r17,-8
10006214:	1462703a 	and	r17,r2,r17
10006218:	88009e16 	blt	r17,zero,10006494 <_malloc_r+0x2c0>
1000621c:	89409d36 	bltu	r17,r5,10006494 <_malloc_r+0x2c0>
10006220:	000de540 	call	1000de54 <__malloc_lock>
10006224:	00807dc4 	movi	r2,503
10006228:	14402736 	bltu	r2,r17,100062c8 <_malloc_r+0xf4>
1000622c:	8806d0fa 	srli	r3,r17,3
10006230:	04c40074 	movhi	r19,4097
10006234:	9cc3d804 	addi	r19,r19,3936
10006238:	18c5883a 	add	r2,r3,r3
1000623c:	1085883a 	add	r2,r2,r2
10006240:	1085883a 	add	r2,r2,r2
10006244:	9885883a 	add	r2,r19,r2
10006248:	14000317 	ldw	r16,12(r2)
1000624c:	80814a26 	beq	r16,r2,10006778 <_malloc_r+0x5a4>
10006250:	80c00117 	ldw	r3,4(r16)
10006254:	81000317 	ldw	r4,12(r16)
10006258:	00bfff04 	movi	r2,-4
1000625c:	1884703a 	and	r2,r3,r2
10006260:	81400217 	ldw	r5,8(r16)
10006264:	8085883a 	add	r2,r16,r2
10006268:	10c00117 	ldw	r3,4(r2)
1000626c:	29000315 	stw	r4,12(r5)
10006270:	21400215 	stw	r5,8(r4)
10006274:	18c00054 	ori	r3,r3,1
10006278:	10c00115 	stw	r3,4(r2)
1000627c:	9009883a 	mov	r4,r18
10006280:	000de740 	call	1000de74 <__malloc_unlock>
10006284:	80800204 	addi	r2,r16,8
10006288:	dfc00a17 	ldw	ra,40(sp)
1000628c:	df000917 	ldw	fp,36(sp)
10006290:	ddc00817 	ldw	r23,32(sp)
10006294:	dd800717 	ldw	r22,28(sp)
10006298:	dd400617 	ldw	r21,24(sp)
1000629c:	dd000517 	ldw	r20,20(sp)
100062a0:	dcc00417 	ldw	r19,16(sp)
100062a4:	dc800317 	ldw	r18,12(sp)
100062a8:	dc400217 	ldw	r17,8(sp)
100062ac:	dc000117 	ldw	r16,4(sp)
100062b0:	dec00b04 	addi	sp,sp,44
100062b4:	f800283a 	ret
100062b8:	04400404 	movi	r17,16
100062bc:	89407536 	bltu	r17,r5,10006494 <_malloc_r+0x2c0>
100062c0:	000de540 	call	1000de54 <__malloc_lock>
100062c4:	003fd906 	br	1000622c <__alt_data_end+0xf800622c>
100062c8:	8806d27a 	srli	r3,r17,9
100062cc:	18007526 	beq	r3,zero,100064a4 <_malloc_r+0x2d0>
100062d0:	00800104 	movi	r2,4
100062d4:	10c0ef36 	bltu	r2,r3,10006694 <_malloc_r+0x4c0>
100062d8:	8806d1ba 	srli	r3,r17,6
100062dc:	19c00e04 	addi	r7,r3,56
100062e0:	39cb883a 	add	r5,r7,r7
100062e4:	04c40074 	movhi	r19,4097
100062e8:	294b883a 	add	r5,r5,r5
100062ec:	9cc3d804 	addi	r19,r19,3936
100062f0:	294b883a 	add	r5,r5,r5
100062f4:	994b883a 	add	r5,r19,r5
100062f8:	2c000317 	ldw	r16,12(r5)
100062fc:	2c000e26 	beq	r5,r16,10006338 <_malloc_r+0x164>
10006300:	80800117 	ldw	r2,4(r16)
10006304:	01bfff04 	movi	r6,-4
10006308:	010003c4 	movi	r4,15
1000630c:	1184703a 	and	r2,r2,r6
10006310:	1447c83a 	sub	r3,r2,r17
10006314:	20c00716 	blt	r4,r3,10006334 <_malloc_r+0x160>
10006318:	1800650e 	bge	r3,zero,100064b0 <_malloc_r+0x2dc>
1000631c:	84000317 	ldw	r16,12(r16)
10006320:	2c000526 	beq	r5,r16,10006338 <_malloc_r+0x164>
10006324:	80800117 	ldw	r2,4(r16)
10006328:	1184703a 	and	r2,r2,r6
1000632c:	1447c83a 	sub	r3,r2,r17
10006330:	20fff90e 	bge	r4,r3,10006318 <__alt_data_end+0xf8006318>
10006334:	39ffffc4 	addi	r7,r7,-1
10006338:	38c00044 	addi	r3,r7,1
1000633c:	01840074 	movhi	r6,4097
10006340:	9c000417 	ldw	r16,16(r19)
10006344:	3183d804 	addi	r6,r6,3936
10006348:	32400204 	addi	r9,r6,8
1000634c:	82410326 	beq	r16,r9,1000675c <_malloc_r+0x588>
10006350:	81000117 	ldw	r4,4(r16)
10006354:	00bfff04 	movi	r2,-4
10006358:	208e703a 	and	r7,r4,r2
1000635c:	3c45c83a 	sub	r2,r7,r17
10006360:	010003c4 	movi	r4,15
10006364:	2080ee16 	blt	r4,r2,10006720 <_malloc_r+0x54c>
10006368:	32400515 	stw	r9,20(r6)
1000636c:	32400415 	stw	r9,16(r6)
10006370:	1000510e 	bge	r2,zero,100064b8 <_malloc_r+0x2e4>
10006374:	00807fc4 	movi	r2,511
10006378:	11c0ce36 	bltu	r2,r7,100066b4 <_malloc_r+0x4e0>
1000637c:	3808d0fa 	srli	r4,r7,3
10006380:	01c00044 	movi	r7,1
10006384:	30800117 	ldw	r2,4(r6)
10006388:	210b883a 	add	r5,r4,r4
1000638c:	294b883a 	add	r5,r5,r5
10006390:	2009d0ba 	srai	r4,r4,2
10006394:	294b883a 	add	r5,r5,r5
10006398:	298b883a 	add	r5,r5,r6
1000639c:	2a000217 	ldw	r8,8(r5)
100063a0:	3908983a 	sll	r4,r7,r4
100063a4:	81400315 	stw	r5,12(r16)
100063a8:	82000215 	stw	r8,8(r16)
100063ac:	2088b03a 	or	r4,r4,r2
100063b0:	2c000215 	stw	r16,8(r5)
100063b4:	31000115 	stw	r4,4(r6)
100063b8:	44000315 	stw	r16,12(r8)
100063bc:	1805d0ba 	srai	r2,r3,2
100063c0:	01400044 	movi	r5,1
100063c4:	288a983a 	sll	r5,r5,r2
100063c8:	21404336 	bltu	r4,r5,100064d8 <_malloc_r+0x304>
100063cc:	2144703a 	and	r2,r4,r5
100063d0:	10000a1e 	bne	r2,zero,100063fc <_malloc_r+0x228>
100063d4:	00bfff04 	movi	r2,-4
100063d8:	294b883a 	add	r5,r5,r5
100063dc:	1886703a 	and	r3,r3,r2
100063e0:	2144703a 	and	r2,r4,r5
100063e4:	18c00104 	addi	r3,r3,4
100063e8:	1000041e 	bne	r2,zero,100063fc <_malloc_r+0x228>
100063ec:	294b883a 	add	r5,r5,r5
100063f0:	2144703a 	and	r2,r4,r5
100063f4:	18c00104 	addi	r3,r3,4
100063f8:	103ffc26 	beq	r2,zero,100063ec <__alt_data_end+0xf80063ec>
100063fc:	023fff04 	movi	r8,-4
10006400:	01c003c4 	movi	r7,15
10006404:	18c5883a 	add	r2,r3,r3
10006408:	1085883a 	add	r2,r2,r2
1000640c:	1085883a 	add	r2,r2,r2
10006410:	9895883a 	add	r10,r19,r2
10006414:	52c00304 	addi	r11,r10,12
10006418:	1819883a 	mov	r12,r3
1000641c:	5c000017 	ldw	r16,0(r11)
10006420:	59bffd04 	addi	r6,r11,-12
10006424:	8180041e 	bne	r16,r6,10006438 <_malloc_r+0x264>
10006428:	0000ce06 	br	10006764 <_malloc_r+0x590>
1000642c:	2000d70e 	bge	r4,zero,1000678c <_malloc_r+0x5b8>
10006430:	84000317 	ldw	r16,12(r16)
10006434:	8180cb26 	beq	r16,r6,10006764 <_malloc_r+0x590>
10006438:	80800117 	ldw	r2,4(r16)
1000643c:	1204703a 	and	r2,r2,r8
10006440:	1449c83a 	sub	r4,r2,r17
10006444:	393ff90e 	bge	r7,r4,1000642c <__alt_data_end+0xf800642c>
10006448:	80800317 	ldw	r2,12(r16)
1000644c:	80c00217 	ldw	r3,8(r16)
10006450:	89400054 	ori	r5,r17,1
10006454:	81400115 	stw	r5,4(r16)
10006458:	18800315 	stw	r2,12(r3)
1000645c:	10c00215 	stw	r3,8(r2)
10006460:	8463883a 	add	r17,r16,r17
10006464:	9c400515 	stw	r17,20(r19)
10006468:	9c400415 	stw	r17,16(r19)
1000646c:	20800054 	ori	r2,r4,1
10006470:	88800115 	stw	r2,4(r17)
10006474:	8a400315 	stw	r9,12(r17)
10006478:	8a400215 	stw	r9,8(r17)
1000647c:	8923883a 	add	r17,r17,r4
10006480:	89000015 	stw	r4,0(r17)
10006484:	9009883a 	mov	r4,r18
10006488:	000de740 	call	1000de74 <__malloc_unlock>
1000648c:	80800204 	addi	r2,r16,8
10006490:	003f7d06 	br	10006288 <__alt_data_end+0xf8006288>
10006494:	00800304 	movi	r2,12
10006498:	90800015 	stw	r2,0(r18)
1000649c:	0005883a 	mov	r2,zero
100064a0:	003f7906 	br	10006288 <__alt_data_end+0xf8006288>
100064a4:	01401f84 	movi	r5,126
100064a8:	01c00fc4 	movi	r7,63
100064ac:	003f8d06 	br	100062e4 <__alt_data_end+0xf80062e4>
100064b0:	81000317 	ldw	r4,12(r16)
100064b4:	003f6a06 	br	10006260 <__alt_data_end+0xf8006260>
100064b8:	81c5883a 	add	r2,r16,r7
100064bc:	10c00117 	ldw	r3,4(r2)
100064c0:	9009883a 	mov	r4,r18
100064c4:	18c00054 	ori	r3,r3,1
100064c8:	10c00115 	stw	r3,4(r2)
100064cc:	000de740 	call	1000de74 <__malloc_unlock>
100064d0:	80800204 	addi	r2,r16,8
100064d4:	003f6c06 	br	10006288 <__alt_data_end+0xf8006288>
100064d8:	9c000217 	ldw	r16,8(r19)
100064dc:	00bfff04 	movi	r2,-4
100064e0:	85800117 	ldw	r22,4(r16)
100064e4:	b0ac703a 	and	r22,r22,r2
100064e8:	b4400336 	bltu	r22,r17,100064f8 <_malloc_r+0x324>
100064ec:	b445c83a 	sub	r2,r22,r17
100064f0:	00c003c4 	movi	r3,15
100064f4:	18805d16 	blt	r3,r2,1000666c <_malloc_r+0x498>
100064f8:	05c40074 	movhi	r23,4097
100064fc:	00840074 	movhi	r2,4097
10006500:	bdc95f04 	addi	r23,r23,9596
10006504:	1091bb04 	addi	r2,r2,18156
10006508:	15400017 	ldw	r21,0(r2)
1000650c:	b9000017 	ldw	r4,0(r23)
10006510:	00ffffc4 	movi	r3,-1
10006514:	858d883a 	add	r6,r16,r22
10006518:	8d6b883a 	add	r21,r17,r21
1000651c:	20c0e426 	beq	r4,r3,100068b0 <_malloc_r+0x6dc>
10006520:	ad4403c4 	addi	r21,r21,4111
10006524:	00fc0004 	movi	r3,-4096
10006528:	a8ea703a 	and	r21,r21,r3
1000652c:	9009883a 	mov	r4,r18
10006530:	a80b883a 	mov	r5,r21
10006534:	d9800015 	stw	r6,0(sp)
10006538:	00083400 	call	10008340 <_sbrk_r>
1000653c:	00ffffc4 	movi	r3,-1
10006540:	1029883a 	mov	r20,r2
10006544:	d9800017 	ldw	r6,0(sp)
10006548:	10c0a426 	beq	r2,r3,100067dc <_malloc_r+0x608>
1000654c:	1180a236 	bltu	r2,r6,100067d8 <_malloc_r+0x604>
10006550:	07040074 	movhi	fp,4097
10006554:	e711c304 	addi	fp,fp,18188
10006558:	e0c00017 	ldw	r3,0(fp)
1000655c:	a8c7883a 	add	r3,r21,r3
10006560:	e0c00015 	stw	r3,0(fp)
10006564:	3500da26 	beq	r6,r20,100068d0 <_malloc_r+0x6fc>
10006568:	b9000017 	ldw	r4,0(r23)
1000656c:	00bfffc4 	movi	r2,-1
10006570:	2080e426 	beq	r4,r2,10006904 <_malloc_r+0x730>
10006574:	a185c83a 	sub	r2,r20,r6
10006578:	1885883a 	add	r2,r3,r2
1000657c:	e0800015 	stw	r2,0(fp)
10006580:	a0c001cc 	andi	r3,r20,7
10006584:	1800b526 	beq	r3,zero,1000685c <_malloc_r+0x688>
10006588:	a0e9c83a 	sub	r20,r20,r3
1000658c:	00840204 	movi	r2,4104
10006590:	a5000204 	addi	r20,r20,8
10006594:	10c7c83a 	sub	r3,r2,r3
10006598:	a545883a 	add	r2,r20,r21
1000659c:	1083ffcc 	andi	r2,r2,4095
100065a0:	18abc83a 	sub	r21,r3,r2
100065a4:	9009883a 	mov	r4,r18
100065a8:	a80b883a 	mov	r5,r21
100065ac:	00083400 	call	10008340 <_sbrk_r>
100065b0:	00ffffc4 	movi	r3,-1
100065b4:	10c0d026 	beq	r2,r3,100068f8 <_malloc_r+0x724>
100065b8:	1507c83a 	sub	r3,r2,r20
100065bc:	a8c7883a 	add	r3,r21,r3
100065c0:	18c00054 	ori	r3,r3,1
100065c4:	e0800017 	ldw	r2,0(fp)
100065c8:	9d000215 	stw	r20,8(r19)
100065cc:	a0c00115 	stw	r3,4(r20)
100065d0:	a887883a 	add	r3,r21,r2
100065d4:	e0c00015 	stw	r3,0(fp)
100065d8:	84c00e26 	beq	r16,r19,10006614 <_malloc_r+0x440>
100065dc:	018003c4 	movi	r6,15
100065e0:	3580a02e 	bgeu	r6,r22,10006864 <_malloc_r+0x690>
100065e4:	81400117 	ldw	r5,4(r16)
100065e8:	013ffe04 	movi	r4,-8
100065ec:	b0bffd04 	addi	r2,r22,-12
100065f0:	1104703a 	and	r2,r2,r4
100065f4:	2900004c 	andi	r4,r5,1
100065f8:	1108b03a 	or	r4,r2,r4
100065fc:	81000115 	stw	r4,4(r16)
10006600:	01400144 	movi	r5,5
10006604:	8089883a 	add	r4,r16,r2
10006608:	21400115 	stw	r5,4(r4)
1000660c:	21400215 	stw	r5,8(r4)
10006610:	3080c036 	bltu	r6,r2,10006914 <_malloc_r+0x740>
10006614:	00840074 	movhi	r2,4097
10006618:	1091ba04 	addi	r2,r2,18152
1000661c:	11000017 	ldw	r4,0(r2)
10006620:	20c0012e 	bgeu	r4,r3,10006628 <_malloc_r+0x454>
10006624:	10c00015 	stw	r3,0(r2)
10006628:	00840074 	movhi	r2,4097
1000662c:	1091b904 	addi	r2,r2,18148
10006630:	11000017 	ldw	r4,0(r2)
10006634:	9c000217 	ldw	r16,8(r19)
10006638:	20c0012e 	bgeu	r4,r3,10006640 <_malloc_r+0x46c>
1000663c:	10c00015 	stw	r3,0(r2)
10006640:	80c00117 	ldw	r3,4(r16)
10006644:	00bfff04 	movi	r2,-4
10006648:	1886703a 	and	r3,r3,r2
1000664c:	1c45c83a 	sub	r2,r3,r17
10006650:	1c400236 	bltu	r3,r17,1000665c <_malloc_r+0x488>
10006654:	00c003c4 	movi	r3,15
10006658:	18800416 	blt	r3,r2,1000666c <_malloc_r+0x498>
1000665c:	9009883a 	mov	r4,r18
10006660:	000de740 	call	1000de74 <__malloc_unlock>
10006664:	0005883a 	mov	r2,zero
10006668:	003f0706 	br	10006288 <__alt_data_end+0xf8006288>
1000666c:	88c00054 	ori	r3,r17,1
10006670:	80c00115 	stw	r3,4(r16)
10006674:	8463883a 	add	r17,r16,r17
10006678:	10800054 	ori	r2,r2,1
1000667c:	9c400215 	stw	r17,8(r19)
10006680:	88800115 	stw	r2,4(r17)
10006684:	9009883a 	mov	r4,r18
10006688:	000de740 	call	1000de74 <__malloc_unlock>
1000668c:	80800204 	addi	r2,r16,8
10006690:	003efd06 	br	10006288 <__alt_data_end+0xf8006288>
10006694:	00800504 	movi	r2,20
10006698:	10c0482e 	bgeu	r2,r3,100067bc <_malloc_r+0x5e8>
1000669c:	00801504 	movi	r2,84
100066a0:	10c06836 	bltu	r2,r3,10006844 <_malloc_r+0x670>
100066a4:	8806d33a 	srli	r3,r17,12
100066a8:	19c01b84 	addi	r7,r3,110
100066ac:	39cb883a 	add	r5,r7,r7
100066b0:	003f0c06 	br	100062e4 <__alt_data_end+0xf80062e4>
100066b4:	3804d27a 	srli	r2,r7,9
100066b8:	01000104 	movi	r4,4
100066bc:	2080422e 	bgeu	r4,r2,100067c8 <_malloc_r+0x5f4>
100066c0:	01000504 	movi	r4,20
100066c4:	20807c36 	bltu	r4,r2,100068b8 <_malloc_r+0x6e4>
100066c8:	110016c4 	addi	r4,r2,91
100066cc:	210b883a 	add	r5,r4,r4
100066d0:	294b883a 	add	r5,r5,r5
100066d4:	294b883a 	add	r5,r5,r5
100066d8:	994b883a 	add	r5,r19,r5
100066dc:	28800217 	ldw	r2,8(r5)
100066e0:	02040074 	movhi	r8,4097
100066e4:	4203d804 	addi	r8,r8,3936
100066e8:	11406326 	beq	r2,r5,10006878 <_malloc_r+0x6a4>
100066ec:	01bfff04 	movi	r6,-4
100066f0:	11000117 	ldw	r4,4(r2)
100066f4:	2188703a 	and	r4,r4,r6
100066f8:	3900022e 	bgeu	r7,r4,10006704 <_malloc_r+0x530>
100066fc:	10800217 	ldw	r2,8(r2)
10006700:	28bffb1e 	bne	r5,r2,100066f0 <__alt_data_end+0xf80066f0>
10006704:	11800317 	ldw	r6,12(r2)
10006708:	99000117 	ldw	r4,4(r19)
1000670c:	81800315 	stw	r6,12(r16)
10006710:	80800215 	stw	r2,8(r16)
10006714:	34000215 	stw	r16,8(r6)
10006718:	14000315 	stw	r16,12(r2)
1000671c:	003f2706 	br	100063bc <__alt_data_end+0xf80063bc>
10006720:	88c00054 	ori	r3,r17,1
10006724:	80c00115 	stw	r3,4(r16)
10006728:	8463883a 	add	r17,r16,r17
1000672c:	34400515 	stw	r17,20(r6)
10006730:	34400415 	stw	r17,16(r6)
10006734:	10c00054 	ori	r3,r2,1
10006738:	8a400315 	stw	r9,12(r17)
1000673c:	8a400215 	stw	r9,8(r17)
10006740:	88c00115 	stw	r3,4(r17)
10006744:	88a3883a 	add	r17,r17,r2
10006748:	88800015 	stw	r2,0(r17)
1000674c:	9009883a 	mov	r4,r18
10006750:	000de740 	call	1000de74 <__malloc_unlock>
10006754:	80800204 	addi	r2,r16,8
10006758:	003ecb06 	br	10006288 <__alt_data_end+0xf8006288>
1000675c:	31000117 	ldw	r4,4(r6)
10006760:	003f1606 	br	100063bc <__alt_data_end+0xf80063bc>
10006764:	63000044 	addi	r12,r12,1
10006768:	608000cc 	andi	r2,r12,3
1000676c:	5ac00204 	addi	r11,r11,8
10006770:	103f2a1e 	bne	r2,zero,1000641c <__alt_data_end+0xf800641c>
10006774:	00002106 	br	100067fc <_malloc_r+0x628>
10006778:	80800204 	addi	r2,r16,8
1000677c:	84000517 	ldw	r16,20(r16)
10006780:	143eb31e 	bne	r2,r16,10006250 <__alt_data_end+0xf8006250>
10006784:	18c00084 	addi	r3,r3,2
10006788:	003eec06 	br	1000633c <__alt_data_end+0xf800633c>
1000678c:	8085883a 	add	r2,r16,r2
10006790:	10c00117 	ldw	r3,4(r2)
10006794:	81000317 	ldw	r4,12(r16)
10006798:	81400217 	ldw	r5,8(r16)
1000679c:	18c00054 	ori	r3,r3,1
100067a0:	10c00115 	stw	r3,4(r2)
100067a4:	29000315 	stw	r4,12(r5)
100067a8:	21400215 	stw	r5,8(r4)
100067ac:	9009883a 	mov	r4,r18
100067b0:	000de740 	call	1000de74 <__malloc_unlock>
100067b4:	80800204 	addi	r2,r16,8
100067b8:	003eb306 	br	10006288 <__alt_data_end+0xf8006288>
100067bc:	19c016c4 	addi	r7,r3,91
100067c0:	39cb883a 	add	r5,r7,r7
100067c4:	003ec706 	br	100062e4 <__alt_data_end+0xf80062e4>
100067c8:	3804d1ba 	srli	r2,r7,6
100067cc:	11000e04 	addi	r4,r2,56
100067d0:	210b883a 	add	r5,r4,r4
100067d4:	003fbe06 	br	100066d0 <__alt_data_end+0xf80066d0>
100067d8:	84ff5d26 	beq	r16,r19,10006550 <__alt_data_end+0xf8006550>
100067dc:	9c000217 	ldw	r16,8(r19)
100067e0:	00bfff04 	movi	r2,-4
100067e4:	80c00117 	ldw	r3,4(r16)
100067e8:	1886703a 	and	r3,r3,r2
100067ec:	003f9706 	br	1000664c <__alt_data_end+0xf800664c>
100067f0:	52800017 	ldw	r10,0(r10)
100067f4:	18ffffc4 	addi	r3,r3,-1
100067f8:	50805c1e 	bne	r10,r2,1000696c <_malloc_r+0x798>
100067fc:	190000cc 	andi	r4,r3,3
10006800:	50bffe04 	addi	r2,r10,-8
10006804:	203ffa1e 	bne	r4,zero,100067f0 <__alt_data_end+0xf80067f0>
10006808:	98800117 	ldw	r2,4(r19)
1000680c:	0146303a 	nor	r3,zero,r5
10006810:	1884703a 	and	r2,r3,r2
10006814:	98800115 	stw	r2,4(r19)
10006818:	294b883a 	add	r5,r5,r5
1000681c:	117f2e36 	bltu	r2,r5,100064d8 <__alt_data_end+0xf80064d8>
10006820:	283f2d26 	beq	r5,zero,100064d8 <__alt_data_end+0xf80064d8>
10006824:	1146703a 	and	r3,r2,r5
10006828:	1800521e 	bne	r3,zero,10006974 <_malloc_r+0x7a0>
1000682c:	6007883a 	mov	r3,r12
10006830:	294b883a 	add	r5,r5,r5
10006834:	1148703a 	and	r4,r2,r5
10006838:	18c00104 	addi	r3,r3,4
1000683c:	203ffc26 	beq	r4,zero,10006830 <__alt_data_end+0xf8006830>
10006840:	003ef006 	br	10006404 <__alt_data_end+0xf8006404>
10006844:	00805504 	movi	r2,340
10006848:	10c01336 	bltu	r2,r3,10006898 <_malloc_r+0x6c4>
1000684c:	8806d3fa 	srli	r3,r17,15
10006850:	19c01dc4 	addi	r7,r3,119
10006854:	39cb883a 	add	r5,r7,r7
10006858:	003ea206 	br	100062e4 <__alt_data_end+0xf80062e4>
1000685c:	00c40004 	movi	r3,4096
10006860:	003f4d06 	br	10006598 <__alt_data_end+0xf8006598>
10006864:	00800044 	movi	r2,1
10006868:	a0800115 	stw	r2,4(r20)
1000686c:	a021883a 	mov	r16,r20
10006870:	0007883a 	mov	r3,zero
10006874:	003f7506 	br	1000664c <__alt_data_end+0xf800664c>
10006878:	200bd0ba 	srai	r5,r4,2
1000687c:	01800044 	movi	r6,1
10006880:	41000117 	ldw	r4,4(r8)
10006884:	314a983a 	sll	r5,r6,r5
10006888:	100d883a 	mov	r6,r2
1000688c:	2908b03a 	or	r4,r5,r4
10006890:	41000115 	stw	r4,4(r8)
10006894:	003f9d06 	br	1000670c <__alt_data_end+0xf800670c>
10006898:	00815504 	movi	r2,1364
1000689c:	10c01336 	bltu	r2,r3,100068ec <_malloc_r+0x718>
100068a0:	8806d4ba 	srli	r3,r17,18
100068a4:	19c01f04 	addi	r7,r3,124
100068a8:	39cb883a 	add	r5,r7,r7
100068ac:	003e8d06 	br	100062e4 <__alt_data_end+0xf80062e4>
100068b0:	ad400404 	addi	r21,r21,16
100068b4:	003f1d06 	br	1000652c <__alt_data_end+0xf800652c>
100068b8:	01001504 	movi	r4,84
100068bc:	20801c36 	bltu	r4,r2,10006930 <_malloc_r+0x75c>
100068c0:	3804d33a 	srli	r2,r7,12
100068c4:	11001b84 	addi	r4,r2,110
100068c8:	210b883a 	add	r5,r4,r4
100068cc:	003f8006 	br	100066d0 <__alt_data_end+0xf80066d0>
100068d0:	3083ffcc 	andi	r2,r6,4095
100068d4:	103f241e 	bne	r2,zero,10006568 <__alt_data_end+0xf8006568>
100068d8:	99000217 	ldw	r4,8(r19)
100068dc:	ad85883a 	add	r2,r21,r22
100068e0:	10800054 	ori	r2,r2,1
100068e4:	20800115 	stw	r2,4(r4)
100068e8:	003f4a06 	br	10006614 <__alt_data_end+0xf8006614>
100068ec:	01403f04 	movi	r5,252
100068f0:	01c01f84 	movi	r7,126
100068f4:	003e7b06 	br	100062e4 <__alt_data_end+0xf80062e4>
100068f8:	00c00044 	movi	r3,1
100068fc:	002b883a 	mov	r21,zero
10006900:	003f3006 	br	100065c4 <__alt_data_end+0xf80065c4>
10006904:	00840074 	movhi	r2,4097
10006908:	10895f04 	addi	r2,r2,9596
1000690c:	15000015 	stw	r20,0(r2)
10006910:	003f1b06 	br	10006580 <__alt_data_end+0xf8006580>
10006914:	9009883a 	mov	r4,r18
10006918:	81400204 	addi	r5,r16,8
1000691c:	00056380 	call	10005638 <_free_r>
10006920:	00840074 	movhi	r2,4097
10006924:	1091c304 	addi	r2,r2,18188
10006928:	10c00017 	ldw	r3,0(r2)
1000692c:	003f3906 	br	10006614 <__alt_data_end+0xf8006614>
10006930:	01005504 	movi	r4,340
10006934:	20800436 	bltu	r4,r2,10006948 <_malloc_r+0x774>
10006938:	3804d3fa 	srli	r2,r7,15
1000693c:	11001dc4 	addi	r4,r2,119
10006940:	210b883a 	add	r5,r4,r4
10006944:	003f6206 	br	100066d0 <__alt_data_end+0xf80066d0>
10006948:	01015504 	movi	r4,1364
1000694c:	20800436 	bltu	r4,r2,10006960 <_malloc_r+0x78c>
10006950:	3804d4ba 	srli	r2,r7,18
10006954:	11001f04 	addi	r4,r2,124
10006958:	210b883a 	add	r5,r4,r4
1000695c:	003f5c06 	br	100066d0 <__alt_data_end+0xf80066d0>
10006960:	01403f04 	movi	r5,252
10006964:	01001f84 	movi	r4,126
10006968:	003f5906 	br	100066d0 <__alt_data_end+0xf80066d0>
1000696c:	98800117 	ldw	r2,4(r19)
10006970:	003fa906 	br	10006818 <__alt_data_end+0xf8006818>
10006974:	6007883a 	mov	r3,r12
10006978:	003ea206 	br	10006404 <__alt_data_end+0xf8006404>

1000697c <memchr>:
1000697c:	208000cc 	andi	r2,r4,3
10006980:	280f883a 	mov	r7,r5
10006984:	10003526 	beq	r2,zero,10006a5c <memchr+0xe0>
10006988:	30bfffc4 	addi	r2,r6,-1
1000698c:	30001b26 	beq	r6,zero,100069fc <memchr+0x80>
10006990:	21800003 	ldbu	r6,0(r4)
10006994:	28c03fcc 	andi	r3,r5,255
10006998:	30c01a26 	beq	r6,r3,10006a04 <memchr+0x88>
1000699c:	180d883a 	mov	r6,r3
100069a0:	00000406 	br	100069b4 <memchr+0x38>
100069a4:	10001526 	beq	r2,zero,100069fc <memchr+0x80>
100069a8:	20c00003 	ldbu	r3,0(r4)
100069ac:	10bfffc4 	addi	r2,r2,-1
100069b0:	19801426 	beq	r3,r6,10006a04 <memchr+0x88>
100069b4:	21000044 	addi	r4,r4,1
100069b8:	20c000cc 	andi	r3,r4,3
100069bc:	183ff91e 	bne	r3,zero,100069a4 <__alt_data_end+0xf80069a4>
100069c0:	024000c4 	movi	r9,3
100069c4:	48801136 	bltu	r9,r2,10006a0c <memchr+0x90>
100069c8:	10000c26 	beq	r2,zero,100069fc <memchr+0x80>
100069cc:	20c00003 	ldbu	r3,0(r4)
100069d0:	29403fcc 	andi	r5,r5,255
100069d4:	19400b26 	beq	r3,r5,10006a04 <memchr+0x88>
100069d8:	20c00044 	addi	r3,r4,1
100069dc:	2085883a 	add	r2,r4,r2
100069e0:	39803fcc 	andi	r6,r7,255
100069e4:	00000306 	br	100069f4 <memchr+0x78>
100069e8:	18c00044 	addi	r3,r3,1
100069ec:	197fffc3 	ldbu	r5,-1(r3)
100069f0:	29800426 	beq	r5,r6,10006a04 <memchr+0x88>
100069f4:	1809883a 	mov	r4,r3
100069f8:	18bffb1e 	bne	r3,r2,100069e8 <__alt_data_end+0xf80069e8>
100069fc:	0005883a 	mov	r2,zero
10006a00:	f800283a 	ret
10006a04:	2005883a 	mov	r2,r4
10006a08:	f800283a 	ret
10006a0c:	28c03fcc 	andi	r3,r5,255
10006a10:	1810923a 	slli	r8,r3,8
10006a14:	02ffbff4 	movhi	r11,65279
10006a18:	02a02074 	movhi	r10,32897
10006a1c:	40c6b03a 	or	r3,r8,r3
10006a20:	1810943a 	slli	r8,r3,16
10006a24:	5affbfc4 	addi	r11,r11,-257
10006a28:	52a02004 	addi	r10,r10,-32640
10006a2c:	40d0b03a 	or	r8,r8,r3
10006a30:	20c00017 	ldw	r3,0(r4)
10006a34:	40c6f03a 	xor	r3,r8,r3
10006a38:	1acd883a 	add	r6,r3,r11
10006a3c:	00c6303a 	nor	r3,zero,r3
10006a40:	30c6703a 	and	r3,r6,r3
10006a44:	1a86703a 	and	r3,r3,r10
10006a48:	183fdf1e 	bne	r3,zero,100069c8 <__alt_data_end+0xf80069c8>
10006a4c:	10bfff04 	addi	r2,r2,-4
10006a50:	21000104 	addi	r4,r4,4
10006a54:	48bff636 	bltu	r9,r2,10006a30 <__alt_data_end+0xf8006a30>
10006a58:	003fdb06 	br	100069c8 <__alt_data_end+0xf80069c8>
10006a5c:	3005883a 	mov	r2,r6
10006a60:	003fd706 	br	100069c0 <__alt_data_end+0xf80069c0>

10006a64 <memmove>:
10006a64:	2005883a 	mov	r2,r4
10006a68:	29000b2e 	bgeu	r5,r4,10006a98 <memmove+0x34>
10006a6c:	298f883a 	add	r7,r5,r6
10006a70:	21c0092e 	bgeu	r4,r7,10006a98 <memmove+0x34>
10006a74:	2187883a 	add	r3,r4,r6
10006a78:	198bc83a 	sub	r5,r3,r6
10006a7c:	30004b26 	beq	r6,zero,10006bac <memmove+0x148>
10006a80:	39ffffc4 	addi	r7,r7,-1
10006a84:	39000003 	ldbu	r4,0(r7)
10006a88:	18ffffc4 	addi	r3,r3,-1
10006a8c:	19000005 	stb	r4,0(r3)
10006a90:	197ffb1e 	bne	r3,r5,10006a80 <__alt_data_end+0xf8006a80>
10006a94:	f800283a 	ret
10006a98:	00c003c4 	movi	r3,15
10006a9c:	1980412e 	bgeu	r3,r6,10006ba4 <memmove+0x140>
10006aa0:	1146b03a 	or	r3,r2,r5
10006aa4:	18c000cc 	andi	r3,r3,3
10006aa8:	1800411e 	bne	r3,zero,10006bb0 <memmove+0x14c>
10006aac:	33fffc04 	addi	r15,r6,-16
10006ab0:	781ed13a 	srli	r15,r15,4
10006ab4:	28c00104 	addi	r3,r5,4
10006ab8:	13400104 	addi	r13,r2,4
10006abc:	781c913a 	slli	r14,r15,4
10006ac0:	2b000204 	addi	r12,r5,8
10006ac4:	12c00204 	addi	r11,r2,8
10006ac8:	73800504 	addi	r14,r14,20
10006acc:	2a800304 	addi	r10,r5,12
10006ad0:	12400304 	addi	r9,r2,12
10006ad4:	2b9d883a 	add	r14,r5,r14
10006ad8:	2811883a 	mov	r8,r5
10006adc:	100f883a 	mov	r7,r2
10006ae0:	41000017 	ldw	r4,0(r8)
10006ae4:	39c00404 	addi	r7,r7,16
10006ae8:	18c00404 	addi	r3,r3,16
10006aec:	393ffc15 	stw	r4,-16(r7)
10006af0:	193ffc17 	ldw	r4,-16(r3)
10006af4:	6b400404 	addi	r13,r13,16
10006af8:	5ac00404 	addi	r11,r11,16
10006afc:	693ffc15 	stw	r4,-16(r13)
10006b00:	61000017 	ldw	r4,0(r12)
10006b04:	4a400404 	addi	r9,r9,16
10006b08:	42000404 	addi	r8,r8,16
10006b0c:	593ffc15 	stw	r4,-16(r11)
10006b10:	51000017 	ldw	r4,0(r10)
10006b14:	63000404 	addi	r12,r12,16
10006b18:	52800404 	addi	r10,r10,16
10006b1c:	493ffc15 	stw	r4,-16(r9)
10006b20:	1bbfef1e 	bne	r3,r14,10006ae0 <__alt_data_end+0xf8006ae0>
10006b24:	79000044 	addi	r4,r15,1
10006b28:	2008913a 	slli	r4,r4,4
10006b2c:	328003cc 	andi	r10,r6,15
10006b30:	02c000c4 	movi	r11,3
10006b34:	1107883a 	add	r3,r2,r4
10006b38:	290b883a 	add	r5,r5,r4
10006b3c:	5a801e2e 	bgeu	r11,r10,10006bb8 <memmove+0x154>
10006b40:	1813883a 	mov	r9,r3
10006b44:	2811883a 	mov	r8,r5
10006b48:	500f883a 	mov	r7,r10
10006b4c:	41000017 	ldw	r4,0(r8)
10006b50:	4a400104 	addi	r9,r9,4
10006b54:	39ffff04 	addi	r7,r7,-4
10006b58:	493fff15 	stw	r4,-4(r9)
10006b5c:	42000104 	addi	r8,r8,4
10006b60:	59fffa36 	bltu	r11,r7,10006b4c <__alt_data_end+0xf8006b4c>
10006b64:	513fff04 	addi	r4,r10,-4
10006b68:	2008d0ba 	srli	r4,r4,2
10006b6c:	318000cc 	andi	r6,r6,3
10006b70:	21000044 	addi	r4,r4,1
10006b74:	2109883a 	add	r4,r4,r4
10006b78:	2109883a 	add	r4,r4,r4
10006b7c:	1907883a 	add	r3,r3,r4
10006b80:	290b883a 	add	r5,r5,r4
10006b84:	30000926 	beq	r6,zero,10006bac <memmove+0x148>
10006b88:	198d883a 	add	r6,r3,r6
10006b8c:	29c00003 	ldbu	r7,0(r5)
10006b90:	18c00044 	addi	r3,r3,1
10006b94:	29400044 	addi	r5,r5,1
10006b98:	19ffffc5 	stb	r7,-1(r3)
10006b9c:	19bffb1e 	bne	r3,r6,10006b8c <__alt_data_end+0xf8006b8c>
10006ba0:	f800283a 	ret
10006ba4:	1007883a 	mov	r3,r2
10006ba8:	003ff606 	br	10006b84 <__alt_data_end+0xf8006b84>
10006bac:	f800283a 	ret
10006bb0:	1007883a 	mov	r3,r2
10006bb4:	003ff406 	br	10006b88 <__alt_data_end+0xf8006b88>
10006bb8:	500d883a 	mov	r6,r10
10006bbc:	003ff106 	br	10006b84 <__alt_data_end+0xf8006b84>

10006bc0 <memset>:
10006bc0:	20c000cc 	andi	r3,r4,3
10006bc4:	2005883a 	mov	r2,r4
10006bc8:	18004326 	beq	r3,zero,10006cd8 <memset+0x118>
10006bcc:	31ffffc4 	addi	r7,r6,-1
10006bd0:	30004026 	beq	r6,zero,10006cd4 <memset+0x114>
10006bd4:	2813883a 	mov	r9,r5
10006bd8:	200d883a 	mov	r6,r4
10006bdc:	2007883a 	mov	r3,r4
10006be0:	00000406 	br	10006bf4 <memset+0x34>
10006be4:	3a3fffc4 	addi	r8,r7,-1
10006be8:	31800044 	addi	r6,r6,1
10006bec:	38003926 	beq	r7,zero,10006cd4 <memset+0x114>
10006bf0:	400f883a 	mov	r7,r8
10006bf4:	18c00044 	addi	r3,r3,1
10006bf8:	32400005 	stb	r9,0(r6)
10006bfc:	1a0000cc 	andi	r8,r3,3
10006c00:	403ff81e 	bne	r8,zero,10006be4 <__alt_data_end+0xf8006be4>
10006c04:	010000c4 	movi	r4,3
10006c08:	21c02d2e 	bgeu	r4,r7,10006cc0 <memset+0x100>
10006c0c:	29803fcc 	andi	r6,r5,255
10006c10:	3008923a 	slli	r4,r6,8
10006c14:	218cb03a 	or	r6,r4,r6
10006c18:	3008943a 	slli	r4,r6,16
10006c1c:	218cb03a 	or	r6,r4,r6
10006c20:	010003c4 	movi	r4,15
10006c24:	21c0182e 	bgeu	r4,r7,10006c88 <memset+0xc8>
10006c28:	3b3ffc04 	addi	r12,r7,-16
10006c2c:	6018d13a 	srli	r12,r12,4
10006c30:	1a000104 	addi	r8,r3,4
10006c34:	1ac00204 	addi	r11,r3,8
10006c38:	6008913a 	slli	r4,r12,4
10006c3c:	1a800304 	addi	r10,r3,12
10006c40:	1813883a 	mov	r9,r3
10006c44:	21000504 	addi	r4,r4,20
10006c48:	1909883a 	add	r4,r3,r4
10006c4c:	49800015 	stw	r6,0(r9)
10006c50:	41800015 	stw	r6,0(r8)
10006c54:	59800015 	stw	r6,0(r11)
10006c58:	51800015 	stw	r6,0(r10)
10006c5c:	42000404 	addi	r8,r8,16
10006c60:	4a400404 	addi	r9,r9,16
10006c64:	5ac00404 	addi	r11,r11,16
10006c68:	52800404 	addi	r10,r10,16
10006c6c:	413ff71e 	bne	r8,r4,10006c4c <__alt_data_end+0xf8006c4c>
10006c70:	63000044 	addi	r12,r12,1
10006c74:	6018913a 	slli	r12,r12,4
10006c78:	39c003cc 	andi	r7,r7,15
10006c7c:	010000c4 	movi	r4,3
10006c80:	1b07883a 	add	r3,r3,r12
10006c84:	21c00e2e 	bgeu	r4,r7,10006cc0 <memset+0x100>
10006c88:	1813883a 	mov	r9,r3
10006c8c:	3811883a 	mov	r8,r7
10006c90:	010000c4 	movi	r4,3
10006c94:	49800015 	stw	r6,0(r9)
10006c98:	423fff04 	addi	r8,r8,-4
10006c9c:	4a400104 	addi	r9,r9,4
10006ca0:	223ffc36 	bltu	r4,r8,10006c94 <__alt_data_end+0xf8006c94>
10006ca4:	393fff04 	addi	r4,r7,-4
10006ca8:	2008d0ba 	srli	r4,r4,2
10006cac:	39c000cc 	andi	r7,r7,3
10006cb0:	21000044 	addi	r4,r4,1
10006cb4:	2109883a 	add	r4,r4,r4
10006cb8:	2109883a 	add	r4,r4,r4
10006cbc:	1907883a 	add	r3,r3,r4
10006cc0:	38000426 	beq	r7,zero,10006cd4 <memset+0x114>
10006cc4:	19cf883a 	add	r7,r3,r7
10006cc8:	19400005 	stb	r5,0(r3)
10006ccc:	18c00044 	addi	r3,r3,1
10006cd0:	19fffd1e 	bne	r3,r7,10006cc8 <__alt_data_end+0xf8006cc8>
10006cd4:	f800283a 	ret
10006cd8:	2007883a 	mov	r3,r4
10006cdc:	300f883a 	mov	r7,r6
10006ce0:	003fc806 	br	10006c04 <__alt_data_end+0xf8006c04>

10006ce4 <_Balloc>:
10006ce4:	20801317 	ldw	r2,76(r4)
10006ce8:	defffc04 	addi	sp,sp,-16
10006cec:	dc400115 	stw	r17,4(sp)
10006cf0:	dc000015 	stw	r16,0(sp)
10006cf4:	dfc00315 	stw	ra,12(sp)
10006cf8:	dc800215 	stw	r18,8(sp)
10006cfc:	2023883a 	mov	r17,r4
10006d00:	2821883a 	mov	r16,r5
10006d04:	10000f26 	beq	r2,zero,10006d44 <_Balloc+0x60>
10006d08:	8407883a 	add	r3,r16,r16
10006d0c:	18c7883a 	add	r3,r3,r3
10006d10:	10c7883a 	add	r3,r2,r3
10006d14:	18800017 	ldw	r2,0(r3)
10006d18:	10001126 	beq	r2,zero,10006d60 <_Balloc+0x7c>
10006d1c:	11000017 	ldw	r4,0(r2)
10006d20:	19000015 	stw	r4,0(r3)
10006d24:	10000415 	stw	zero,16(r2)
10006d28:	10000315 	stw	zero,12(r2)
10006d2c:	dfc00317 	ldw	ra,12(sp)
10006d30:	dc800217 	ldw	r18,8(sp)
10006d34:	dc400117 	ldw	r17,4(sp)
10006d38:	dc000017 	ldw	r16,0(sp)
10006d3c:	dec00404 	addi	sp,sp,16
10006d40:	f800283a 	ret
10006d44:	01400104 	movi	r5,4
10006d48:	01800844 	movi	r6,33
10006d4c:	0009b800 	call	10009b80 <_calloc_r>
10006d50:	88801315 	stw	r2,76(r17)
10006d54:	103fec1e 	bne	r2,zero,10006d08 <__alt_data_end+0xf8006d08>
10006d58:	0005883a 	mov	r2,zero
10006d5c:	003ff306 	br	10006d2c <__alt_data_end+0xf8006d2c>
10006d60:	01400044 	movi	r5,1
10006d64:	2c24983a 	sll	r18,r5,r16
10006d68:	8809883a 	mov	r4,r17
10006d6c:	91800144 	addi	r6,r18,5
10006d70:	318d883a 	add	r6,r6,r6
10006d74:	318d883a 	add	r6,r6,r6
10006d78:	0009b800 	call	10009b80 <_calloc_r>
10006d7c:	103ff626 	beq	r2,zero,10006d58 <__alt_data_end+0xf8006d58>
10006d80:	14000115 	stw	r16,4(r2)
10006d84:	14800215 	stw	r18,8(r2)
10006d88:	003fe606 	br	10006d24 <__alt_data_end+0xf8006d24>

10006d8c <_Bfree>:
10006d8c:	28000826 	beq	r5,zero,10006db0 <_Bfree+0x24>
10006d90:	28c00117 	ldw	r3,4(r5)
10006d94:	20801317 	ldw	r2,76(r4)
10006d98:	18c7883a 	add	r3,r3,r3
10006d9c:	18c7883a 	add	r3,r3,r3
10006da0:	10c5883a 	add	r2,r2,r3
10006da4:	10c00017 	ldw	r3,0(r2)
10006da8:	28c00015 	stw	r3,0(r5)
10006dac:	11400015 	stw	r5,0(r2)
10006db0:	f800283a 	ret

10006db4 <__multadd>:
10006db4:	defff704 	addi	sp,sp,-36
10006db8:	dc800215 	stw	r18,8(sp)
10006dbc:	2c800417 	ldw	r18,16(r5)
10006dc0:	ddc00715 	stw	r23,28(sp)
10006dc4:	dd800615 	stw	r22,24(sp)
10006dc8:	dd000415 	stw	r20,16(sp)
10006dcc:	dcc00315 	stw	r19,12(sp)
10006dd0:	dc400115 	stw	r17,4(sp)
10006dd4:	dc000015 	stw	r16,0(sp)
10006dd8:	dfc00815 	stw	ra,32(sp)
10006ddc:	dd400515 	stw	r21,20(sp)
10006de0:	2827883a 	mov	r19,r5
10006de4:	2029883a 	mov	r20,r4
10006de8:	3023883a 	mov	r17,r6
10006dec:	3821883a 	mov	r16,r7
10006df0:	2d800504 	addi	r22,r5,20
10006df4:	002f883a 	mov	r23,zero
10006df8:	b5400017 	ldw	r21,0(r22)
10006dfc:	880b883a 	mov	r5,r17
10006e00:	bdc00044 	addi	r23,r23,1
10006e04:	a93fffcc 	andi	r4,r21,65535
10006e08:	000103c0 	call	1000103c <__mulsi3>
10006e0c:	1421883a 	add	r16,r2,r16
10006e10:	a808d43a 	srli	r4,r21,16
10006e14:	802ad43a 	srli	r21,r16,16
10006e18:	880b883a 	mov	r5,r17
10006e1c:	000103c0 	call	1000103c <__mulsi3>
10006e20:	a88f883a 	add	r7,r21,r2
10006e24:	3804943a 	slli	r2,r7,16
10006e28:	80ffffcc 	andi	r3,r16,65535
10006e2c:	b5800104 	addi	r22,r22,4
10006e30:	10c7883a 	add	r3,r2,r3
10006e34:	b0ffff15 	stw	r3,-4(r22)
10006e38:	3820d43a 	srli	r16,r7,16
10006e3c:	bcbfee16 	blt	r23,r18,10006df8 <__alt_data_end+0xf8006df8>
10006e40:	80000926 	beq	r16,zero,10006e68 <__multadd+0xb4>
10006e44:	98800217 	ldw	r2,8(r19)
10006e48:	9080130e 	bge	r18,r2,10006e98 <__multadd+0xe4>
10006e4c:	90800144 	addi	r2,r18,5
10006e50:	1085883a 	add	r2,r2,r2
10006e54:	1085883a 	add	r2,r2,r2
10006e58:	9885883a 	add	r2,r19,r2
10006e5c:	14000015 	stw	r16,0(r2)
10006e60:	94800044 	addi	r18,r18,1
10006e64:	9c800415 	stw	r18,16(r19)
10006e68:	9805883a 	mov	r2,r19
10006e6c:	dfc00817 	ldw	ra,32(sp)
10006e70:	ddc00717 	ldw	r23,28(sp)
10006e74:	dd800617 	ldw	r22,24(sp)
10006e78:	dd400517 	ldw	r21,20(sp)
10006e7c:	dd000417 	ldw	r20,16(sp)
10006e80:	dcc00317 	ldw	r19,12(sp)
10006e84:	dc800217 	ldw	r18,8(sp)
10006e88:	dc400117 	ldw	r17,4(sp)
10006e8c:	dc000017 	ldw	r16,0(sp)
10006e90:	dec00904 	addi	sp,sp,36
10006e94:	f800283a 	ret
10006e98:	99400117 	ldw	r5,4(r19)
10006e9c:	a009883a 	mov	r4,r20
10006ea0:	29400044 	addi	r5,r5,1
10006ea4:	0006ce40 	call	10006ce4 <_Balloc>
10006ea8:	99800417 	ldw	r6,16(r19)
10006eac:	99400304 	addi	r5,r19,12
10006eb0:	11000304 	addi	r4,r2,12
10006eb4:	31800084 	addi	r6,r6,2
10006eb8:	318d883a 	add	r6,r6,r6
10006ebc:	318d883a 	add	r6,r6,r6
10006ec0:	1023883a 	mov	r17,r2
10006ec4:	00010640 	call	10001064 <memcpy>
10006ec8:	99000117 	ldw	r4,4(r19)
10006ecc:	a0c01317 	ldw	r3,76(r20)
10006ed0:	2109883a 	add	r4,r4,r4
10006ed4:	2109883a 	add	r4,r4,r4
10006ed8:	1907883a 	add	r3,r3,r4
10006edc:	18800017 	ldw	r2,0(r3)
10006ee0:	98800015 	stw	r2,0(r19)
10006ee4:	1cc00015 	stw	r19,0(r3)
10006ee8:	8827883a 	mov	r19,r17
10006eec:	003fd706 	br	10006e4c <__alt_data_end+0xf8006e4c>

10006ef0 <__s2b>:
10006ef0:	defff904 	addi	sp,sp,-28
10006ef4:	dc400115 	stw	r17,4(sp)
10006ef8:	dc000015 	stw	r16,0(sp)
10006efc:	2023883a 	mov	r17,r4
10006f00:	2821883a 	mov	r16,r5
10006f04:	39000204 	addi	r4,r7,8
10006f08:	01400244 	movi	r5,9
10006f0c:	dcc00315 	stw	r19,12(sp)
10006f10:	dc800215 	stw	r18,8(sp)
10006f14:	dfc00615 	stw	ra,24(sp)
10006f18:	dd400515 	stw	r21,20(sp)
10006f1c:	dd000415 	stw	r20,16(sp)
10006f20:	3825883a 	mov	r18,r7
10006f24:	3027883a 	mov	r19,r6
10006f28:	0000f7c0 	call	10000f7c <__divsi3>
10006f2c:	00c00044 	movi	r3,1
10006f30:	000b883a 	mov	r5,zero
10006f34:	1880030e 	bge	r3,r2,10006f44 <__s2b+0x54>
10006f38:	18c7883a 	add	r3,r3,r3
10006f3c:	29400044 	addi	r5,r5,1
10006f40:	18bffd16 	blt	r3,r2,10006f38 <__alt_data_end+0xf8006f38>
10006f44:	8809883a 	mov	r4,r17
10006f48:	0006ce40 	call	10006ce4 <_Balloc>
10006f4c:	d8c00717 	ldw	r3,28(sp)
10006f50:	10c00515 	stw	r3,20(r2)
10006f54:	00c00044 	movi	r3,1
10006f58:	10c00415 	stw	r3,16(r2)
10006f5c:	00c00244 	movi	r3,9
10006f60:	1cc0210e 	bge	r3,r19,10006fe8 <__s2b+0xf8>
10006f64:	80eb883a 	add	r21,r16,r3
10006f68:	a829883a 	mov	r20,r21
10006f6c:	84e1883a 	add	r16,r16,r19
10006f70:	a1c00007 	ldb	r7,0(r20)
10006f74:	8809883a 	mov	r4,r17
10006f78:	a5000044 	addi	r20,r20,1
10006f7c:	100b883a 	mov	r5,r2
10006f80:	01800284 	movi	r6,10
10006f84:	39fff404 	addi	r7,r7,-48
10006f88:	0006db40 	call	10006db4 <__multadd>
10006f8c:	a43ff81e 	bne	r20,r16,10006f70 <__alt_data_end+0xf8006f70>
10006f90:	ace1883a 	add	r16,r21,r19
10006f94:	843ffe04 	addi	r16,r16,-8
10006f98:	9c800a0e 	bge	r19,r18,10006fc4 <__s2b+0xd4>
10006f9c:	94e5c83a 	sub	r18,r18,r19
10006fa0:	84a5883a 	add	r18,r16,r18
10006fa4:	81c00007 	ldb	r7,0(r16)
10006fa8:	8809883a 	mov	r4,r17
10006fac:	84000044 	addi	r16,r16,1
10006fb0:	100b883a 	mov	r5,r2
10006fb4:	01800284 	movi	r6,10
10006fb8:	39fff404 	addi	r7,r7,-48
10006fbc:	0006db40 	call	10006db4 <__multadd>
10006fc0:	84bff81e 	bne	r16,r18,10006fa4 <__alt_data_end+0xf8006fa4>
10006fc4:	dfc00617 	ldw	ra,24(sp)
10006fc8:	dd400517 	ldw	r21,20(sp)
10006fcc:	dd000417 	ldw	r20,16(sp)
10006fd0:	dcc00317 	ldw	r19,12(sp)
10006fd4:	dc800217 	ldw	r18,8(sp)
10006fd8:	dc400117 	ldw	r17,4(sp)
10006fdc:	dc000017 	ldw	r16,0(sp)
10006fe0:	dec00704 	addi	sp,sp,28
10006fe4:	f800283a 	ret
10006fe8:	84000284 	addi	r16,r16,10
10006fec:	1827883a 	mov	r19,r3
10006ff0:	003fe906 	br	10006f98 <__alt_data_end+0xf8006f98>

10006ff4 <__hi0bits>:
10006ff4:	20bfffec 	andhi	r2,r4,65535
10006ff8:	1000141e 	bne	r2,zero,1000704c <__hi0bits+0x58>
10006ffc:	2008943a 	slli	r4,r4,16
10007000:	00800404 	movi	r2,16
10007004:	20ffc02c 	andhi	r3,r4,65280
10007008:	1800021e 	bne	r3,zero,10007014 <__hi0bits+0x20>
1000700c:	2008923a 	slli	r4,r4,8
10007010:	10800204 	addi	r2,r2,8
10007014:	20fc002c 	andhi	r3,r4,61440
10007018:	1800021e 	bne	r3,zero,10007024 <__hi0bits+0x30>
1000701c:	2008913a 	slli	r4,r4,4
10007020:	10800104 	addi	r2,r2,4
10007024:	20f0002c 	andhi	r3,r4,49152
10007028:	1800031e 	bne	r3,zero,10007038 <__hi0bits+0x44>
1000702c:	2109883a 	add	r4,r4,r4
10007030:	10800084 	addi	r2,r2,2
10007034:	2109883a 	add	r4,r4,r4
10007038:	20000316 	blt	r4,zero,10007048 <__hi0bits+0x54>
1000703c:	2110002c 	andhi	r4,r4,16384
10007040:	2000041e 	bne	r4,zero,10007054 <__hi0bits+0x60>
10007044:	00800804 	movi	r2,32
10007048:	f800283a 	ret
1000704c:	0005883a 	mov	r2,zero
10007050:	003fec06 	br	10007004 <__alt_data_end+0xf8007004>
10007054:	10800044 	addi	r2,r2,1
10007058:	f800283a 	ret

1000705c <__lo0bits>:
1000705c:	20c00017 	ldw	r3,0(r4)
10007060:	188001cc 	andi	r2,r3,7
10007064:	10000826 	beq	r2,zero,10007088 <__lo0bits+0x2c>
10007068:	1880004c 	andi	r2,r3,1
1000706c:	1000211e 	bne	r2,zero,100070f4 <__lo0bits+0x98>
10007070:	1880008c 	andi	r2,r3,2
10007074:	1000211e 	bne	r2,zero,100070fc <__lo0bits+0xa0>
10007078:	1806d0ba 	srli	r3,r3,2
1000707c:	00800084 	movi	r2,2
10007080:	20c00015 	stw	r3,0(r4)
10007084:	f800283a 	ret
10007088:	18bfffcc 	andi	r2,r3,65535
1000708c:	10001326 	beq	r2,zero,100070dc <__lo0bits+0x80>
10007090:	0005883a 	mov	r2,zero
10007094:	19403fcc 	andi	r5,r3,255
10007098:	2800021e 	bne	r5,zero,100070a4 <__lo0bits+0x48>
1000709c:	1806d23a 	srli	r3,r3,8
100070a0:	10800204 	addi	r2,r2,8
100070a4:	194003cc 	andi	r5,r3,15
100070a8:	2800021e 	bne	r5,zero,100070b4 <__lo0bits+0x58>
100070ac:	1806d13a 	srli	r3,r3,4
100070b0:	10800104 	addi	r2,r2,4
100070b4:	194000cc 	andi	r5,r3,3
100070b8:	2800021e 	bne	r5,zero,100070c4 <__lo0bits+0x68>
100070bc:	1806d0ba 	srli	r3,r3,2
100070c0:	10800084 	addi	r2,r2,2
100070c4:	1940004c 	andi	r5,r3,1
100070c8:	2800081e 	bne	r5,zero,100070ec <__lo0bits+0x90>
100070cc:	1806d07a 	srli	r3,r3,1
100070d0:	1800051e 	bne	r3,zero,100070e8 <__lo0bits+0x8c>
100070d4:	00800804 	movi	r2,32
100070d8:	f800283a 	ret
100070dc:	1806d43a 	srli	r3,r3,16
100070e0:	00800404 	movi	r2,16
100070e4:	003feb06 	br	10007094 <__alt_data_end+0xf8007094>
100070e8:	10800044 	addi	r2,r2,1
100070ec:	20c00015 	stw	r3,0(r4)
100070f0:	f800283a 	ret
100070f4:	0005883a 	mov	r2,zero
100070f8:	f800283a 	ret
100070fc:	1806d07a 	srli	r3,r3,1
10007100:	00800044 	movi	r2,1
10007104:	20c00015 	stw	r3,0(r4)
10007108:	f800283a 	ret

1000710c <__i2b>:
1000710c:	defffd04 	addi	sp,sp,-12
10007110:	dc000015 	stw	r16,0(sp)
10007114:	04000044 	movi	r16,1
10007118:	dc400115 	stw	r17,4(sp)
1000711c:	2823883a 	mov	r17,r5
10007120:	800b883a 	mov	r5,r16
10007124:	dfc00215 	stw	ra,8(sp)
10007128:	0006ce40 	call	10006ce4 <_Balloc>
1000712c:	14400515 	stw	r17,20(r2)
10007130:	14000415 	stw	r16,16(r2)
10007134:	dfc00217 	ldw	ra,8(sp)
10007138:	dc400117 	ldw	r17,4(sp)
1000713c:	dc000017 	ldw	r16,0(sp)
10007140:	dec00304 	addi	sp,sp,12
10007144:	f800283a 	ret

10007148 <__multiply>:
10007148:	deffef04 	addi	sp,sp,-68
1000714c:	dc400815 	stw	r17,32(sp)
10007150:	dc000715 	stw	r16,28(sp)
10007154:	2c400417 	ldw	r17,16(r5)
10007158:	34000417 	ldw	r16,16(r6)
1000715c:	dd800d15 	stw	r22,52(sp)
10007160:	dc800915 	stw	r18,36(sp)
10007164:	dfc01015 	stw	ra,64(sp)
10007168:	df000f15 	stw	fp,60(sp)
1000716c:	ddc00e15 	stw	r23,56(sp)
10007170:	dd400c15 	stw	r21,48(sp)
10007174:	dd000b15 	stw	r20,44(sp)
10007178:	dcc00a15 	stw	r19,40(sp)
1000717c:	2825883a 	mov	r18,r5
10007180:	302d883a 	mov	r22,r6
10007184:	8c009116 	blt	r17,r16,100073cc <__multiply+0x284>
10007188:	8005883a 	mov	r2,r16
1000718c:	8821883a 	mov	r16,r17
10007190:	1023883a 	mov	r17,r2
10007194:	90800217 	ldw	r2,8(r18)
10007198:	8447883a 	add	r3,r16,r17
1000719c:	d8c00215 	stw	r3,8(sp)
100071a0:	91400117 	ldw	r5,4(r18)
100071a4:	10c0010e 	bge	r2,r3,100071ac <__multiply+0x64>
100071a8:	29400044 	addi	r5,r5,1
100071ac:	0006ce40 	call	10006ce4 <_Balloc>
100071b0:	d8c00217 	ldw	r3,8(sp)
100071b4:	d8800615 	stw	r2,24(sp)
100071b8:	18eb883a 	add	r21,r3,r3
100071bc:	ad6b883a 	add	r21,r21,r21
100071c0:	10c00504 	addi	r3,r2,20
100071c4:	1d6b883a 	add	r21,r3,r21
100071c8:	d8c00115 	stw	r3,4(sp)
100071cc:	dd400315 	stw	r21,12(sp)
100071d0:	1805883a 	mov	r2,r3
100071d4:	1d40042e 	bgeu	r3,r21,100071e8 <__multiply+0xa0>
100071d8:	d8c00317 	ldw	r3,12(sp)
100071dc:	10000015 	stw	zero,0(r2)
100071e0:	10800104 	addi	r2,r2,4
100071e4:	10fffc36 	bltu	r2,r3,100071d8 <__alt_data_end+0xf80071d8>
100071e8:	8c63883a 	add	r17,r17,r17
100071ec:	b5800504 	addi	r22,r22,20
100071f0:	8c63883a 	add	r17,r17,r17
100071f4:	94800504 	addi	r18,r18,20
100071f8:	8421883a 	add	r16,r16,r16
100071fc:	b463883a 	add	r17,r22,r17
10007200:	8421883a 	add	r16,r16,r16
10007204:	dd800015 	stw	r22,0(sp)
10007208:	dc800415 	stw	r18,16(sp)
1000720c:	dc400515 	stw	r17,20(sp)
10007210:	9429883a 	add	r20,r18,r16
10007214:	b4404f2e 	bgeu	r22,r17,10007354 <__multiply+0x20c>
10007218:	d8c00017 	ldw	r3,0(sp)
1000721c:	1c800017 	ldw	r18,0(r3)
10007220:	943fffcc 	andi	r16,r18,65535
10007224:	80001e26 	beq	r16,zero,100072a0 <__multiply+0x158>
10007228:	dd800117 	ldw	r22,4(sp)
1000722c:	dd400417 	ldw	r21,16(sp)
10007230:	0025883a 	mov	r18,zero
10007234:	adc00017 	ldw	r23,0(r21)
10007238:	b4c00017 	ldw	r19,0(r22)
1000723c:	800b883a 	mov	r5,r16
10007240:	b93fffcc 	andi	r4,r23,65535
10007244:	000103c0 	call	1000103c <__mulsi3>
10007248:	9c7fffcc 	andi	r17,r19,65535
1000724c:	8885883a 	add	r2,r17,r2
10007250:	b808d43a 	srli	r4,r23,16
10007254:	14a3883a 	add	r17,r2,r18
10007258:	9826d43a 	srli	r19,r19,16
1000725c:	8824d43a 	srli	r18,r17,16
10007260:	800b883a 	mov	r5,r16
10007264:	000103c0 	call	1000103c <__mulsi3>
10007268:	9885883a 	add	r2,r19,r2
1000726c:	14a7883a 	add	r19,r2,r18
10007270:	88ffffcc 	andi	r3,r17,65535
10007274:	9822943a 	slli	r17,r19,16
10007278:	ad400104 	addi	r21,r21,4
1000727c:	b005883a 	mov	r2,r22
10007280:	88c6b03a 	or	r3,r17,r3
10007284:	b0c00015 	stw	r3,0(r22)
10007288:	9824d43a 	srli	r18,r19,16
1000728c:	b5800104 	addi	r22,r22,4
10007290:	ad3fe836 	bltu	r21,r20,10007234 <__alt_data_end+0xf8007234>
10007294:	d8c00017 	ldw	r3,0(sp)
10007298:	14800115 	stw	r18,4(r2)
1000729c:	1c800017 	ldw	r18,0(r3)
100072a0:	9024d43a 	srli	r18,r18,16
100072a4:	90002226 	beq	r18,zero,10007330 <__multiply+0x1e8>
100072a8:	d8c00117 	ldw	r3,4(sp)
100072ac:	dd800417 	ldw	r22,16(sp)
100072b0:	002f883a 	mov	r23,zero
100072b4:	1f000017 	ldw	fp,0(r3)
100072b8:	1823883a 	mov	r17,r3
100072bc:	182b883a 	mov	r21,r3
100072c0:	e021883a 	mov	r16,fp
100072c4:	00000106 	br	100072cc <__multiply+0x184>
100072c8:	982b883a 	mov	r21,r19
100072cc:	b100000b 	ldhu	r4,0(r22)
100072d0:	8020d43a 	srli	r16,r16,16
100072d4:	900b883a 	mov	r5,r18
100072d8:	000103c0 	call	1000103c <__mulsi3>
100072dc:	1405883a 	add	r2,r2,r16
100072e0:	15ef883a 	add	r23,r2,r23
100072e4:	b804943a 	slli	r2,r23,16
100072e8:	e0ffffcc 	andi	r3,fp,65535
100072ec:	8c400104 	addi	r17,r17,4
100072f0:	10c6b03a 	or	r3,r2,r3
100072f4:	88ffff15 	stw	r3,-4(r17)
100072f8:	b5800104 	addi	r22,r22,4
100072fc:	b13fff17 	ldw	r4,-4(r22)
10007300:	acc00104 	addi	r19,r21,4
10007304:	900b883a 	mov	r5,r18
10007308:	2008d43a 	srli	r4,r4,16
1000730c:	9c000017 	ldw	r16,0(r19)
10007310:	000103c0 	call	1000103c <__mulsi3>
10007314:	b806d43a 	srli	r3,r23,16
10007318:	813fffcc 	andi	r4,r16,65535
1000731c:	1105883a 	add	r2,r2,r4
10007320:	10f9883a 	add	fp,r2,r3
10007324:	e02ed43a 	srli	r23,fp,16
10007328:	b53fe736 	bltu	r22,r20,100072c8 <__alt_data_end+0xf80072c8>
1000732c:	af000115 	stw	fp,4(r21)
10007330:	d8c00017 	ldw	r3,0(sp)
10007334:	d9000517 	ldw	r4,20(sp)
10007338:	18c00104 	addi	r3,r3,4
1000733c:	d8c00015 	stw	r3,0(sp)
10007340:	d8c00117 	ldw	r3,4(sp)
10007344:	18c00104 	addi	r3,r3,4
10007348:	d8c00115 	stw	r3,4(sp)
1000734c:	d8c00017 	ldw	r3,0(sp)
10007350:	193fb136 	bltu	r3,r4,10007218 <__alt_data_end+0xf8007218>
10007354:	d8c00217 	ldw	r3,8(sp)
10007358:	00c00c0e 	bge	zero,r3,1000738c <__multiply+0x244>
1000735c:	d8c00317 	ldw	r3,12(sp)
10007360:	18bfff17 	ldw	r2,-4(r3)
10007364:	1d7fff04 	addi	r21,r3,-4
10007368:	10000326 	beq	r2,zero,10007378 <__multiply+0x230>
1000736c:	00000706 	br	1000738c <__multiply+0x244>
10007370:	a8800017 	ldw	r2,0(r21)
10007374:	1000051e 	bne	r2,zero,1000738c <__multiply+0x244>
10007378:	d8c00217 	ldw	r3,8(sp)
1000737c:	ad7fff04 	addi	r21,r21,-4
10007380:	18ffffc4 	addi	r3,r3,-1
10007384:	d8c00215 	stw	r3,8(sp)
10007388:	183ff91e 	bne	r3,zero,10007370 <__alt_data_end+0xf8007370>
1000738c:	d8c00617 	ldw	r3,24(sp)
10007390:	d9000217 	ldw	r4,8(sp)
10007394:	1805883a 	mov	r2,r3
10007398:	19000415 	stw	r4,16(r3)
1000739c:	dfc01017 	ldw	ra,64(sp)
100073a0:	df000f17 	ldw	fp,60(sp)
100073a4:	ddc00e17 	ldw	r23,56(sp)
100073a8:	dd800d17 	ldw	r22,52(sp)
100073ac:	dd400c17 	ldw	r21,48(sp)
100073b0:	dd000b17 	ldw	r20,44(sp)
100073b4:	dcc00a17 	ldw	r19,40(sp)
100073b8:	dc800917 	ldw	r18,36(sp)
100073bc:	dc400817 	ldw	r17,32(sp)
100073c0:	dc000717 	ldw	r16,28(sp)
100073c4:	dec01104 	addi	sp,sp,68
100073c8:	f800283a 	ret
100073cc:	3025883a 	mov	r18,r6
100073d0:	282d883a 	mov	r22,r5
100073d4:	003f6f06 	br	10007194 <__alt_data_end+0xf8007194>

100073d8 <__pow5mult>:
100073d8:	defffa04 	addi	sp,sp,-24
100073dc:	dcc00315 	stw	r19,12(sp)
100073e0:	dc800215 	stw	r18,8(sp)
100073e4:	dc000015 	stw	r16,0(sp)
100073e8:	dfc00515 	stw	ra,20(sp)
100073ec:	dd000415 	stw	r20,16(sp)
100073f0:	dc400115 	stw	r17,4(sp)
100073f4:	308000cc 	andi	r2,r6,3
100073f8:	3021883a 	mov	r16,r6
100073fc:	2027883a 	mov	r19,r4
10007400:	2825883a 	mov	r18,r5
10007404:	10002e1e 	bne	r2,zero,100074c0 <__pow5mult+0xe8>
10007408:	8021d0ba 	srai	r16,r16,2
1000740c:	80001a26 	beq	r16,zero,10007478 <__pow5mult+0xa0>
10007410:	9c401217 	ldw	r17,72(r19)
10007414:	8800061e 	bne	r17,zero,10007430 <__pow5mult+0x58>
10007418:	00003406 	br	100074ec <__pow5mult+0x114>
1000741c:	8021d07a 	srai	r16,r16,1
10007420:	80001526 	beq	r16,zero,10007478 <__pow5mult+0xa0>
10007424:	88800017 	ldw	r2,0(r17)
10007428:	10001c26 	beq	r2,zero,1000749c <__pow5mult+0xc4>
1000742c:	1023883a 	mov	r17,r2
10007430:	80c0004c 	andi	r3,r16,1
10007434:	183ff926 	beq	r3,zero,1000741c <__alt_data_end+0xf800741c>
10007438:	900b883a 	mov	r5,r18
1000743c:	880d883a 	mov	r6,r17
10007440:	9809883a 	mov	r4,r19
10007444:	00071480 	call	10007148 <__multiply>
10007448:	90001b26 	beq	r18,zero,100074b8 <__pow5mult+0xe0>
1000744c:	91c00117 	ldw	r7,4(r18)
10007450:	98c01317 	ldw	r3,76(r19)
10007454:	8021d07a 	srai	r16,r16,1
10007458:	39cf883a 	add	r7,r7,r7
1000745c:	39cf883a 	add	r7,r7,r7
10007460:	19c7883a 	add	r3,r3,r7
10007464:	19000017 	ldw	r4,0(r3)
10007468:	91000015 	stw	r4,0(r18)
1000746c:	1c800015 	stw	r18,0(r3)
10007470:	1025883a 	mov	r18,r2
10007474:	803feb1e 	bne	r16,zero,10007424 <__alt_data_end+0xf8007424>
10007478:	9005883a 	mov	r2,r18
1000747c:	dfc00517 	ldw	ra,20(sp)
10007480:	dd000417 	ldw	r20,16(sp)
10007484:	dcc00317 	ldw	r19,12(sp)
10007488:	dc800217 	ldw	r18,8(sp)
1000748c:	dc400117 	ldw	r17,4(sp)
10007490:	dc000017 	ldw	r16,0(sp)
10007494:	dec00604 	addi	sp,sp,24
10007498:	f800283a 	ret
1000749c:	9809883a 	mov	r4,r19
100074a0:	880b883a 	mov	r5,r17
100074a4:	880d883a 	mov	r6,r17
100074a8:	00071480 	call	10007148 <__multiply>
100074ac:	88800015 	stw	r2,0(r17)
100074b0:	10000015 	stw	zero,0(r2)
100074b4:	003fdd06 	br	1000742c <__alt_data_end+0xf800742c>
100074b8:	1025883a 	mov	r18,r2
100074bc:	003fd706 	br	1000741c <__alt_data_end+0xf800741c>
100074c0:	10bfffc4 	addi	r2,r2,-1
100074c4:	1085883a 	add	r2,r2,r2
100074c8:	00c40074 	movhi	r3,4097
100074cc:	18c08404 	addi	r3,r3,528
100074d0:	1085883a 	add	r2,r2,r2
100074d4:	1885883a 	add	r2,r3,r2
100074d8:	11800017 	ldw	r6,0(r2)
100074dc:	000f883a 	mov	r7,zero
100074e0:	0006db40 	call	10006db4 <__multadd>
100074e4:	1025883a 	mov	r18,r2
100074e8:	003fc706 	br	10007408 <__alt_data_end+0xf8007408>
100074ec:	05000044 	movi	r20,1
100074f0:	9809883a 	mov	r4,r19
100074f4:	a00b883a 	mov	r5,r20
100074f8:	0006ce40 	call	10006ce4 <_Balloc>
100074fc:	1023883a 	mov	r17,r2
10007500:	00809c44 	movi	r2,625
10007504:	88800515 	stw	r2,20(r17)
10007508:	8d000415 	stw	r20,16(r17)
1000750c:	9c401215 	stw	r17,72(r19)
10007510:	88000015 	stw	zero,0(r17)
10007514:	003fc606 	br	10007430 <__alt_data_end+0xf8007430>

10007518 <__lshift>:
10007518:	defff904 	addi	sp,sp,-28
1000751c:	dd000415 	stw	r20,16(sp)
10007520:	dcc00315 	stw	r19,12(sp)
10007524:	3029d17a 	srai	r20,r6,5
10007528:	2cc00417 	ldw	r19,16(r5)
1000752c:	28800217 	ldw	r2,8(r5)
10007530:	dd400515 	stw	r21,20(sp)
10007534:	a4e7883a 	add	r19,r20,r19
10007538:	dc800215 	stw	r18,8(sp)
1000753c:	dc400115 	stw	r17,4(sp)
10007540:	dc000015 	stw	r16,0(sp)
10007544:	dfc00615 	stw	ra,24(sp)
10007548:	9c000044 	addi	r16,r19,1
1000754c:	2823883a 	mov	r17,r5
10007550:	302b883a 	mov	r21,r6
10007554:	2025883a 	mov	r18,r4
10007558:	29400117 	ldw	r5,4(r5)
1000755c:	1400030e 	bge	r2,r16,1000756c <__lshift+0x54>
10007560:	1085883a 	add	r2,r2,r2
10007564:	29400044 	addi	r5,r5,1
10007568:	143ffd16 	blt	r2,r16,10007560 <__alt_data_end+0xf8007560>
1000756c:	9009883a 	mov	r4,r18
10007570:	0006ce40 	call	10006ce4 <_Balloc>
10007574:	11c00504 	addi	r7,r2,20
10007578:	0500090e 	bge	zero,r20,100075a0 <__lshift+0x88>
1000757c:	3811883a 	mov	r8,r7
10007580:	0007883a 	mov	r3,zero
10007584:	40000015 	stw	zero,0(r8)
10007588:	18c00044 	addi	r3,r3,1
1000758c:	42000104 	addi	r8,r8,4
10007590:	1d3ffc1e 	bne	r3,r20,10007584 <__alt_data_end+0xf8007584>
10007594:	18c7883a 	add	r3,r3,r3
10007598:	18c7883a 	add	r3,r3,r3
1000759c:	38cf883a 	add	r7,r7,r3
100075a0:	89000417 	ldw	r4,16(r17)
100075a4:	88c00504 	addi	r3,r17,20
100075a8:	a98007cc 	andi	r6,r21,31
100075ac:	2109883a 	add	r4,r4,r4
100075b0:	2109883a 	add	r4,r4,r4
100075b4:	1909883a 	add	r4,r3,r4
100075b8:	30002326 	beq	r6,zero,10007648 <__lshift+0x130>
100075bc:	01400804 	movi	r5,32
100075c0:	298bc83a 	sub	r5,r5,r6
100075c4:	0013883a 	mov	r9,zero
100075c8:	1a000017 	ldw	r8,0(r3)
100075cc:	3815883a 	mov	r10,r7
100075d0:	39c00104 	addi	r7,r7,4
100075d4:	4190983a 	sll	r8,r8,r6
100075d8:	18c00104 	addi	r3,r3,4
100075dc:	4a10b03a 	or	r8,r9,r8
100075e0:	3a3fff15 	stw	r8,-4(r7)
100075e4:	1a3fff17 	ldw	r8,-4(r3)
100075e8:	4152d83a 	srl	r9,r8,r5
100075ec:	193ff636 	bltu	r3,r4,100075c8 <__alt_data_end+0xf80075c8>
100075f0:	52400115 	stw	r9,4(r10)
100075f4:	48000126 	beq	r9,zero,100075fc <__lshift+0xe4>
100075f8:	9c000084 	addi	r16,r19,2
100075fc:	89000117 	ldw	r4,4(r17)
10007600:	90c01317 	ldw	r3,76(r18)
10007604:	843fffc4 	addi	r16,r16,-1
10007608:	2109883a 	add	r4,r4,r4
1000760c:	2109883a 	add	r4,r4,r4
10007610:	1907883a 	add	r3,r3,r4
10007614:	19000017 	ldw	r4,0(r3)
10007618:	14000415 	stw	r16,16(r2)
1000761c:	89000015 	stw	r4,0(r17)
10007620:	1c400015 	stw	r17,0(r3)
10007624:	dfc00617 	ldw	ra,24(sp)
10007628:	dd400517 	ldw	r21,20(sp)
1000762c:	dd000417 	ldw	r20,16(sp)
10007630:	dcc00317 	ldw	r19,12(sp)
10007634:	dc800217 	ldw	r18,8(sp)
10007638:	dc400117 	ldw	r17,4(sp)
1000763c:	dc000017 	ldw	r16,0(sp)
10007640:	dec00704 	addi	sp,sp,28
10007644:	f800283a 	ret
10007648:	19400017 	ldw	r5,0(r3)
1000764c:	39c00104 	addi	r7,r7,4
10007650:	18c00104 	addi	r3,r3,4
10007654:	397fff15 	stw	r5,-4(r7)
10007658:	193ffb36 	bltu	r3,r4,10007648 <__alt_data_end+0xf8007648>
1000765c:	003fe706 	br	100075fc <__alt_data_end+0xf80075fc>

10007660 <__mcmp>:
10007660:	20800417 	ldw	r2,16(r4)
10007664:	28c00417 	ldw	r3,16(r5)
10007668:	10c5c83a 	sub	r2,r2,r3
1000766c:	1000111e 	bne	r2,zero,100076b4 <__mcmp+0x54>
10007670:	18c7883a 	add	r3,r3,r3
10007674:	18c7883a 	add	r3,r3,r3
10007678:	21000504 	addi	r4,r4,20
1000767c:	29400504 	addi	r5,r5,20
10007680:	20c5883a 	add	r2,r4,r3
10007684:	28cb883a 	add	r5,r5,r3
10007688:	00000106 	br	10007690 <__mcmp+0x30>
1000768c:	20800a2e 	bgeu	r4,r2,100076b8 <__mcmp+0x58>
10007690:	10bfff04 	addi	r2,r2,-4
10007694:	297fff04 	addi	r5,r5,-4
10007698:	11800017 	ldw	r6,0(r2)
1000769c:	28c00017 	ldw	r3,0(r5)
100076a0:	30fffa26 	beq	r6,r3,1000768c <__alt_data_end+0xf800768c>
100076a4:	30c00236 	bltu	r6,r3,100076b0 <__mcmp+0x50>
100076a8:	00800044 	movi	r2,1
100076ac:	f800283a 	ret
100076b0:	00bfffc4 	movi	r2,-1
100076b4:	f800283a 	ret
100076b8:	0005883a 	mov	r2,zero
100076bc:	f800283a 	ret

100076c0 <__mdiff>:
100076c0:	defffb04 	addi	sp,sp,-20
100076c4:	dc000015 	stw	r16,0(sp)
100076c8:	2821883a 	mov	r16,r5
100076cc:	dcc00315 	stw	r19,12(sp)
100076d0:	300b883a 	mov	r5,r6
100076d4:	2027883a 	mov	r19,r4
100076d8:	8009883a 	mov	r4,r16
100076dc:	dc800215 	stw	r18,8(sp)
100076e0:	dfc00415 	stw	ra,16(sp)
100076e4:	dc400115 	stw	r17,4(sp)
100076e8:	3025883a 	mov	r18,r6
100076ec:	00076600 	call	10007660 <__mcmp>
100076f0:	10005226 	beq	r2,zero,1000783c <__mdiff+0x17c>
100076f4:	10004c16 	blt	r2,zero,10007828 <__mdiff+0x168>
100076f8:	0023883a 	mov	r17,zero
100076fc:	81400117 	ldw	r5,4(r16)
10007700:	9809883a 	mov	r4,r19
10007704:	0006ce40 	call	10006ce4 <_Balloc>
10007708:	83400417 	ldw	r13,16(r16)
1000770c:	93800417 	ldw	r14,16(r18)
10007710:	81000504 	addi	r4,r16,20
10007714:	6b59883a 	add	r12,r13,r13
10007718:	739d883a 	add	r14,r14,r14
1000771c:	6319883a 	add	r12,r12,r12
10007720:	91800504 	addi	r6,r18,20
10007724:	739d883a 	add	r14,r14,r14
10007728:	14400315 	stw	r17,12(r2)
1000772c:	2319883a 	add	r12,r4,r12
10007730:	339d883a 	add	r14,r6,r14
10007734:	12400504 	addi	r9,r2,20
10007738:	0007883a 	mov	r3,zero
1000773c:	22000017 	ldw	r8,0(r4)
10007740:	32800017 	ldw	r10,0(r6)
10007744:	4ac00104 	addi	r11,r9,4
10007748:	41ffffcc 	andi	r7,r8,65535
1000774c:	38c7883a 	add	r3,r7,r3
10007750:	51ffffcc 	andi	r7,r10,65535
10007754:	19cfc83a 	sub	r7,r3,r7
10007758:	4010d43a 	srli	r8,r8,16
1000775c:	5014d43a 	srli	r10,r10,16
10007760:	3807d43a 	srai	r3,r7,16
10007764:	39ffffcc 	andi	r7,r7,65535
10007768:	4291c83a 	sub	r8,r8,r10
1000776c:	40c7883a 	add	r3,r8,r3
10007770:	1810943a 	slli	r8,r3,16
10007774:	31800104 	addi	r6,r6,4
10007778:	21000104 	addi	r4,r4,4
1000777c:	41ceb03a 	or	r7,r8,r7
10007780:	49c00015 	stw	r7,0(r9)
10007784:	1807d43a 	srai	r3,r3,16
10007788:	580b883a 	mov	r5,r11
1000778c:	5813883a 	mov	r9,r11
10007790:	33bfea36 	bltu	r6,r14,1000773c <__alt_data_end+0xf800773c>
10007794:	2011883a 	mov	r8,r4
10007798:	2300152e 	bgeu	r4,r12,100077f0 <__mdiff+0x130>
1000779c:	21400017 	ldw	r5,0(r4)
100077a0:	4a400104 	addi	r9,r9,4
100077a4:	21000104 	addi	r4,r4,4
100077a8:	29ffffcc 	andi	r7,r5,65535
100077ac:	38c7883a 	add	r3,r7,r3
100077b0:	280ad43a 	srli	r5,r5,16
100077b4:	180dd43a 	srai	r6,r3,16
100077b8:	19ffffcc 	andi	r7,r3,65535
100077bc:	3147883a 	add	r3,r6,r5
100077c0:	180a943a 	slli	r5,r3,16
100077c4:	1807d43a 	srai	r3,r3,16
100077c8:	29ceb03a 	or	r7,r5,r7
100077cc:	49ffff15 	stw	r7,-4(r9)
100077d0:	233ff236 	bltu	r4,r12,1000779c <__alt_data_end+0xf800779c>
100077d4:	0206303a 	nor	r3,zero,r8
100077d8:	1b07883a 	add	r3,r3,r12
100077dc:	1806d0ba 	srli	r3,r3,2
100077e0:	18c00044 	addi	r3,r3,1
100077e4:	18c7883a 	add	r3,r3,r3
100077e8:	18c7883a 	add	r3,r3,r3
100077ec:	58cb883a 	add	r5,r11,r3
100077f0:	28ffff04 	addi	r3,r5,-4
100077f4:	3800041e 	bne	r7,zero,10007808 <__mdiff+0x148>
100077f8:	18ffff04 	addi	r3,r3,-4
100077fc:	19000017 	ldw	r4,0(r3)
10007800:	6b7fffc4 	addi	r13,r13,-1
10007804:	203ffc26 	beq	r4,zero,100077f8 <__alt_data_end+0xf80077f8>
10007808:	13400415 	stw	r13,16(r2)
1000780c:	dfc00417 	ldw	ra,16(sp)
10007810:	dcc00317 	ldw	r19,12(sp)
10007814:	dc800217 	ldw	r18,8(sp)
10007818:	dc400117 	ldw	r17,4(sp)
1000781c:	dc000017 	ldw	r16,0(sp)
10007820:	dec00504 	addi	sp,sp,20
10007824:	f800283a 	ret
10007828:	8005883a 	mov	r2,r16
1000782c:	04400044 	movi	r17,1
10007830:	9021883a 	mov	r16,r18
10007834:	1025883a 	mov	r18,r2
10007838:	003fb006 	br	100076fc <__alt_data_end+0xf80076fc>
1000783c:	9809883a 	mov	r4,r19
10007840:	000b883a 	mov	r5,zero
10007844:	0006ce40 	call	10006ce4 <_Balloc>
10007848:	00c00044 	movi	r3,1
1000784c:	10c00415 	stw	r3,16(r2)
10007850:	10000515 	stw	zero,20(r2)
10007854:	003fed06 	br	1000780c <__alt_data_end+0xf800780c>

10007858 <__ulp>:
10007858:	295ffc2c 	andhi	r5,r5,32752
1000785c:	00bf3034 	movhi	r2,64704
10007860:	2887883a 	add	r3,r5,r2
10007864:	00c0020e 	bge	zero,r3,10007870 <__ulp+0x18>
10007868:	0005883a 	mov	r2,zero
1000786c:	f800283a 	ret
10007870:	00c7c83a 	sub	r3,zero,r3
10007874:	180bd53a 	srai	r5,r3,20
10007878:	008004c4 	movi	r2,19
1000787c:	11400a0e 	bge	r2,r5,100078a8 <__ulp+0x50>
10007880:	00800c84 	movi	r2,50
10007884:	0007883a 	mov	r3,zero
10007888:	11400516 	blt	r2,r5,100078a0 <__ulp+0x48>
1000788c:	00800cc4 	movi	r2,51
10007890:	114bc83a 	sub	r5,r2,r5
10007894:	00800044 	movi	r2,1
10007898:	1144983a 	sll	r2,r2,r5
1000789c:	f800283a 	ret
100078a0:	00800044 	movi	r2,1
100078a4:	f800283a 	ret
100078a8:	00800234 	movhi	r2,8
100078ac:	1147d83a 	sra	r3,r2,r5
100078b0:	0005883a 	mov	r2,zero
100078b4:	f800283a 	ret

100078b8 <__b2d>:
100078b8:	defffa04 	addi	sp,sp,-24
100078bc:	dc000015 	stw	r16,0(sp)
100078c0:	24000417 	ldw	r16,16(r4)
100078c4:	dc400115 	stw	r17,4(sp)
100078c8:	24400504 	addi	r17,r4,20
100078cc:	8421883a 	add	r16,r16,r16
100078d0:	8421883a 	add	r16,r16,r16
100078d4:	8c21883a 	add	r16,r17,r16
100078d8:	dc800215 	stw	r18,8(sp)
100078dc:	84bfff17 	ldw	r18,-4(r16)
100078e0:	dd000415 	stw	r20,16(sp)
100078e4:	dcc00315 	stw	r19,12(sp)
100078e8:	9009883a 	mov	r4,r18
100078ec:	2829883a 	mov	r20,r5
100078f0:	dfc00515 	stw	ra,20(sp)
100078f4:	0006ff40 	call	10006ff4 <__hi0bits>
100078f8:	00c00804 	movi	r3,32
100078fc:	1887c83a 	sub	r3,r3,r2
10007900:	a0c00015 	stw	r3,0(r20)
10007904:	00c00284 	movi	r3,10
10007908:	84ffff04 	addi	r19,r16,-4
1000790c:	18801216 	blt	r3,r2,10007958 <__b2d+0xa0>
10007910:	014002c4 	movi	r5,11
10007914:	2889c83a 	sub	r4,r5,r2
10007918:	9106d83a 	srl	r3,r18,r4
1000791c:	18cffc34 	orhi	r3,r3,16368
10007920:	8cc0282e 	bgeu	r17,r19,100079c4 <__b2d+0x10c>
10007924:	817ffe17 	ldw	r5,-8(r16)
10007928:	290ad83a 	srl	r5,r5,r4
1000792c:	10800544 	addi	r2,r2,21
10007930:	9084983a 	sll	r2,r18,r2
10007934:	2884b03a 	or	r2,r5,r2
10007938:	dfc00517 	ldw	ra,20(sp)
1000793c:	dd000417 	ldw	r20,16(sp)
10007940:	dcc00317 	ldw	r19,12(sp)
10007944:	dc800217 	ldw	r18,8(sp)
10007948:	dc400117 	ldw	r17,4(sp)
1000794c:	dc000017 	ldw	r16,0(sp)
10007950:	dec00604 	addi	sp,sp,24
10007954:	f800283a 	ret
10007958:	113ffd44 	addi	r4,r2,-11
1000795c:	8cc00f2e 	bgeu	r17,r19,1000799c <__b2d+0xe4>
10007960:	81bffe04 	addi	r6,r16,-8
10007964:	817ffe17 	ldw	r5,-8(r16)
10007968:	20001326 	beq	r4,zero,100079b8 <__b2d+0x100>
1000796c:	00c00ac4 	movi	r3,43
10007970:	1885c83a 	sub	r2,r3,r2
10007974:	2886d83a 	srl	r3,r5,r2
10007978:	9124983a 	sll	r18,r18,r4
1000797c:	90e4b03a 	or	r18,r18,r3
10007980:	90cffc34 	orhi	r3,r18,16368
10007984:	8980112e 	bgeu	r17,r6,100079cc <__b2d+0x114>
10007988:	81bffd17 	ldw	r6,-12(r16)
1000798c:	308cd83a 	srl	r6,r6,r2
10007990:	2904983a 	sll	r2,r5,r4
10007994:	1184b03a 	or	r2,r2,r6
10007998:	003fe706 	br	10007938 <__alt_data_end+0xf8007938>
1000799c:	20000526 	beq	r4,zero,100079b4 <__b2d+0xfc>
100079a0:	9124983a 	sll	r18,r18,r4
100079a4:	000d883a 	mov	r6,zero
100079a8:	000b883a 	mov	r5,zero
100079ac:	90cffc34 	orhi	r3,r18,16368
100079b0:	003ff706 	br	10007990 <__alt_data_end+0xf8007990>
100079b4:	000b883a 	mov	r5,zero
100079b8:	90cffc34 	orhi	r3,r18,16368
100079bc:	2805883a 	mov	r2,r5
100079c0:	003fdd06 	br	10007938 <__alt_data_end+0xf8007938>
100079c4:	000b883a 	mov	r5,zero
100079c8:	003fd806 	br	1000792c <__alt_data_end+0xf800792c>
100079cc:	000d883a 	mov	r6,zero
100079d0:	003fef06 	br	10007990 <__alt_data_end+0xf8007990>

100079d4 <__d2b>:
100079d4:	defff704 	addi	sp,sp,-36
100079d8:	dc000215 	stw	r16,8(sp)
100079dc:	3021883a 	mov	r16,r6
100079e0:	dc400315 	stw	r17,12(sp)
100079e4:	8022907a 	slli	r17,r16,1
100079e8:	dd400715 	stw	r21,28(sp)
100079ec:	282b883a 	mov	r21,r5
100079f0:	01400044 	movi	r5,1
100079f4:	dd000615 	stw	r20,24(sp)
100079f8:	dcc00515 	stw	r19,20(sp)
100079fc:	dc800415 	stw	r18,16(sp)
10007a00:	dfc00815 	stw	ra,32(sp)
10007a04:	3829883a 	mov	r20,r7
10007a08:	dc800917 	ldw	r18,36(sp)
10007a0c:	8822d57a 	srli	r17,r17,21
10007a10:	0006ce40 	call	10006ce4 <_Balloc>
10007a14:	1027883a 	mov	r19,r2
10007a18:	00800434 	movhi	r2,16
10007a1c:	10bfffc4 	addi	r2,r2,-1
10007a20:	808c703a 	and	r6,r16,r2
10007a24:	88000126 	beq	r17,zero,10007a2c <__d2b+0x58>
10007a28:	31800434 	orhi	r6,r6,16
10007a2c:	d9800015 	stw	r6,0(sp)
10007a30:	a8001f26 	beq	r21,zero,10007ab0 <__d2b+0xdc>
10007a34:	d9000104 	addi	r4,sp,4
10007a38:	dd400115 	stw	r21,4(sp)
10007a3c:	000705c0 	call	1000705c <__lo0bits>
10007a40:	d8c00017 	ldw	r3,0(sp)
10007a44:	1000291e 	bne	r2,zero,10007aec <__d2b+0x118>
10007a48:	d9000117 	ldw	r4,4(sp)
10007a4c:	99000515 	stw	r4,20(r19)
10007a50:	1820c03a 	cmpne	r16,r3,zero
10007a54:	84000044 	addi	r16,r16,1
10007a58:	98c00615 	stw	r3,24(r19)
10007a5c:	9c000415 	stw	r16,16(r19)
10007a60:	88001b1e 	bne	r17,zero,10007ad0 <__d2b+0xfc>
10007a64:	800690ba 	slli	r3,r16,2
10007a68:	10bef384 	addi	r2,r2,-1074
10007a6c:	a0800015 	stw	r2,0(r20)
10007a70:	98c5883a 	add	r2,r19,r3
10007a74:	11000417 	ldw	r4,16(r2)
10007a78:	8020917a 	slli	r16,r16,5
10007a7c:	0006ff40 	call	10006ff4 <__hi0bits>
10007a80:	8085c83a 	sub	r2,r16,r2
10007a84:	90800015 	stw	r2,0(r18)
10007a88:	9805883a 	mov	r2,r19
10007a8c:	dfc00817 	ldw	ra,32(sp)
10007a90:	dd400717 	ldw	r21,28(sp)
10007a94:	dd000617 	ldw	r20,24(sp)
10007a98:	dcc00517 	ldw	r19,20(sp)
10007a9c:	dc800417 	ldw	r18,16(sp)
10007aa0:	dc400317 	ldw	r17,12(sp)
10007aa4:	dc000217 	ldw	r16,8(sp)
10007aa8:	dec00904 	addi	sp,sp,36
10007aac:	f800283a 	ret
10007ab0:	d809883a 	mov	r4,sp
10007ab4:	000705c0 	call	1000705c <__lo0bits>
10007ab8:	d8c00017 	ldw	r3,0(sp)
10007abc:	04000044 	movi	r16,1
10007ac0:	9c000415 	stw	r16,16(r19)
10007ac4:	98c00515 	stw	r3,20(r19)
10007ac8:	10800804 	addi	r2,r2,32
10007acc:	883fe526 	beq	r17,zero,10007a64 <__alt_data_end+0xf8007a64>
10007ad0:	8c7ef344 	addi	r17,r17,-1075
10007ad4:	88a3883a 	add	r17,r17,r2
10007ad8:	00c00d44 	movi	r3,53
10007adc:	a4400015 	stw	r17,0(r20)
10007ae0:	1885c83a 	sub	r2,r3,r2
10007ae4:	90800015 	stw	r2,0(r18)
10007ae8:	003fe706 	br	10007a88 <__alt_data_end+0xf8007a88>
10007aec:	01000804 	movi	r4,32
10007af0:	2089c83a 	sub	r4,r4,r2
10007af4:	1908983a 	sll	r4,r3,r4
10007af8:	d9400117 	ldw	r5,4(sp)
10007afc:	1886d83a 	srl	r3,r3,r2
10007b00:	2148b03a 	or	r4,r4,r5
10007b04:	99000515 	stw	r4,20(r19)
10007b08:	d8c00015 	stw	r3,0(sp)
10007b0c:	003fd006 	br	10007a50 <__alt_data_end+0xf8007a50>

10007b10 <__ratio>:
10007b10:	defff904 	addi	sp,sp,-28
10007b14:	dc400315 	stw	r17,12(sp)
10007b18:	2823883a 	mov	r17,r5
10007b1c:	d9400104 	addi	r5,sp,4
10007b20:	dfc00615 	stw	ra,24(sp)
10007b24:	dcc00515 	stw	r19,20(sp)
10007b28:	dc800415 	stw	r18,16(sp)
10007b2c:	2027883a 	mov	r19,r4
10007b30:	dc000215 	stw	r16,8(sp)
10007b34:	00078b80 	call	100078b8 <__b2d>
10007b38:	8809883a 	mov	r4,r17
10007b3c:	d80b883a 	mov	r5,sp
10007b40:	1025883a 	mov	r18,r2
10007b44:	1821883a 	mov	r16,r3
10007b48:	00078b80 	call	100078b8 <__b2d>
10007b4c:	8a400417 	ldw	r9,16(r17)
10007b50:	9a000417 	ldw	r8,16(r19)
10007b54:	100d883a 	mov	r6,r2
10007b58:	d8800017 	ldw	r2,0(sp)
10007b5c:	4251c83a 	sub	r8,r8,r9
10007b60:	4012917a 	slli	r9,r8,5
10007b64:	da000117 	ldw	r8,4(sp)
10007b68:	4091c83a 	sub	r8,r8,r2
10007b6c:	4251883a 	add	r8,r8,r9
10007b70:	02000d0e 	bge	zero,r8,10007ba8 <__ratio+0x98>
10007b74:	4010953a 	slli	r8,r8,20
10007b78:	4421883a 	add	r16,r8,r16
10007b7c:	9009883a 	mov	r4,r18
10007b80:	800b883a 	mov	r5,r16
10007b84:	180f883a 	mov	r7,r3
10007b88:	000b9140 	call	1000b914 <__divdf3>
10007b8c:	dfc00617 	ldw	ra,24(sp)
10007b90:	dcc00517 	ldw	r19,20(sp)
10007b94:	dc800417 	ldw	r18,16(sp)
10007b98:	dc400317 	ldw	r17,12(sp)
10007b9c:	dc000217 	ldw	r16,8(sp)
10007ba0:	dec00704 	addi	sp,sp,28
10007ba4:	f800283a 	ret
10007ba8:	4010953a 	slli	r8,r8,20
10007bac:	1a07c83a 	sub	r3,r3,r8
10007bb0:	003ff206 	br	10007b7c <__alt_data_end+0xf8007b7c>

10007bb4 <_mprec_log10>:
10007bb4:	defffe04 	addi	sp,sp,-8
10007bb8:	dc000015 	stw	r16,0(sp)
10007bbc:	dfc00115 	stw	ra,4(sp)
10007bc0:	008005c4 	movi	r2,23
10007bc4:	2021883a 	mov	r16,r4
10007bc8:	11000d0e 	bge	r2,r4,10007c00 <_mprec_log10+0x4c>
10007bcc:	0005883a 	mov	r2,zero
10007bd0:	00cffc34 	movhi	r3,16368
10007bd4:	843fffc4 	addi	r16,r16,-1
10007bd8:	1009883a 	mov	r4,r2
10007bdc:	180b883a 	mov	r5,r3
10007be0:	000d883a 	mov	r6,zero
10007be4:	01d00934 	movhi	r7,16420
10007be8:	000c4d80 	call	1000c4d8 <__muldf3>
10007bec:	803ff91e 	bne	r16,zero,10007bd4 <__alt_data_end+0xf8007bd4>
10007bf0:	dfc00117 	ldw	ra,4(sp)
10007bf4:	dc000017 	ldw	r16,0(sp)
10007bf8:	dec00204 	addi	sp,sp,8
10007bfc:	f800283a 	ret
10007c00:	202090fa 	slli	r16,r4,3
10007c04:	00840074 	movhi	r2,4097
10007c08:	10809b04 	addi	r2,r2,620
10007c0c:	1421883a 	add	r16,r2,r16
10007c10:	80800017 	ldw	r2,0(r16)
10007c14:	80c00117 	ldw	r3,4(r16)
10007c18:	dfc00117 	ldw	ra,4(sp)
10007c1c:	dc000017 	ldw	r16,0(sp)
10007c20:	dec00204 	addi	sp,sp,8
10007c24:	f800283a 	ret

10007c28 <__copybits>:
10007c28:	297fffc4 	addi	r5,r5,-1
10007c2c:	280fd17a 	srai	r7,r5,5
10007c30:	30c00417 	ldw	r3,16(r6)
10007c34:	30800504 	addi	r2,r6,20
10007c38:	39c00044 	addi	r7,r7,1
10007c3c:	18c7883a 	add	r3,r3,r3
10007c40:	39cf883a 	add	r7,r7,r7
10007c44:	18c7883a 	add	r3,r3,r3
10007c48:	39cf883a 	add	r7,r7,r7
10007c4c:	10c7883a 	add	r3,r2,r3
10007c50:	21cf883a 	add	r7,r4,r7
10007c54:	10c00d2e 	bgeu	r2,r3,10007c8c <__copybits+0x64>
10007c58:	200b883a 	mov	r5,r4
10007c5c:	12000017 	ldw	r8,0(r2)
10007c60:	29400104 	addi	r5,r5,4
10007c64:	10800104 	addi	r2,r2,4
10007c68:	2a3fff15 	stw	r8,-4(r5)
10007c6c:	10fffb36 	bltu	r2,r3,10007c5c <__alt_data_end+0xf8007c5c>
10007c70:	1985c83a 	sub	r2,r3,r6
10007c74:	10bffac4 	addi	r2,r2,-21
10007c78:	1004d0ba 	srli	r2,r2,2
10007c7c:	10800044 	addi	r2,r2,1
10007c80:	1085883a 	add	r2,r2,r2
10007c84:	1085883a 	add	r2,r2,r2
10007c88:	2089883a 	add	r4,r4,r2
10007c8c:	21c0032e 	bgeu	r4,r7,10007c9c <__copybits+0x74>
10007c90:	20000015 	stw	zero,0(r4)
10007c94:	21000104 	addi	r4,r4,4
10007c98:	21fffd36 	bltu	r4,r7,10007c90 <__alt_data_end+0xf8007c90>
10007c9c:	f800283a 	ret

10007ca0 <__any_on>:
10007ca0:	20c00417 	ldw	r3,16(r4)
10007ca4:	2805d17a 	srai	r2,r5,5
10007ca8:	21000504 	addi	r4,r4,20
10007cac:	18800d0e 	bge	r3,r2,10007ce4 <__any_on+0x44>
10007cb0:	18c7883a 	add	r3,r3,r3
10007cb4:	18c7883a 	add	r3,r3,r3
10007cb8:	20c7883a 	add	r3,r4,r3
10007cbc:	20c0192e 	bgeu	r4,r3,10007d24 <__any_on+0x84>
10007cc0:	18bfff17 	ldw	r2,-4(r3)
10007cc4:	18ffff04 	addi	r3,r3,-4
10007cc8:	1000041e 	bne	r2,zero,10007cdc <__any_on+0x3c>
10007ccc:	20c0142e 	bgeu	r4,r3,10007d20 <__any_on+0x80>
10007cd0:	18ffff04 	addi	r3,r3,-4
10007cd4:	19400017 	ldw	r5,0(r3)
10007cd8:	283ffc26 	beq	r5,zero,10007ccc <__alt_data_end+0xf8007ccc>
10007cdc:	00800044 	movi	r2,1
10007ce0:	f800283a 	ret
10007ce4:	10c00a0e 	bge	r2,r3,10007d10 <__any_on+0x70>
10007ce8:	1085883a 	add	r2,r2,r2
10007cec:	1085883a 	add	r2,r2,r2
10007cf0:	294007cc 	andi	r5,r5,31
10007cf4:	2087883a 	add	r3,r4,r2
10007cf8:	283ff026 	beq	r5,zero,10007cbc <__alt_data_end+0xf8007cbc>
10007cfc:	19800017 	ldw	r6,0(r3)
10007d00:	3144d83a 	srl	r2,r6,r5
10007d04:	114a983a 	sll	r5,r2,r5
10007d08:	29bff41e 	bne	r5,r6,10007cdc <__alt_data_end+0xf8007cdc>
10007d0c:	003feb06 	br	10007cbc <__alt_data_end+0xf8007cbc>
10007d10:	1085883a 	add	r2,r2,r2
10007d14:	1085883a 	add	r2,r2,r2
10007d18:	2087883a 	add	r3,r4,r2
10007d1c:	003fe706 	br	10007cbc <__alt_data_end+0xf8007cbc>
10007d20:	f800283a 	ret
10007d24:	0005883a 	mov	r2,zero
10007d28:	f800283a 	ret

10007d2c <_realloc_r>:
10007d2c:	defff604 	addi	sp,sp,-40
10007d30:	dcc00315 	stw	r19,12(sp)
10007d34:	dc400115 	stw	r17,4(sp)
10007d38:	dfc00915 	stw	ra,36(sp)
10007d3c:	df000815 	stw	fp,32(sp)
10007d40:	ddc00715 	stw	r23,28(sp)
10007d44:	dd800615 	stw	r22,24(sp)
10007d48:	dd400515 	stw	r21,20(sp)
10007d4c:	dd000415 	stw	r20,16(sp)
10007d50:	dc800215 	stw	r18,8(sp)
10007d54:	dc000015 	stw	r16,0(sp)
10007d58:	2827883a 	mov	r19,r5
10007d5c:	3023883a 	mov	r17,r6
10007d60:	2800bf26 	beq	r5,zero,10008060 <_realloc_r+0x334>
10007d64:	2025883a 	mov	r18,r4
10007d68:	000de540 	call	1000de54 <__malloc_lock>
10007d6c:	98ffff17 	ldw	r3,-4(r19)
10007d70:	01bfff04 	movi	r6,-4
10007d74:	890002c4 	addi	r4,r17,11
10007d78:	01c00584 	movi	r7,22
10007d7c:	9d7ffe04 	addi	r21,r19,-8
10007d80:	19a0703a 	and	r16,r3,r6
10007d84:	39003f2e 	bgeu	r7,r4,10007e84 <_realloc_r+0x158>
10007d88:	053ffe04 	movi	r20,-8
10007d8c:	2528703a 	and	r20,r4,r20
10007d90:	a00f883a 	mov	r7,r20
10007d94:	a0008216 	blt	r20,zero,10007fa0 <_realloc_r+0x274>
10007d98:	a4408136 	bltu	r20,r17,10007fa0 <_realloc_r+0x274>
10007d9c:	81c03c0e 	bge	r16,r7,10007e90 <_realloc_r+0x164>
10007da0:	07040074 	movhi	fp,4097
10007da4:	e703d804 	addi	fp,fp,3936
10007da8:	e1000217 	ldw	r4,8(fp)
10007dac:	ac05883a 	add	r2,r21,r16
10007db0:	2080bf26 	beq	r4,r2,100080b0 <_realloc_r+0x384>
10007db4:	11000117 	ldw	r4,4(r2)
10007db8:	023fff84 	movi	r8,-2
10007dbc:	2210703a 	and	r8,r4,r8
10007dc0:	1211883a 	add	r8,r2,r8
10007dc4:	41400117 	ldw	r5,4(r8)
10007dc8:	2940004c 	andi	r5,r5,1
10007dcc:	28004a1e 	bne	r5,zero,10007ef8 <_realloc_r+0x1cc>
10007dd0:	017fff04 	movi	r5,-4
10007dd4:	2148703a 	and	r4,r4,r5
10007dd8:	2409883a 	add	r4,r4,r16
10007ddc:	21c0ad0e 	bge	r4,r7,10008094 <_realloc_r+0x368>
10007de0:	18c0004c 	andi	r3,r3,1
10007de4:	18007f1e 	bne	r3,zero,10007fe4 <_realloc_r+0x2b8>
10007de8:	9dfffe17 	ldw	r23,-8(r19)
10007dec:	adefc83a 	sub	r23,r21,r23
10007df0:	bd800117 	ldw	r22,4(r23)
10007df4:	b14a703a 	and	r5,r22,r5
10007df8:	216d883a 	add	r22,r4,r5
10007dfc:	b1c04516 	blt	r22,r7,10007f14 <_realloc_r+0x1e8>
10007e00:	10c00317 	ldw	r3,12(r2)
10007e04:	10800217 	ldw	r2,8(r2)
10007e08:	81bfff04 	addi	r6,r16,-4
10007e0c:	bc400204 	addi	r17,r23,8
10007e10:	10c00315 	stw	r3,12(r2)
10007e14:	18800215 	stw	r2,8(r3)
10007e18:	b9400217 	ldw	r5,8(r23)
10007e1c:	b8c00317 	ldw	r3,12(r23)
10007e20:	00800904 	movi	r2,36
10007e24:	28c00315 	stw	r3,12(r5)
10007e28:	19400215 	stw	r5,8(r3)
10007e2c:	1180ef36 	bltu	r2,r6,100081ec <_realloc_r+0x4c0>
10007e30:	008004c4 	movi	r2,19
10007e34:	1180da2e 	bgeu	r2,r6,100081a0 <_realloc_r+0x474>
10007e38:	98800017 	ldw	r2,0(r19)
10007e3c:	b8800215 	stw	r2,8(r23)
10007e40:	98800117 	ldw	r2,4(r19)
10007e44:	b8800315 	stw	r2,12(r23)
10007e48:	008006c4 	movi	r2,27
10007e4c:	1180fc2e 	bgeu	r2,r6,10008240 <_realloc_r+0x514>
10007e50:	98800217 	ldw	r2,8(r19)
10007e54:	b8800415 	stw	r2,16(r23)
10007e58:	98800317 	ldw	r2,12(r19)
10007e5c:	b8800515 	stw	r2,20(r23)
10007e60:	00800904 	movi	r2,36
10007e64:	3080421e 	bne	r6,r2,10007f70 <_realloc_r+0x244>
10007e68:	98800417 	ldw	r2,16(r19)
10007e6c:	9cc00604 	addi	r19,r19,24
10007e70:	b8c00804 	addi	r3,r23,32
10007e74:	b8800615 	stw	r2,24(r23)
10007e78:	98bfff17 	ldw	r2,-4(r19)
10007e7c:	b8800715 	stw	r2,28(r23)
10007e80:	00003d06 	br	10007f78 <_realloc_r+0x24c>
10007e84:	01c00404 	movi	r7,16
10007e88:	3829883a 	mov	r20,r7
10007e8c:	003fc206 	br	10007d98 <__alt_data_end+0xf8007d98>
10007e90:	9823883a 	mov	r17,r19
10007e94:	850fc83a 	sub	r7,r16,r20
10007e98:	008003c4 	movi	r2,15
10007e9c:	18c0004c 	andi	r3,r3,1
10007ea0:	11c04336 	bltu	r2,r7,10007fb0 <_realloc_r+0x284>
10007ea4:	1c06b03a 	or	r3,r3,r16
10007ea8:	a8c00115 	stw	r3,4(r21)
10007eac:	ac21883a 	add	r16,r21,r16
10007eb0:	80c00117 	ldw	r3,4(r16)
10007eb4:	18c00054 	ori	r3,r3,1
10007eb8:	80c00115 	stw	r3,4(r16)
10007ebc:	9009883a 	mov	r4,r18
10007ec0:	000de740 	call	1000de74 <__malloc_unlock>
10007ec4:	8805883a 	mov	r2,r17
10007ec8:	dfc00917 	ldw	ra,36(sp)
10007ecc:	df000817 	ldw	fp,32(sp)
10007ed0:	ddc00717 	ldw	r23,28(sp)
10007ed4:	dd800617 	ldw	r22,24(sp)
10007ed8:	dd400517 	ldw	r21,20(sp)
10007edc:	dd000417 	ldw	r20,16(sp)
10007ee0:	dcc00317 	ldw	r19,12(sp)
10007ee4:	dc800217 	ldw	r18,8(sp)
10007ee8:	dc400117 	ldw	r17,4(sp)
10007eec:	dc000017 	ldw	r16,0(sp)
10007ef0:	dec00a04 	addi	sp,sp,40
10007ef4:	f800283a 	ret
10007ef8:	18c0004c 	andi	r3,r3,1
10007efc:	1800391e 	bne	r3,zero,10007fe4 <_realloc_r+0x2b8>
10007f00:	9dfffe17 	ldw	r23,-8(r19)
10007f04:	00bfff04 	movi	r2,-4
10007f08:	adefc83a 	sub	r23,r21,r23
10007f0c:	b9400117 	ldw	r5,4(r23)
10007f10:	288a703a 	and	r5,r5,r2
10007f14:	2c2d883a 	add	r22,r5,r16
10007f18:	b1c03216 	blt	r22,r7,10007fe4 <_realloc_r+0x2b8>
10007f1c:	b8800317 	ldw	r2,12(r23)
10007f20:	b8c00217 	ldw	r3,8(r23)
10007f24:	81bfff04 	addi	r6,r16,-4
10007f28:	01000904 	movi	r4,36
10007f2c:	18800315 	stw	r2,12(r3)
10007f30:	10c00215 	stw	r3,8(r2)
10007f34:	bc400204 	addi	r17,r23,8
10007f38:	2180ac36 	bltu	r4,r6,100081ec <_realloc_r+0x4c0>
10007f3c:	008004c4 	movi	r2,19
10007f40:	1180972e 	bgeu	r2,r6,100081a0 <_realloc_r+0x474>
10007f44:	98800017 	ldw	r2,0(r19)
10007f48:	b8800215 	stw	r2,8(r23)
10007f4c:	98800117 	ldw	r2,4(r19)
10007f50:	b8800315 	stw	r2,12(r23)
10007f54:	008006c4 	movi	r2,27
10007f58:	1180b92e 	bgeu	r2,r6,10008240 <_realloc_r+0x514>
10007f5c:	98800217 	ldw	r2,8(r19)
10007f60:	b8800415 	stw	r2,16(r23)
10007f64:	98800317 	ldw	r2,12(r19)
10007f68:	b8800515 	stw	r2,20(r23)
10007f6c:	313fbe26 	beq	r6,r4,10007e68 <__alt_data_end+0xf8007e68>
10007f70:	b8c00604 	addi	r3,r23,24
10007f74:	9cc00404 	addi	r19,r19,16
10007f78:	98800017 	ldw	r2,0(r19)
10007f7c:	b021883a 	mov	r16,r22
10007f80:	b82b883a 	mov	r21,r23
10007f84:	18800015 	stw	r2,0(r3)
10007f88:	98800117 	ldw	r2,4(r19)
10007f8c:	18800115 	stw	r2,4(r3)
10007f90:	98800217 	ldw	r2,8(r19)
10007f94:	18800215 	stw	r2,8(r3)
10007f98:	b8c00117 	ldw	r3,4(r23)
10007f9c:	003fbd06 	br	10007e94 <__alt_data_end+0xf8007e94>
10007fa0:	00800304 	movi	r2,12
10007fa4:	90800015 	stw	r2,0(r18)
10007fa8:	0005883a 	mov	r2,zero
10007fac:	003fc606 	br	10007ec8 <__alt_data_end+0xf8007ec8>
10007fb0:	1d06b03a 	or	r3,r3,r20
10007fb4:	ad0b883a 	add	r5,r21,r20
10007fb8:	a8c00115 	stw	r3,4(r21)
10007fbc:	38800054 	ori	r2,r7,1
10007fc0:	28800115 	stw	r2,4(r5)
10007fc4:	29cf883a 	add	r7,r5,r7
10007fc8:	38800117 	ldw	r2,4(r7)
10007fcc:	9009883a 	mov	r4,r18
10007fd0:	29400204 	addi	r5,r5,8
10007fd4:	10800054 	ori	r2,r2,1
10007fd8:	38800115 	stw	r2,4(r7)
10007fdc:	00056380 	call	10005638 <_free_r>
10007fe0:	003fb606 	br	10007ebc <__alt_data_end+0xf8007ebc>
10007fe4:	880b883a 	mov	r5,r17
10007fe8:	9009883a 	mov	r4,r18
10007fec:	00061d40 	call	100061d4 <_malloc_r>
10007ff0:	1023883a 	mov	r17,r2
10007ff4:	1000aa26 	beq	r2,zero,100082a0 <_realloc_r+0x574>
10007ff8:	98ffff17 	ldw	r3,-4(r19)
10007ffc:	113ffe04 	addi	r4,r2,-8
10008000:	00bfff84 	movi	r2,-2
10008004:	1884703a 	and	r2,r3,r2
10008008:	a885883a 	add	r2,r21,r2
1000800c:	20808626 	beq	r4,r2,10008228 <_realloc_r+0x4fc>
10008010:	81bfff04 	addi	r6,r16,-4
10008014:	00800904 	movi	r2,36
10008018:	11807036 	bltu	r2,r6,100081dc <_realloc_r+0x4b0>
1000801c:	00c004c4 	movi	r3,19
10008020:	19805636 	bltu	r3,r6,1000817c <_realloc_r+0x450>
10008024:	8805883a 	mov	r2,r17
10008028:	9807883a 	mov	r3,r19
1000802c:	19000017 	ldw	r4,0(r3)
10008030:	11000015 	stw	r4,0(r2)
10008034:	19000117 	ldw	r4,4(r3)
10008038:	11000115 	stw	r4,4(r2)
1000803c:	18c00217 	ldw	r3,8(r3)
10008040:	10c00215 	stw	r3,8(r2)
10008044:	980b883a 	mov	r5,r19
10008048:	9009883a 	mov	r4,r18
1000804c:	00056380 	call	10005638 <_free_r>
10008050:	9009883a 	mov	r4,r18
10008054:	000de740 	call	1000de74 <__malloc_unlock>
10008058:	8805883a 	mov	r2,r17
1000805c:	003f9a06 	br	10007ec8 <__alt_data_end+0xf8007ec8>
10008060:	300b883a 	mov	r5,r6
10008064:	dfc00917 	ldw	ra,36(sp)
10008068:	df000817 	ldw	fp,32(sp)
1000806c:	ddc00717 	ldw	r23,28(sp)
10008070:	dd800617 	ldw	r22,24(sp)
10008074:	dd400517 	ldw	r21,20(sp)
10008078:	dd000417 	ldw	r20,16(sp)
1000807c:	dcc00317 	ldw	r19,12(sp)
10008080:	dc800217 	ldw	r18,8(sp)
10008084:	dc400117 	ldw	r17,4(sp)
10008088:	dc000017 	ldw	r16,0(sp)
1000808c:	dec00a04 	addi	sp,sp,40
10008090:	00061d41 	jmpi	100061d4 <_malloc_r>
10008094:	11400317 	ldw	r5,12(r2)
10008098:	10800217 	ldw	r2,8(r2)
1000809c:	9823883a 	mov	r17,r19
100080a0:	2021883a 	mov	r16,r4
100080a4:	11400315 	stw	r5,12(r2)
100080a8:	28800215 	stw	r2,8(r5)
100080ac:	003f7906 	br	10007e94 <__alt_data_end+0xf8007e94>
100080b0:	21000117 	ldw	r4,4(r4)
100080b4:	00bfff04 	movi	r2,-4
100080b8:	a1800404 	addi	r6,r20,16
100080bc:	2088703a 	and	r4,r4,r2
100080c0:	2409883a 	add	r4,r4,r16
100080c4:	2180380e 	bge	r4,r6,100081a8 <_realloc_r+0x47c>
100080c8:	18c0004c 	andi	r3,r3,1
100080cc:	183fc51e 	bne	r3,zero,10007fe4 <__alt_data_end+0xf8007fe4>
100080d0:	9dfffe17 	ldw	r23,-8(r19)
100080d4:	adefc83a 	sub	r23,r21,r23
100080d8:	b9400117 	ldw	r5,4(r23)
100080dc:	288a703a 	and	r5,r5,r2
100080e0:	216d883a 	add	r22,r4,r5
100080e4:	b1bf8b16 	blt	r22,r6,10007f14 <__alt_data_end+0xf8007f14>
100080e8:	b8800317 	ldw	r2,12(r23)
100080ec:	b8c00217 	ldw	r3,8(r23)
100080f0:	81bfff04 	addi	r6,r16,-4
100080f4:	01000904 	movi	r4,36
100080f8:	18800315 	stw	r2,12(r3)
100080fc:	10c00215 	stw	r3,8(r2)
10008100:	bc400204 	addi	r17,r23,8
10008104:	21805a36 	bltu	r4,r6,10008270 <_realloc_r+0x544>
10008108:	008004c4 	movi	r2,19
1000810c:	1180562e 	bgeu	r2,r6,10008268 <_realloc_r+0x53c>
10008110:	98800017 	ldw	r2,0(r19)
10008114:	b8800215 	stw	r2,8(r23)
10008118:	98800117 	ldw	r2,4(r19)
1000811c:	b8800315 	stw	r2,12(r23)
10008120:	008006c4 	movi	r2,27
10008124:	11805636 	bltu	r2,r6,10008280 <_realloc_r+0x554>
10008128:	b8800404 	addi	r2,r23,16
1000812c:	9cc00204 	addi	r19,r19,8
10008130:	98c00017 	ldw	r3,0(r19)
10008134:	10c00015 	stw	r3,0(r2)
10008138:	98c00117 	ldw	r3,4(r19)
1000813c:	10c00115 	stw	r3,4(r2)
10008140:	98c00217 	ldw	r3,8(r19)
10008144:	10c00215 	stw	r3,8(r2)
10008148:	bd07883a 	add	r3,r23,r20
1000814c:	b505c83a 	sub	r2,r22,r20
10008150:	e0c00215 	stw	r3,8(fp)
10008154:	10800054 	ori	r2,r2,1
10008158:	18800115 	stw	r2,4(r3)
1000815c:	b8800117 	ldw	r2,4(r23)
10008160:	9009883a 	mov	r4,r18
10008164:	1080004c 	andi	r2,r2,1
10008168:	a0a8b03a 	or	r20,r20,r2
1000816c:	bd000115 	stw	r20,4(r23)
10008170:	000de740 	call	1000de74 <__malloc_unlock>
10008174:	8805883a 	mov	r2,r17
10008178:	003f5306 	br	10007ec8 <__alt_data_end+0xf8007ec8>
1000817c:	98c00017 	ldw	r3,0(r19)
10008180:	88c00015 	stw	r3,0(r17)
10008184:	98c00117 	ldw	r3,4(r19)
10008188:	88c00115 	stw	r3,4(r17)
1000818c:	00c006c4 	movi	r3,27
10008190:	19801d36 	bltu	r3,r6,10008208 <_realloc_r+0x4dc>
10008194:	88800204 	addi	r2,r17,8
10008198:	98c00204 	addi	r3,r19,8
1000819c:	003fa306 	br	1000802c <__alt_data_end+0xf800802c>
100081a0:	8807883a 	mov	r3,r17
100081a4:	003f7406 	br	10007f78 <__alt_data_end+0xf8007f78>
100081a8:	ad2b883a 	add	r21,r21,r20
100081ac:	2505c83a 	sub	r2,r4,r20
100081b0:	e5400215 	stw	r21,8(fp)
100081b4:	10800054 	ori	r2,r2,1
100081b8:	a8800115 	stw	r2,4(r21)
100081bc:	98bfff17 	ldw	r2,-4(r19)
100081c0:	9009883a 	mov	r4,r18
100081c4:	1080004c 	andi	r2,r2,1
100081c8:	a0a8b03a 	or	r20,r20,r2
100081cc:	9d3fff15 	stw	r20,-4(r19)
100081d0:	000de740 	call	1000de74 <__malloc_unlock>
100081d4:	9805883a 	mov	r2,r19
100081d8:	003f3b06 	br	10007ec8 <__alt_data_end+0xf8007ec8>
100081dc:	8809883a 	mov	r4,r17
100081e0:	980b883a 	mov	r5,r19
100081e4:	0006a640 	call	10006a64 <memmove>
100081e8:	003f9606 	br	10008044 <__alt_data_end+0xf8008044>
100081ec:	8809883a 	mov	r4,r17
100081f0:	980b883a 	mov	r5,r19
100081f4:	0006a640 	call	10006a64 <memmove>
100081f8:	b8c00117 	ldw	r3,4(r23)
100081fc:	b021883a 	mov	r16,r22
10008200:	b82b883a 	mov	r21,r23
10008204:	003f2306 	br	10007e94 <__alt_data_end+0xf8007e94>
10008208:	98c00217 	ldw	r3,8(r19)
1000820c:	88c00215 	stw	r3,8(r17)
10008210:	98c00317 	ldw	r3,12(r19)
10008214:	88c00315 	stw	r3,12(r17)
10008218:	30800c26 	beq	r6,r2,1000824c <_realloc_r+0x520>
1000821c:	88800404 	addi	r2,r17,16
10008220:	98c00404 	addi	r3,r19,16
10008224:	003f8106 	br	1000802c <__alt_data_end+0xf800802c>
10008228:	893fff17 	ldw	r4,-4(r17)
1000822c:	00bfff04 	movi	r2,-4
10008230:	9823883a 	mov	r17,r19
10008234:	2084703a 	and	r2,r4,r2
10008238:	80a1883a 	add	r16,r16,r2
1000823c:	003f1506 	br	10007e94 <__alt_data_end+0xf8007e94>
10008240:	b8c00404 	addi	r3,r23,16
10008244:	9cc00204 	addi	r19,r19,8
10008248:	003f4b06 	br	10007f78 <__alt_data_end+0xf8007f78>
1000824c:	99000417 	ldw	r4,16(r19)
10008250:	88800604 	addi	r2,r17,24
10008254:	98c00604 	addi	r3,r19,24
10008258:	89000415 	stw	r4,16(r17)
1000825c:	99000517 	ldw	r4,20(r19)
10008260:	89000515 	stw	r4,20(r17)
10008264:	003f7106 	br	1000802c <__alt_data_end+0xf800802c>
10008268:	8805883a 	mov	r2,r17
1000826c:	003fb006 	br	10008130 <__alt_data_end+0xf8008130>
10008270:	8809883a 	mov	r4,r17
10008274:	980b883a 	mov	r5,r19
10008278:	0006a640 	call	10006a64 <memmove>
1000827c:	003fb206 	br	10008148 <__alt_data_end+0xf8008148>
10008280:	98800217 	ldw	r2,8(r19)
10008284:	b8800415 	stw	r2,16(r23)
10008288:	98800317 	ldw	r2,12(r19)
1000828c:	b8800515 	stw	r2,20(r23)
10008290:	31000726 	beq	r6,r4,100082b0 <_realloc_r+0x584>
10008294:	b8800604 	addi	r2,r23,24
10008298:	9cc00404 	addi	r19,r19,16
1000829c:	003fa406 	br	10008130 <__alt_data_end+0xf8008130>
100082a0:	9009883a 	mov	r4,r18
100082a4:	000de740 	call	1000de74 <__malloc_unlock>
100082a8:	0005883a 	mov	r2,zero
100082ac:	003f0606 	br	10007ec8 <__alt_data_end+0xf8007ec8>
100082b0:	98c00417 	ldw	r3,16(r19)
100082b4:	9cc00604 	addi	r19,r19,24
100082b8:	b8800804 	addi	r2,r23,32
100082bc:	b8c00615 	stw	r3,24(r23)
100082c0:	98ffff17 	ldw	r3,-4(r19)
100082c4:	b8c00715 	stw	r3,28(r23)
100082c8:	003f9906 	br	10008130 <__alt_data_end+0xf8008130>

100082cc <__fpclassifyd>:
100082cc:	00a00034 	movhi	r2,32768
100082d0:	10bfffc4 	addi	r2,r2,-1
100082d4:	2884703a 	and	r2,r5,r2
100082d8:	10000726 	beq	r2,zero,100082f8 <__fpclassifyd+0x2c>
100082dc:	00fffc34 	movhi	r3,65520
100082e0:	019ff834 	movhi	r6,32736
100082e4:	28c7883a 	add	r3,r5,r3
100082e8:	31bfffc4 	addi	r6,r6,-1
100082ec:	30c00536 	bltu	r6,r3,10008304 <__fpclassifyd+0x38>
100082f0:	00800104 	movi	r2,4
100082f4:	f800283a 	ret
100082f8:	2000021e 	bne	r4,zero,10008304 <__fpclassifyd+0x38>
100082fc:	00800084 	movi	r2,2
10008300:	f800283a 	ret
10008304:	00dffc34 	movhi	r3,32752
10008308:	019ff834 	movhi	r6,32736
1000830c:	28cb883a 	add	r5,r5,r3
10008310:	31bfffc4 	addi	r6,r6,-1
10008314:	317ff62e 	bgeu	r6,r5,100082f0 <__alt_data_end+0xf80082f0>
10008318:	01400434 	movhi	r5,16
1000831c:	297fffc4 	addi	r5,r5,-1
10008320:	28800236 	bltu	r5,r2,1000832c <__fpclassifyd+0x60>
10008324:	008000c4 	movi	r2,3
10008328:	f800283a 	ret
1000832c:	10c00226 	beq	r2,r3,10008338 <__fpclassifyd+0x6c>
10008330:	0005883a 	mov	r2,zero
10008334:	f800283a 	ret
10008338:	2005003a 	cmpeq	r2,r4,zero
1000833c:	f800283a 	ret

10008340 <_sbrk_r>:
10008340:	defffd04 	addi	sp,sp,-12
10008344:	dc000015 	stw	r16,0(sp)
10008348:	04040074 	movhi	r16,4097
1000834c:	dc400115 	stw	r17,4(sp)
10008350:	8411bc04 	addi	r16,r16,18160
10008354:	2023883a 	mov	r17,r4
10008358:	2809883a 	mov	r4,r5
1000835c:	dfc00215 	stw	ra,8(sp)
10008360:	80000015 	stw	zero,0(r16)
10008364:	000e0680 	call	1000e068 <sbrk>
10008368:	00ffffc4 	movi	r3,-1
1000836c:	10c00526 	beq	r2,r3,10008384 <_sbrk_r+0x44>
10008370:	dfc00217 	ldw	ra,8(sp)
10008374:	dc400117 	ldw	r17,4(sp)
10008378:	dc000017 	ldw	r16,0(sp)
1000837c:	dec00304 	addi	sp,sp,12
10008380:	f800283a 	ret
10008384:	80c00017 	ldw	r3,0(r16)
10008388:	183ff926 	beq	r3,zero,10008370 <__alt_data_end+0xf8008370>
1000838c:	88c00015 	stw	r3,0(r17)
10008390:	003ff706 	br	10008370 <__alt_data_end+0xf8008370>

10008394 <__sread>:
10008394:	defffe04 	addi	sp,sp,-8
10008398:	dc000015 	stw	r16,0(sp)
1000839c:	2821883a 	mov	r16,r5
100083a0:	2940038f 	ldh	r5,14(r5)
100083a4:	dfc00115 	stw	ra,4(sp)
100083a8:	000a0500 	call	1000a050 <_read_r>
100083ac:	10000716 	blt	r2,zero,100083cc <__sread+0x38>
100083b0:	80c01417 	ldw	r3,80(r16)
100083b4:	1887883a 	add	r3,r3,r2
100083b8:	80c01415 	stw	r3,80(r16)
100083bc:	dfc00117 	ldw	ra,4(sp)
100083c0:	dc000017 	ldw	r16,0(sp)
100083c4:	dec00204 	addi	sp,sp,8
100083c8:	f800283a 	ret
100083cc:	80c0030b 	ldhu	r3,12(r16)
100083d0:	18fbffcc 	andi	r3,r3,61439
100083d4:	80c0030d 	sth	r3,12(r16)
100083d8:	dfc00117 	ldw	ra,4(sp)
100083dc:	dc000017 	ldw	r16,0(sp)
100083e0:	dec00204 	addi	sp,sp,8
100083e4:	f800283a 	ret

100083e8 <__seofread>:
100083e8:	0005883a 	mov	r2,zero
100083ec:	f800283a 	ret

100083f0 <__swrite>:
100083f0:	2880030b 	ldhu	r2,12(r5)
100083f4:	defffb04 	addi	sp,sp,-20
100083f8:	dcc00315 	stw	r19,12(sp)
100083fc:	dc800215 	stw	r18,8(sp)
10008400:	dc400115 	stw	r17,4(sp)
10008404:	dc000015 	stw	r16,0(sp)
10008408:	dfc00415 	stw	ra,16(sp)
1000840c:	10c0400c 	andi	r3,r2,256
10008410:	2821883a 	mov	r16,r5
10008414:	2027883a 	mov	r19,r4
10008418:	3025883a 	mov	r18,r6
1000841c:	3823883a 	mov	r17,r7
10008420:	18000526 	beq	r3,zero,10008438 <__swrite+0x48>
10008424:	2940038f 	ldh	r5,14(r5)
10008428:	000d883a 	mov	r6,zero
1000842c:	01c00084 	movi	r7,2
10008430:	0009ff40 	call	10009ff4 <_lseek_r>
10008434:	8080030b 	ldhu	r2,12(r16)
10008438:	8140038f 	ldh	r5,14(r16)
1000843c:	10bbffcc 	andi	r2,r2,61439
10008440:	9809883a 	mov	r4,r19
10008444:	900d883a 	mov	r6,r18
10008448:	880f883a 	mov	r7,r17
1000844c:	8080030d 	sth	r2,12(r16)
10008450:	dfc00417 	ldw	ra,16(sp)
10008454:	dcc00317 	ldw	r19,12(sp)
10008458:	dc800217 	ldw	r18,8(sp)
1000845c:	dc400117 	ldw	r17,4(sp)
10008460:	dc000017 	ldw	r16,0(sp)
10008464:	dec00504 	addi	sp,sp,20
10008468:	0009ad01 	jmpi	10009ad0 <_write_r>

1000846c <__sseek>:
1000846c:	defffe04 	addi	sp,sp,-8
10008470:	dc000015 	stw	r16,0(sp)
10008474:	2821883a 	mov	r16,r5
10008478:	2940038f 	ldh	r5,14(r5)
1000847c:	dfc00115 	stw	ra,4(sp)
10008480:	0009ff40 	call	10009ff4 <_lseek_r>
10008484:	00ffffc4 	movi	r3,-1
10008488:	10c00826 	beq	r2,r3,100084ac <__sseek+0x40>
1000848c:	80c0030b 	ldhu	r3,12(r16)
10008490:	80801415 	stw	r2,80(r16)
10008494:	18c40014 	ori	r3,r3,4096
10008498:	80c0030d 	sth	r3,12(r16)
1000849c:	dfc00117 	ldw	ra,4(sp)
100084a0:	dc000017 	ldw	r16,0(sp)
100084a4:	dec00204 	addi	sp,sp,8
100084a8:	f800283a 	ret
100084ac:	80c0030b 	ldhu	r3,12(r16)
100084b0:	18fbffcc 	andi	r3,r3,61439
100084b4:	80c0030d 	sth	r3,12(r16)
100084b8:	dfc00117 	ldw	ra,4(sp)
100084bc:	dc000017 	ldw	r16,0(sp)
100084c0:	dec00204 	addi	sp,sp,8
100084c4:	f800283a 	ret

100084c8 <__sclose>:
100084c8:	2940038f 	ldh	r5,14(r5)
100084cc:	0009b2c1 	jmpi	10009b2c <_close_r>

100084d0 <strcmp>:
100084d0:	2144b03a 	or	r2,r4,r5
100084d4:	108000cc 	andi	r2,r2,3
100084d8:	1000171e 	bne	r2,zero,10008538 <strcmp+0x68>
100084dc:	20800017 	ldw	r2,0(r4)
100084e0:	28c00017 	ldw	r3,0(r5)
100084e4:	10c0141e 	bne	r2,r3,10008538 <strcmp+0x68>
100084e8:	027fbff4 	movhi	r9,65279
100084ec:	4a7fbfc4 	addi	r9,r9,-257
100084f0:	0086303a 	nor	r3,zero,r2
100084f4:	02202074 	movhi	r8,32897
100084f8:	1245883a 	add	r2,r2,r9
100084fc:	42202004 	addi	r8,r8,-32640
10008500:	10c4703a 	and	r2,r2,r3
10008504:	1204703a 	and	r2,r2,r8
10008508:	10000226 	beq	r2,zero,10008514 <strcmp+0x44>
1000850c:	00001706 	br	1000856c <strcmp+0x9c>
10008510:	1000161e 	bne	r2,zero,1000856c <strcmp+0x9c>
10008514:	21000104 	addi	r4,r4,4
10008518:	20c00017 	ldw	r3,0(r4)
1000851c:	29400104 	addi	r5,r5,4
10008520:	29800017 	ldw	r6,0(r5)
10008524:	1a4f883a 	add	r7,r3,r9
10008528:	00c4303a 	nor	r2,zero,r3
1000852c:	3884703a 	and	r2,r7,r2
10008530:	1204703a 	and	r2,r2,r8
10008534:	19bff626 	beq	r3,r6,10008510 <__alt_data_end+0xf8008510>
10008538:	20800007 	ldb	r2,0(r4)
1000853c:	1000051e 	bne	r2,zero,10008554 <strcmp+0x84>
10008540:	00000606 	br	1000855c <strcmp+0x8c>
10008544:	21000044 	addi	r4,r4,1
10008548:	20800007 	ldb	r2,0(r4)
1000854c:	29400044 	addi	r5,r5,1
10008550:	10000226 	beq	r2,zero,1000855c <strcmp+0x8c>
10008554:	28c00007 	ldb	r3,0(r5)
10008558:	10fffa26 	beq	r2,r3,10008544 <__alt_data_end+0xf8008544>
1000855c:	20800003 	ldbu	r2,0(r4)
10008560:	28c00003 	ldbu	r3,0(r5)
10008564:	10c5c83a 	sub	r2,r2,r3
10008568:	f800283a 	ret
1000856c:	0005883a 	mov	r2,zero
10008570:	f800283a 	ret

10008574 <__sprint_r.part.0>:
10008574:	28801917 	ldw	r2,100(r5)
10008578:	defff604 	addi	sp,sp,-40
1000857c:	dd400515 	stw	r21,20(sp)
10008580:	dcc00315 	stw	r19,12(sp)
10008584:	dfc00915 	stw	ra,36(sp)
10008588:	df000815 	stw	fp,32(sp)
1000858c:	ddc00715 	stw	r23,28(sp)
10008590:	dd800615 	stw	r22,24(sp)
10008594:	dd000415 	stw	r20,16(sp)
10008598:	dc800215 	stw	r18,8(sp)
1000859c:	dc400115 	stw	r17,4(sp)
100085a0:	dc000015 	stw	r16,0(sp)
100085a4:	1088000c 	andi	r2,r2,8192
100085a8:	2827883a 	mov	r19,r5
100085ac:	302b883a 	mov	r21,r6
100085b0:	10002d26 	beq	r2,zero,10008668 <__sprint_r.part.0+0xf4>
100085b4:	30800217 	ldw	r2,8(r6)
100085b8:	35800017 	ldw	r22,0(r6)
100085bc:	10002826 	beq	r2,zero,10008660 <__sprint_r.part.0+0xec>
100085c0:	2029883a 	mov	r20,r4
100085c4:	b5c00104 	addi	r23,r22,4
100085c8:	04bfffc4 	movi	r18,-1
100085cc:	bc400017 	ldw	r17,0(r23)
100085d0:	b4000017 	ldw	r16,0(r22)
100085d4:	0039883a 	mov	fp,zero
100085d8:	8822d0ba 	srli	r17,r17,2
100085dc:	04400316 	blt	zero,r17,100085ec <__sprint_r.part.0+0x78>
100085e0:	00001706 	br	10008640 <__sprint_r.part.0+0xcc>
100085e4:	84000104 	addi	r16,r16,4
100085e8:	8f001526 	beq	r17,fp,10008640 <__sprint_r.part.0+0xcc>
100085ec:	81400017 	ldw	r5,0(r16)
100085f0:	a009883a 	mov	r4,r20
100085f4:	980d883a 	mov	r6,r19
100085f8:	0009d6c0 	call	10009d6c <_fputwc_r>
100085fc:	e7000044 	addi	fp,fp,1
10008600:	14bff81e 	bne	r2,r18,100085e4 <__alt_data_end+0xf80085e4>
10008604:	9005883a 	mov	r2,r18
10008608:	a8000215 	stw	zero,8(r21)
1000860c:	a8000115 	stw	zero,4(r21)
10008610:	dfc00917 	ldw	ra,36(sp)
10008614:	df000817 	ldw	fp,32(sp)
10008618:	ddc00717 	ldw	r23,28(sp)
1000861c:	dd800617 	ldw	r22,24(sp)
10008620:	dd400517 	ldw	r21,20(sp)
10008624:	dd000417 	ldw	r20,16(sp)
10008628:	dcc00317 	ldw	r19,12(sp)
1000862c:	dc800217 	ldw	r18,8(sp)
10008630:	dc400117 	ldw	r17,4(sp)
10008634:	dc000017 	ldw	r16,0(sp)
10008638:	dec00a04 	addi	sp,sp,40
1000863c:	f800283a 	ret
10008640:	a8c00217 	ldw	r3,8(r21)
10008644:	8c63883a 	add	r17,r17,r17
10008648:	8c63883a 	add	r17,r17,r17
1000864c:	1c45c83a 	sub	r2,r3,r17
10008650:	a8800215 	stw	r2,8(r21)
10008654:	b5800204 	addi	r22,r22,8
10008658:	bdc00204 	addi	r23,r23,8
1000865c:	103fdb1e 	bne	r2,zero,100085cc <__alt_data_end+0xf80085cc>
10008660:	0005883a 	mov	r2,zero
10008664:	003fe806 	br	10008608 <__alt_data_end+0xf8008608>
10008668:	00059280 	call	10005928 <__sfvwrite_r>
1000866c:	003fe606 	br	10008608 <__alt_data_end+0xf8008608>

10008670 <__sprint_r>:
10008670:	30c00217 	ldw	r3,8(r6)
10008674:	18000126 	beq	r3,zero,1000867c <__sprint_r+0xc>
10008678:	00085741 	jmpi	10008574 <__sprint_r.part.0>
1000867c:	30000115 	stw	zero,4(r6)
10008680:	0005883a 	mov	r2,zero
10008684:	f800283a 	ret

10008688 <___vfiprintf_internal_r>:
10008688:	defeca04 	addi	sp,sp,-1240
1000868c:	dcc12f15 	stw	r19,1212(sp)
10008690:	dfc13515 	stw	ra,1236(sp)
10008694:	df013415 	stw	fp,1232(sp)
10008698:	ddc13315 	stw	r23,1228(sp)
1000869c:	dd813215 	stw	r22,1224(sp)
100086a0:	dd413115 	stw	r21,1220(sp)
100086a4:	dd013015 	stw	r20,1216(sp)
100086a8:	dc812e15 	stw	r18,1208(sp)
100086ac:	dc412d15 	stw	r17,1204(sp)
100086b0:	dc012c15 	stw	r16,1200(sp)
100086b4:	d9012115 	stw	r4,1156(sp)
100086b8:	d9412015 	stw	r5,1152(sp)
100086bc:	d9c12315 	stw	r7,1164(sp)
100086c0:	3027883a 	mov	r19,r6
100086c4:	20000226 	beq	r4,zero,100086d0 <___vfiprintf_internal_r+0x48>
100086c8:	20800e17 	ldw	r2,56(r4)
100086cc:	1000f726 	beq	r2,zero,10008aac <___vfiprintf_internal_r+0x424>
100086d0:	d8812017 	ldw	r2,1152(sp)
100086d4:	10c0030b 	ldhu	r3,12(r2)
100086d8:	1908000c 	andi	r4,r3,8192
100086dc:	1805883a 	mov	r2,r3
100086e0:	2000081e 	bne	r4,zero,10008704 <___vfiprintf_internal_r+0x7c>
100086e4:	d9412017 	ldw	r5,1152(sp)
100086e8:	18880014 	ori	r2,r3,8192
100086ec:	00f7ffc4 	movi	r3,-8193
100086f0:	29001917 	ldw	r4,100(r5)
100086f4:	2880030d 	sth	r2,12(r5)
100086f8:	20c8703a 	and	r4,r4,r3
100086fc:	29001915 	stw	r4,100(r5)
10008700:	1007883a 	mov	r3,r2
10008704:	1100020c 	andi	r4,r2,8
10008708:	2000a726 	beq	r4,zero,100089a8 <___vfiprintf_internal_r+0x320>
1000870c:	d9412017 	ldw	r5,1152(sp)
10008710:	29000417 	ldw	r4,16(r5)
10008714:	2000a426 	beq	r4,zero,100089a8 <___vfiprintf_internal_r+0x320>
10008718:	1080068c 	andi	r2,r2,26
1000871c:	01000284 	movi	r4,10
10008720:	1100ab26 	beq	r2,r4,100089d0 <___vfiprintf_internal_r+0x348>
10008724:	d9010a04 	addi	r4,sp,1064
10008728:	d94109c4 	addi	r5,sp,1063
1000872c:	07040074 	movhi	fp,4097
10008730:	04440074 	movhi	r17,4097
10008734:	2145c83a 	sub	r2,r4,r5
10008738:	e700d104 	addi	fp,fp,836
1000873c:	8c40cd04 	addi	r17,r17,820
10008740:	d9011e15 	stw	r4,1144(sp)
10008744:	d9411f15 	stw	r5,1148(sp)
10008748:	dec11a15 	stw	sp,1128(sp)
1000874c:	d8011c15 	stw	zero,1136(sp)
10008750:	d8011b15 	stw	zero,1132(sp)
10008754:	d8012715 	stw	zero,1180(sp)
10008758:	d8012515 	stw	zero,1172(sp)
1000875c:	d811883a 	mov	r8,sp
10008760:	d8812815 	stw	r2,1184(sp)
10008764:	982f883a 	mov	r23,r19
10008768:	b8800007 	ldb	r2,0(r23)
1000876c:	1003b026 	beq	r2,zero,10009630 <___vfiprintf_internal_r+0xfa8>
10008770:	01000944 	movi	r4,37
10008774:	1103ae26 	beq	r2,r4,10009630 <___vfiprintf_internal_r+0xfa8>
10008778:	b805883a 	mov	r2,r23
1000877c:	00000106 	br	10008784 <___vfiprintf_internal_r+0xfc>
10008780:	19000326 	beq	r3,r4,10008790 <___vfiprintf_internal_r+0x108>
10008784:	10800044 	addi	r2,r2,1
10008788:	10c00007 	ldb	r3,0(r2)
1000878c:	183ffc1e 	bne	r3,zero,10008780 <__alt_data_end+0xf8008780>
10008790:	15e1c83a 	sub	r16,r2,r23
10008794:	1029883a 	mov	r20,r2
10008798:	80001026 	beq	r16,zero,100087dc <___vfiprintf_internal_r+0x154>
1000879c:	d8c11c17 	ldw	r3,1136(sp)
100087a0:	d8811b17 	ldw	r2,1132(sp)
100087a4:	45c00015 	stw	r23,0(r8)
100087a8:	80c7883a 	add	r3,r16,r3
100087ac:	10800044 	addi	r2,r2,1
100087b0:	44000115 	stw	r16,4(r8)
100087b4:	d8c11c15 	stw	r3,1136(sp)
100087b8:	d8811b15 	stw	r2,1132(sp)
100087bc:	010001c4 	movi	r4,7
100087c0:	2080740e 	bge	r4,r2,10008994 <___vfiprintf_internal_r+0x30c>
100087c4:	1803a71e 	bne	r3,zero,10009664 <___vfiprintf_internal_r+0xfdc>
100087c8:	d8c12517 	ldw	r3,1172(sp)
100087cc:	d8011b15 	stw	zero,1132(sp)
100087d0:	d811883a 	mov	r8,sp
100087d4:	1c07883a 	add	r3,r3,r16
100087d8:	d8c12515 	stw	r3,1172(sp)
100087dc:	a0800007 	ldb	r2,0(r20)
100087e0:	1002bf26 	beq	r2,zero,100092e0 <___vfiprintf_internal_r+0xc58>
100087e4:	a5c00044 	addi	r23,r20,1
100087e8:	a1800047 	ldb	r6,1(r20)
100087ec:	d8011d85 	stb	zero,1142(sp)
100087f0:	d8012205 	stb	zero,1160(sp)
100087f4:	043fffc4 	movi	r16,-1
100087f8:	d8012415 	stw	zero,1168(sp)
100087fc:	0025883a 	mov	r18,zero
10008800:	05001604 	movi	r20,88
10008804:	05400244 	movi	r21,9
10008808:	4027883a 	mov	r19,r8
1000880c:	bdc00044 	addi	r23,r23,1
10008810:	30bff804 	addi	r2,r6,-32
10008814:	a0825636 	bltu	r20,r2,10009170 <___vfiprintf_internal_r+0xae8>
10008818:	100490ba 	slli	r2,r2,2
1000881c:	01040074 	movhi	r4,4097
10008820:	21220c04 	addi	r4,r4,-30672
10008824:	1105883a 	add	r2,r2,r4
10008828:	10800017 	ldw	r2,0(r2)
1000882c:	1000683a 	jmp	r2
10008830:	10009100 	call	11000910 <_gp+0xfe63a0>
10008834:	10009170 	cmpltui	zero,r2,581
10008838:	10009170 	cmpltui	zero,r2,581
1000883c:	10009164 	muli	zero,r2,581
10008840:	10009170 	cmpltui	zero,r2,581
10008844:	10009170 	cmpltui	zero,r2,581
10008848:	10009170 	cmpltui	zero,r2,581
1000884c:	10009170 	cmpltui	zero,r2,581
10008850:	10009170 	cmpltui	zero,r2,581
10008854:	10009170 	cmpltui	zero,r2,581
10008858:	10008ef0 	cmpltui	zero,r2,571
1000885c:	10009118 	cmpnei	zero,r2,580
10008860:	10009170 	cmpltui	zero,r2,581
10008864:	10008ac4 	addi	zero,r2,555
10008868:	10008f14 	ori	zero,r2,572
1000886c:	10009170 	cmpltui	zero,r2,581
10008870:	10008ad0 	cmplti	zero,r2,555
10008874:	10008adc 	xori	zero,r2,555
10008878:	10008adc 	xori	zero,r2,555
1000887c:	10008adc 	xori	zero,r2,555
10008880:	10008adc 	xori	zero,r2,555
10008884:	10008adc 	xori	zero,r2,555
10008888:	10008adc 	xori	zero,r2,555
1000888c:	10008adc 	xori	zero,r2,555
10008890:	10008adc 	xori	zero,r2,555
10008894:	10008adc 	xori	zero,r2,555
10008898:	10009170 	cmpltui	zero,r2,581
1000889c:	10009170 	cmpltui	zero,r2,581
100088a0:	10009170 	cmpltui	zero,r2,581
100088a4:	10009170 	cmpltui	zero,r2,581
100088a8:	10009170 	cmpltui	zero,r2,581
100088ac:	10009170 	cmpltui	zero,r2,581
100088b0:	10009170 	cmpltui	zero,r2,581
100088b4:	10009170 	cmpltui	zero,r2,581
100088b8:	10009170 	cmpltui	zero,r2,581
100088bc:	10009170 	cmpltui	zero,r2,581
100088c0:	10008b1c 	xori	zero,r2,556
100088c4:	10009170 	cmpltui	zero,r2,581
100088c8:	10009170 	cmpltui	zero,r2,581
100088cc:	10009170 	cmpltui	zero,r2,581
100088d0:	10009170 	cmpltui	zero,r2,581
100088d4:	10009170 	cmpltui	zero,r2,581
100088d8:	10009170 	cmpltui	zero,r2,581
100088dc:	10009170 	cmpltui	zero,r2,581
100088e0:	10009170 	cmpltui	zero,r2,581
100088e4:	10009170 	cmpltui	zero,r2,581
100088e8:	10009170 	cmpltui	zero,r2,581
100088ec:	10008e0c 	andi	zero,r2,568
100088f0:	10009170 	cmpltui	zero,r2,581
100088f4:	10009170 	cmpltui	zero,r2,581
100088f8:	10009170 	cmpltui	zero,r2,581
100088fc:	10009170 	cmpltui	zero,r2,581
10008900:	10009170 	cmpltui	zero,r2,581
10008904:	10008e4c 	andi	zero,r2,569
10008908:	10009170 	cmpltui	zero,r2,581
1000890c:	10009170 	cmpltui	zero,r2,581
10008910:	10008e90 	cmplti	zero,r2,570
10008914:	10009170 	cmpltui	zero,r2,581
10008918:	10009170 	cmpltui	zero,r2,581
1000891c:	10009170 	cmpltui	zero,r2,581
10008920:	10009170 	cmpltui	zero,r2,581
10008924:	10009170 	cmpltui	zero,r2,581
10008928:	10009170 	cmpltui	zero,r2,581
1000892c:	10009170 	cmpltui	zero,r2,581
10008930:	10009170 	cmpltui	zero,r2,581
10008934:	10009170 	cmpltui	zero,r2,581
10008938:	10009170 	cmpltui	zero,r2,581
1000893c:	10008dd8 	cmpnei	zero,r2,567
10008940:	10009128 	cmpgeui	zero,r2,580
10008944:	10009170 	cmpltui	zero,r2,581
10008948:	10009170 	cmpltui	zero,r2,581
1000894c:	10009170 	cmpltui	zero,r2,581
10008950:	10008f64 	muli	zero,r2,573
10008954:	10009128 	cmpgeui	zero,r2,580
10008958:	10009170 	cmpltui	zero,r2,581
1000895c:	10009170 	cmpltui	zero,r2,581
10008960:	10008e7c 	xorhi	zero,r2,569
10008964:	10009170 	cmpltui	zero,r2,581
10008968:	100090c8 	cmpgei	zero,r2,579
1000896c:	10009050 	cmplti	zero,r2,577
10008970:	10009084 	addi	zero,r2,578
10008974:	10008f70 	cmpltui	zero,r2,573
10008978:	10009170 	cmpltui	zero,r2,581
1000897c:	10008f7c 	xorhi	zero,r2,573
10008980:	10009170 	cmpltui	zero,r2,581
10008984:	10008fd8 	cmpnei	zero,r2,575
10008988:	10009170 	cmpltui	zero,r2,581
1000898c:	10009170 	cmpltui	zero,r2,581
10008990:	1000900c 	andi	zero,r2,576
10008994:	42000204 	addi	r8,r8,8
10008998:	d8c12517 	ldw	r3,1172(sp)
1000899c:	1c07883a 	add	r3,r3,r16
100089a0:	d8c12515 	stw	r3,1172(sp)
100089a4:	003f8d06 	br	100087dc <__alt_data_end+0xf80087dc>
100089a8:	d9012117 	ldw	r4,1156(sp)
100089ac:	d9412017 	ldw	r5,1152(sp)
100089b0:	00034880 	call	10003488 <__swsetup_r>
100089b4:	1000301e 	bne	r2,zero,10008a78 <___vfiprintf_internal_r+0x3f0>
100089b8:	d8812017 	ldw	r2,1152(sp)
100089bc:	01000284 	movi	r4,10
100089c0:	10c0030b 	ldhu	r3,12(r2)
100089c4:	1805883a 	mov	r2,r3
100089c8:	1080068c 	andi	r2,r2,26
100089cc:	113f551e 	bne	r2,r4,10008724 <__alt_data_end+0xf8008724>
100089d0:	d9012017 	ldw	r4,1152(sp)
100089d4:	2080038b 	ldhu	r2,14(r4)
100089d8:	113fffcc 	andi	r4,r2,65535
100089dc:	2120001c 	xori	r4,r4,32768
100089e0:	21200004 	addi	r4,r4,-32768
100089e4:	203f4f16 	blt	r4,zero,10008724 <__alt_data_end+0xf8008724>
100089e8:	d9412017 	ldw	r5,1152(sp)
100089ec:	d9012117 	ldw	r4,1156(sp)
100089f0:	d9c12317 	ldw	r7,1164(sp)
100089f4:	2b001917 	ldw	r12,100(r5)
100089f8:	2ac00717 	ldw	r11,28(r5)
100089fc:	2a800917 	ldw	r10,36(r5)
10008a00:	02010004 	movi	r8,1024
10008a04:	18ffff4c 	andi	r3,r3,65533
10008a08:	da0b883a 	add	r5,sp,r8
10008a0c:	980d883a 	mov	r6,r19
10008a10:	d8c1030d 	sth	r3,1036(sp)
10008a14:	db011915 	stw	r12,1124(sp)
10008a18:	d881038d 	sth	r2,1038(sp)
10008a1c:	dac10715 	stw	r11,1052(sp)
10008a20:	da810915 	stw	r10,1060(sp)
10008a24:	dec10015 	stw	sp,1024(sp)
10008a28:	dec10415 	stw	sp,1040(sp)
10008a2c:	da010215 	stw	r8,1032(sp)
10008a30:	da010515 	stw	r8,1044(sp)
10008a34:	d8010615 	stw	zero,1048(sp)
10008a38:	00086880 	call	10008688 <___vfiprintf_internal_r>
10008a3c:	1021883a 	mov	r16,r2
10008a40:	10000416 	blt	r2,zero,10008a54 <___vfiprintf_internal_r+0x3cc>
10008a44:	d9012117 	ldw	r4,1156(sp)
10008a48:	d9410004 	addi	r5,sp,1024
10008a4c:	0004f080 	call	10004f08 <_fflush_r>
10008a50:	10040f1e 	bne	r2,zero,10009a90 <___vfiprintf_internal_r+0x1408>
10008a54:	d881030b 	ldhu	r2,1036(sp)
10008a58:	1080100c 	andi	r2,r2,64
10008a5c:	10000426 	beq	r2,zero,10008a70 <___vfiprintf_internal_r+0x3e8>
10008a60:	d8c12017 	ldw	r3,1152(sp)
10008a64:	1880030b 	ldhu	r2,12(r3)
10008a68:	10801014 	ori	r2,r2,64
10008a6c:	1880030d 	sth	r2,12(r3)
10008a70:	8005883a 	mov	r2,r16
10008a74:	00000106 	br	10008a7c <___vfiprintf_internal_r+0x3f4>
10008a78:	00bfffc4 	movi	r2,-1
10008a7c:	dfc13517 	ldw	ra,1236(sp)
10008a80:	df013417 	ldw	fp,1232(sp)
10008a84:	ddc13317 	ldw	r23,1228(sp)
10008a88:	dd813217 	ldw	r22,1224(sp)
10008a8c:	dd413117 	ldw	r21,1220(sp)
10008a90:	dd013017 	ldw	r20,1216(sp)
10008a94:	dcc12f17 	ldw	r19,1212(sp)
10008a98:	dc812e17 	ldw	r18,1208(sp)
10008a9c:	dc412d17 	ldw	r17,1204(sp)
10008aa0:	dc012c17 	ldw	r16,1200(sp)
10008aa4:	dec13604 	addi	sp,sp,1240
10008aa8:	f800283a 	ret
10008aac:	00054c40 	call	100054c4 <__sinit>
10008ab0:	003f0706 	br	100086d0 <__alt_data_end+0xf80086d0>
10008ab4:	d8c12417 	ldw	r3,1168(sp)
10008ab8:	d8812315 	stw	r2,1164(sp)
10008abc:	00c7c83a 	sub	r3,zero,r3
10008ac0:	d8c12415 	stw	r3,1168(sp)
10008ac4:	94800114 	ori	r18,r18,4
10008ac8:	b9800007 	ldb	r6,0(r23)
10008acc:	003f4f06 	br	1000880c <__alt_data_end+0xf800880c>
10008ad0:	94802014 	ori	r18,r18,128
10008ad4:	b9800007 	ldb	r6,0(r23)
10008ad8:	003f4c06 	br	1000880c <__alt_data_end+0xf800880c>
10008adc:	dc012615 	stw	r16,1176(sp)
10008ae0:	d8012415 	stw	zero,1168(sp)
10008ae4:	35bff404 	addi	r22,r6,-48
10008ae8:	0009883a 	mov	r4,zero
10008aec:	b821883a 	mov	r16,r23
10008af0:	01400284 	movi	r5,10
10008af4:	000103c0 	call	1000103c <__mulsi3>
10008af8:	81800007 	ldb	r6,0(r16)
10008afc:	1589883a 	add	r4,r2,r22
10008b00:	bdc00044 	addi	r23,r23,1
10008b04:	35bff404 	addi	r22,r6,-48
10008b08:	b821883a 	mov	r16,r23
10008b0c:	adbff82e 	bgeu	r21,r22,10008af0 <__alt_data_end+0xf8008af0>
10008b10:	d9012415 	stw	r4,1168(sp)
10008b14:	dc012617 	ldw	r16,1176(sp)
10008b18:	003f3d06 	br	10008810 <__alt_data_end+0xf8008810>
10008b1c:	d8c12203 	ldbu	r3,1160(sp)
10008b20:	94800414 	ori	r18,r18,16
10008b24:	9080080c 	andi	r2,r18,32
10008b28:	d8c11d85 	stb	r3,1142(sp)
10008b2c:	9811883a 	mov	r8,r19
10008b30:	d8c12317 	ldw	r3,1164(sp)
10008b34:	10018226 	beq	r2,zero,10009140 <___vfiprintf_internal_r+0xab8>
10008b38:	d9012317 	ldw	r4,1164(sp)
10008b3c:	18800117 	ldw	r2,4(r3)
10008b40:	1cc00017 	ldw	r19,0(r3)
10008b44:	21000204 	addi	r4,r4,8
10008b48:	d9012315 	stw	r4,1164(sp)
10008b4c:	102b883a 	mov	r21,r2
10008b50:	10030016 	blt	r2,zero,10009754 <___vfiprintf_internal_r+0x10cc>
10008b54:	dd811d83 	ldbu	r22,1142(sp)
10008b58:	8029883a 	mov	r20,r16
10008b5c:	00800044 	movi	r2,1
10008b60:	9d46b03a 	or	r3,r19,r21
10008b64:	80000216 	blt	r16,zero,10008b70 <___vfiprintf_internal_r+0x4e8>
10008b68:	013fdfc4 	movi	r4,-129
10008b6c:	9124703a 	and	r18,r18,r4
10008b70:	1801b41e 	bne	r3,zero,10009244 <___vfiprintf_internal_r+0xbbc>
10008b74:	80028126 	beq	r16,zero,1000957c <___vfiprintf_internal_r+0xef4>
10008b78:	10803fcc 	andi	r2,r2,255
10008b7c:	00c00044 	movi	r3,1
10008b80:	10c1d126 	beq	r2,r3,100092c8 <___vfiprintf_internal_r+0xc40>
10008b84:	00c00084 	movi	r3,2
10008b88:	10c28626 	beq	r2,r3,100095a4 <___vfiprintf_internal_r+0xf1c>
10008b8c:	d8c10a04 	addi	r3,sp,1064
10008b90:	9808d0fa 	srli	r4,r19,3
10008b94:	a80a977a 	slli	r5,r21,29
10008b98:	a82ad0fa 	srli	r21,r21,3
10008b9c:	9cc001cc 	andi	r19,r19,7
10008ba0:	98800c04 	addi	r2,r19,48
10008ba4:	18ffffc4 	addi	r3,r3,-1
10008ba8:	2926b03a 	or	r19,r5,r4
10008bac:	18800005 	stb	r2,0(r3)
10008bb0:	9d48b03a 	or	r4,r19,r21
10008bb4:	203ff61e 	bne	r4,zero,10008b90 <__alt_data_end+0xf8008b90>
10008bb8:	9100004c 	andi	r4,r18,1
10008bbc:	d8c12215 	stw	r3,1160(sp)
10008bc0:	2002b31e 	bne	r4,zero,10009690 <___vfiprintf_internal_r+0x1008>
10008bc4:	d9411e17 	ldw	r5,1144(sp)
10008bc8:	28e9c83a 	sub	r20,r5,r3
10008bcc:	a02b883a 	mov	r21,r20
10008bd0:	a400010e 	bge	r20,r16,10008bd8 <___vfiprintf_internal_r+0x550>
10008bd4:	802b883a 	mov	r21,r16
10008bd8:	b5803fcc 	andi	r22,r22,255
10008bdc:	b580201c 	xori	r22,r22,128
10008be0:	b5bfe004 	addi	r22,r22,-128
10008be4:	b0000126 	beq	r22,zero,10008bec <___vfiprintf_internal_r+0x564>
10008be8:	ad400044 	addi	r21,r21,1
10008bec:	9280008c 	andi	r10,r18,2
10008bf0:	50000126 	beq	r10,zero,10008bf8 <___vfiprintf_internal_r+0x570>
10008bf4:	ad400084 	addi	r21,r21,2
10008bf8:	9580210c 	andi	r22,r18,132
10008bfc:	b001751e 	bne	r22,zero,100091d4 <___vfiprintf_internal_r+0xb4c>
10008c00:	d9012417 	ldw	r4,1168(sp)
10008c04:	2567c83a 	sub	r19,r4,r21
10008c08:	04c1720e 	bge	zero,r19,100091d4 <___vfiprintf_internal_r+0xb4c>
10008c0c:	01c00404 	movi	r7,16
10008c10:	d8c11c17 	ldw	r3,1136(sp)
10008c14:	3cc36b0e 	bge	r7,r19,100099c4 <___vfiprintf_internal_r+0x133c>
10008c18:	00840074 	movhi	r2,4097
10008c1c:	1080d104 	addi	r2,r2,836
10008c20:	dc012915 	stw	r16,1188(sp)
10008c24:	d9011b17 	ldw	r4,1132(sp)
10008c28:	9821883a 	mov	r16,r19
10008c2c:	d8812615 	stw	r2,1176(sp)
10008c30:	030001c4 	movi	r12,7
10008c34:	5027883a 	mov	r19,r10
10008c38:	00000506 	br	10008c50 <___vfiprintf_internal_r+0x5c8>
10008c3c:	21400084 	addi	r5,r4,2
10008c40:	42000204 	addi	r8,r8,8
10008c44:	1009883a 	mov	r4,r2
10008c48:	843ffc04 	addi	r16,r16,-16
10008c4c:	3c000d0e 	bge	r7,r16,10008c84 <___vfiprintf_internal_r+0x5fc>
10008c50:	18c00404 	addi	r3,r3,16
10008c54:	20800044 	addi	r2,r4,1
10008c58:	47000015 	stw	fp,0(r8)
10008c5c:	41c00115 	stw	r7,4(r8)
10008c60:	d8c11c15 	stw	r3,1136(sp)
10008c64:	d8811b15 	stw	r2,1132(sp)
10008c68:	60bff40e 	bge	r12,r2,10008c3c <__alt_data_end+0xf8008c3c>
10008c6c:	18014b1e 	bne	r3,zero,1000919c <___vfiprintf_internal_r+0xb14>
10008c70:	843ffc04 	addi	r16,r16,-16
10008c74:	0009883a 	mov	r4,zero
10008c78:	01400044 	movi	r5,1
10008c7c:	d811883a 	mov	r8,sp
10008c80:	3c3ff316 	blt	r7,r16,10008c50 <__alt_data_end+0xf8008c50>
10008c84:	9815883a 	mov	r10,r19
10008c88:	8027883a 	mov	r19,r16
10008c8c:	dc012917 	ldw	r16,1188(sp)
10008c90:	d9012617 	ldw	r4,1176(sp)
10008c94:	98c7883a 	add	r3,r19,r3
10008c98:	44c00115 	stw	r19,4(r8)
10008c9c:	41000015 	stw	r4,0(r8)
10008ca0:	d8c11c15 	stw	r3,1136(sp)
10008ca4:	d9411b15 	stw	r5,1132(sp)
10008ca8:	008001c4 	movi	r2,7
10008cac:	11425116 	blt	r2,r5,100095f4 <___vfiprintf_internal_r+0xf6c>
10008cb0:	d9011d87 	ldb	r4,1142(sp)
10008cb4:	42000204 	addi	r8,r8,8
10008cb8:	28800044 	addi	r2,r5,1
10008cbc:	20014a1e 	bne	r4,zero,100091e8 <___vfiprintf_internal_r+0xb60>
10008cc0:	50000c26 	beq	r10,zero,10008cf4 <___vfiprintf_internal_r+0x66c>
10008cc4:	d9011d04 	addi	r4,sp,1140
10008cc8:	18c00084 	addi	r3,r3,2
10008ccc:	41000015 	stw	r4,0(r8)
10008cd0:	01000084 	movi	r4,2
10008cd4:	41000115 	stw	r4,4(r8)
10008cd8:	d8c11c15 	stw	r3,1136(sp)
10008cdc:	d8811b15 	stw	r2,1132(sp)
10008ce0:	010001c4 	movi	r4,7
10008ce4:	20822016 	blt	r4,r2,10009568 <___vfiprintf_internal_r+0xee0>
10008ce8:	100b883a 	mov	r5,r2
10008cec:	42000204 	addi	r8,r8,8
10008cf0:	10800044 	addi	r2,r2,1
10008cf4:	01002004 	movi	r4,128
10008cf8:	b101de26 	beq	r22,r4,10009474 <___vfiprintf_internal_r+0xdec>
10008cfc:	8521c83a 	sub	r16,r16,r20
10008d00:	0400230e 	bge	zero,r16,10008d90 <___vfiprintf_internal_r+0x708>
10008d04:	04c00404 	movi	r19,16
10008d08:	9c030d0e 	bge	r19,r16,10009940 <___vfiprintf_internal_r+0x12b8>
10008d0c:	00840074 	movhi	r2,4097
10008d10:	1080cd04 	addi	r2,r2,820
10008d14:	d8812615 	stw	r2,1176(sp)
10008d18:	058001c4 	movi	r22,7
10008d1c:	00000506 	br	10008d34 <___vfiprintf_internal_r+0x6ac>
10008d20:	28800084 	addi	r2,r5,2
10008d24:	42000204 	addi	r8,r8,8
10008d28:	200b883a 	mov	r5,r4
10008d2c:	843ffc04 	addi	r16,r16,-16
10008d30:	9c000d0e 	bge	r19,r16,10008d68 <___vfiprintf_internal_r+0x6e0>
10008d34:	18c00404 	addi	r3,r3,16
10008d38:	29000044 	addi	r4,r5,1
10008d3c:	44400015 	stw	r17,0(r8)
10008d40:	44c00115 	stw	r19,4(r8)
10008d44:	d8c11c15 	stw	r3,1136(sp)
10008d48:	d9011b15 	stw	r4,1132(sp)
10008d4c:	b13ff40e 	bge	r22,r4,10008d20 <__alt_data_end+0xf8008d20>
10008d50:	1801321e 	bne	r3,zero,1000921c <___vfiprintf_internal_r+0xb94>
10008d54:	843ffc04 	addi	r16,r16,-16
10008d58:	000b883a 	mov	r5,zero
10008d5c:	00800044 	movi	r2,1
10008d60:	d811883a 	mov	r8,sp
10008d64:	9c3ff316 	blt	r19,r16,10008d34 <__alt_data_end+0xf8008d34>
10008d68:	d9012617 	ldw	r4,1176(sp)
10008d6c:	1c07883a 	add	r3,r3,r16
10008d70:	44000115 	stw	r16,4(r8)
10008d74:	41000015 	stw	r4,0(r8)
10008d78:	d8c11c15 	stw	r3,1136(sp)
10008d7c:	d8811b15 	stw	r2,1132(sp)
10008d80:	010001c4 	movi	r4,7
10008d84:	20816216 	blt	r4,r2,10009310 <___vfiprintf_internal_r+0xc88>
10008d88:	42000204 	addi	r8,r8,8
10008d8c:	10800044 	addi	r2,r2,1
10008d90:	d9012217 	ldw	r4,1160(sp)
10008d94:	1d07883a 	add	r3,r3,r20
10008d98:	45000115 	stw	r20,4(r8)
10008d9c:	41000015 	stw	r4,0(r8)
10008da0:	d8c11c15 	stw	r3,1136(sp)
10008da4:	d8811b15 	stw	r2,1132(sp)
10008da8:	010001c4 	movi	r4,7
10008dac:	2081610e 	bge	r4,r2,10009334 <___vfiprintf_internal_r+0xcac>
10008db0:	1802211e 	bne	r3,zero,10009638 <___vfiprintf_internal_r+0xfb0>
10008db4:	d8011b15 	stw	zero,1132(sp)
10008db8:	9480010c 	andi	r18,r18,4
10008dbc:	9002171e 	bne	r18,zero,1000961c <___vfiprintf_internal_r+0xf94>
10008dc0:	d9412417 	ldw	r5,1168(sp)
10008dc4:	a9433716 	blt	r21,r5,10009aa4 <___vfiprintf_internal_r+0x141c>
10008dc8:	d8812517 	ldw	r2,1172(sp)
10008dcc:	1545883a 	add	r2,r2,r21
10008dd0:	d8812515 	stw	r2,1172(sp)
10008dd4:	00019a06 	br	10009440 <___vfiprintf_internal_r+0xdb8>
10008dd8:	d8c12317 	ldw	r3,1164(sp)
10008ddc:	05400044 	movi	r21,1
10008de0:	9811883a 	mov	r8,r19
10008de4:	18800017 	ldw	r2,0(r3)
10008de8:	18c00104 	addi	r3,r3,4
10008dec:	d8c12315 	stw	r3,1164(sp)
10008df0:	d8c10004 	addi	r3,sp,1024
10008df4:	d8011d85 	stb	zero,1142(sp)
10008df8:	d8810005 	stb	r2,1024(sp)
10008dfc:	a829883a 	mov	r20,r21
10008e00:	d8c12215 	stw	r3,1160(sp)
10008e04:	0021883a 	mov	r16,zero
10008e08:	003f7806 	br	10008bec <__alt_data_end+0xf8008bec>
10008e0c:	94800414 	ori	r18,r18,16
10008e10:	9080080c 	andi	r2,r18,32
10008e14:	9811883a 	mov	r8,r19
10008e18:	10009026 	beq	r2,zero,1000905c <___vfiprintf_internal_r+0x9d4>
10008e1c:	d8812317 	ldw	r2,1164(sp)
10008e20:	d8c12317 	ldw	r3,1164(sp)
10008e24:	14c00017 	ldw	r19,0(r2)
10008e28:	15400117 	ldw	r21,4(r2)
10008e2c:	18c00204 	addi	r3,r3,8
10008e30:	d8c12315 	stw	r3,1164(sp)
10008e34:	0005883a 	mov	r2,zero
10008e38:	9d46b03a 	or	r3,r19,r21
10008e3c:	d8011d85 	stb	zero,1142(sp)
10008e40:	8029883a 	mov	r20,r16
10008e44:	002d883a 	mov	r22,zero
10008e48:	003f4606 	br	10008b64 <__alt_data_end+0xf8008b64>
10008e4c:	94800414 	ori	r18,r18,16
10008e50:	9080080c 	andi	r2,r18,32
10008e54:	9811883a 	mov	r8,r19
10008e58:	10006226 	beq	r2,zero,10008fe4 <___vfiprintf_internal_r+0x95c>
10008e5c:	d9012317 	ldw	r4,1164(sp)
10008e60:	00800044 	movi	r2,1
10008e64:	24c00017 	ldw	r19,0(r4)
10008e68:	25400117 	ldw	r21,4(r4)
10008e6c:	21000204 	addi	r4,r4,8
10008e70:	d9012315 	stw	r4,1164(sp)
10008e74:	9d46b03a 	or	r3,r19,r21
10008e78:	003ff006 	br	10008e3c <__alt_data_end+0xf8008e3c>
10008e7c:	b9800007 	ldb	r6,0(r23)
10008e80:	00801b04 	movi	r2,108
10008e84:	3082b226 	beq	r6,r2,10009950 <___vfiprintf_internal_r+0x12c8>
10008e88:	94800414 	ori	r18,r18,16
10008e8c:	003e5f06 	br	1000880c <__alt_data_end+0xf800880c>
10008e90:	d8c12203 	ldbu	r3,1160(sp)
10008e94:	01040074 	movhi	r4,4097
10008e98:	21006704 	addi	r4,r4,412
10008e9c:	d8c11d85 	stb	r3,1142(sp)
10008ea0:	d9012715 	stw	r4,1180(sp)
10008ea4:	90c0080c 	andi	r3,r18,32
10008ea8:	9811883a 	mov	r8,r19
10008eac:	d8812317 	ldw	r2,1164(sp)
10008eb0:	18005f26 	beq	r3,zero,10009030 <___vfiprintf_internal_r+0x9a8>
10008eb4:	d9012317 	ldw	r4,1164(sp)
10008eb8:	14c00017 	ldw	r19,0(r2)
10008ebc:	15400117 	ldw	r21,4(r2)
10008ec0:	21000204 	addi	r4,r4,8
10008ec4:	d9012315 	stw	r4,1164(sp)
10008ec8:	9080004c 	andi	r2,r18,1
10008ecc:	1001e226 	beq	r2,zero,10009658 <___vfiprintf_internal_r+0xfd0>
10008ed0:	9d46b03a 	or	r3,r19,r21
10008ed4:	18024e26 	beq	r3,zero,10009810 <___vfiprintf_internal_r+0x1188>
10008ed8:	00800c04 	movi	r2,48
10008edc:	d8811d05 	stb	r2,1140(sp)
10008ee0:	d9811d45 	stb	r6,1141(sp)
10008ee4:	94800094 	ori	r18,r18,2
10008ee8:	00800084 	movi	r2,2
10008eec:	003fd306 	br	10008e3c <__alt_data_end+0xf8008e3c>
10008ef0:	d9012317 	ldw	r4,1164(sp)
10008ef4:	d9412317 	ldw	r5,1164(sp)
10008ef8:	21000017 	ldw	r4,0(r4)
10008efc:	28800104 	addi	r2,r5,4
10008f00:	d9012415 	stw	r4,1168(sp)
10008f04:	203eeb16 	blt	r4,zero,10008ab4 <__alt_data_end+0xf8008ab4>
10008f08:	d8812315 	stw	r2,1164(sp)
10008f0c:	b9800007 	ldb	r6,0(r23)
10008f10:	003e3e06 	br	1000880c <__alt_data_end+0xf800880c>
10008f14:	b9800007 	ldb	r6,0(r23)
10008f18:	01000a84 	movi	r4,42
10008f1c:	b8800044 	addi	r2,r23,1
10008f20:	3102d226 	beq	r6,r4,10009a6c <___vfiprintf_internal_r+0x13e4>
10008f24:	35bff404 	addi	r22,r6,-48
10008f28:	102f883a 	mov	r23,r2
10008f2c:	0021883a 	mov	r16,zero
10008f30:	adbe3736 	bltu	r21,r22,10008810 <__alt_data_end+0xf8008810>
10008f34:	0009883a 	mov	r4,zero
10008f38:	01400284 	movi	r5,10
10008f3c:	000103c0 	call	1000103c <__mulsi3>
10008f40:	b9800007 	ldb	r6,0(r23)
10008f44:	b089883a 	add	r4,r22,r2
10008f48:	bdc00044 	addi	r23,r23,1
10008f4c:	35bff404 	addi	r22,r6,-48
10008f50:	adbff92e 	bgeu	r21,r22,10008f38 <__alt_data_end+0xf8008f38>
10008f54:	2021883a 	mov	r16,r4
10008f58:	203e2d0e 	bge	r4,zero,10008810 <__alt_data_end+0xf8008810>
10008f5c:	043fffc4 	movi	r16,-1
10008f60:	003e2b06 	br	10008810 <__alt_data_end+0xf8008810>
10008f64:	94801014 	ori	r18,r18,64
10008f68:	b9800007 	ldb	r6,0(r23)
10008f6c:	003e2706 	br	1000880c <__alt_data_end+0xf800880c>
10008f70:	94800814 	ori	r18,r18,32
10008f74:	b9800007 	ldb	r6,0(r23)
10008f78:	003e2406 	br	1000880c <__alt_data_end+0xf800880c>
10008f7c:	d9412317 	ldw	r5,1164(sp)
10008f80:	d8812317 	ldw	r2,1164(sp)
10008f84:	d8011d85 	stb	zero,1142(sp)
10008f88:	29400017 	ldw	r5,0(r5)
10008f8c:	9811883a 	mov	r8,r19
10008f90:	14c00104 	addi	r19,r2,4
10008f94:	d9412215 	stw	r5,1160(sp)
10008f98:	28029026 	beq	r5,zero,100099dc <___vfiprintf_internal_r+0x1354>
10008f9c:	d9012217 	ldw	r4,1160(sp)
10008fa0:	80027616 	blt	r16,zero,1000997c <___vfiprintf_internal_r+0x12f4>
10008fa4:	000b883a 	mov	r5,zero
10008fa8:	800d883a 	mov	r6,r16
10008fac:	da012a15 	stw	r8,1192(sp)
10008fb0:	000697c0 	call	1000697c <memchr>
10008fb4:	da012a17 	ldw	r8,1192(sp)
10008fb8:	1002a026 	beq	r2,zero,10009a3c <___vfiprintf_internal_r+0x13b4>
10008fbc:	d8c12217 	ldw	r3,1160(sp)
10008fc0:	10e9c83a 	sub	r20,r2,r3
10008fc4:	85023816 	blt	r16,r20,100098a8 <___vfiprintf_internal_r+0x1220>
10008fc8:	dd811d83 	ldbu	r22,1142(sp)
10008fcc:	dcc12315 	stw	r19,1164(sp)
10008fd0:	0021883a 	mov	r16,zero
10008fd4:	003efd06 	br	10008bcc <__alt_data_end+0xf8008bcc>
10008fd8:	9080080c 	andi	r2,r18,32
10008fdc:	9811883a 	mov	r8,r19
10008fe0:	103f9e1e 	bne	r2,zero,10008e5c <__alt_data_end+0xf8008e5c>
10008fe4:	9080040c 	andi	r2,r18,16
10008fe8:	10021726 	beq	r2,zero,10009848 <___vfiprintf_internal_r+0x11c0>
10008fec:	d9412317 	ldw	r5,1164(sp)
10008ff0:	002b883a 	mov	r21,zero
10008ff4:	00800044 	movi	r2,1
10008ff8:	2cc00017 	ldw	r19,0(r5)
10008ffc:	29400104 	addi	r5,r5,4
10009000:	d9412315 	stw	r5,1164(sp)
10009004:	9807883a 	mov	r3,r19
10009008:	003f8c06 	br	10008e3c <__alt_data_end+0xf8008e3c>
1000900c:	d8c12203 	ldbu	r3,1160(sp)
10009010:	01040074 	movhi	r4,4097
10009014:	21006c04 	addi	r4,r4,432
10009018:	d8c11d85 	stb	r3,1142(sp)
1000901c:	d9012715 	stw	r4,1180(sp)
10009020:	90c0080c 	andi	r3,r18,32
10009024:	9811883a 	mov	r8,r19
10009028:	d8812317 	ldw	r2,1164(sp)
1000902c:	183fa11e 	bne	r3,zero,10008eb4 <__alt_data_end+0xf8008eb4>
10009030:	90c0040c 	andi	r3,r18,16
10009034:	1801e526 	beq	r3,zero,100097cc <___vfiprintf_internal_r+0x1144>
10009038:	d9412317 	ldw	r5,1164(sp)
1000903c:	14c00017 	ldw	r19,0(r2)
10009040:	002b883a 	mov	r21,zero
10009044:	29400104 	addi	r5,r5,4
10009048:	d9412315 	stw	r5,1164(sp)
1000904c:	003f9e06 	br	10008ec8 <__alt_data_end+0xf8008ec8>
10009050:	9080080c 	andi	r2,r18,32
10009054:	9811883a 	mov	r8,r19
10009058:	103f701e 	bne	r2,zero,10008e1c <__alt_data_end+0xf8008e1c>
1000905c:	9080040c 	andi	r2,r18,16
10009060:	1001ef26 	beq	r2,zero,10009820 <___vfiprintf_internal_r+0x1198>
10009064:	d9012317 	ldw	r4,1164(sp)
10009068:	002b883a 	mov	r21,zero
1000906c:	0005883a 	mov	r2,zero
10009070:	24c00017 	ldw	r19,0(r4)
10009074:	21000104 	addi	r4,r4,4
10009078:	d9012315 	stw	r4,1164(sp)
1000907c:	9807883a 	mov	r3,r19
10009080:	003f6e06 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009084:	d8c12317 	ldw	r3,1164(sp)
10009088:	9811883a 	mov	r8,r19
1000908c:	00800c04 	movi	r2,48
10009090:	1cc00017 	ldw	r19,0(r3)
10009094:	01040074 	movhi	r4,4097
10009098:	18c00104 	addi	r3,r3,4
1000909c:	d8811d05 	stb	r2,1140(sp)
100090a0:	21006c04 	addi	r4,r4,432
100090a4:	00801e04 	movi	r2,120
100090a8:	d8811d45 	stb	r2,1141(sp)
100090ac:	d8c12315 	stw	r3,1164(sp)
100090b0:	002b883a 	mov	r21,zero
100090b4:	94800094 	ori	r18,r18,2
100090b8:	d9012715 	stw	r4,1180(sp)
100090bc:	00800084 	movi	r2,2
100090c0:	9807883a 	mov	r3,r19
100090c4:	003f5d06 	br	10008e3c <__alt_data_end+0xf8008e3c>
100090c8:	d8c12203 	ldbu	r3,1160(sp)
100090cc:	9080080c 	andi	r2,r18,32
100090d0:	9811883a 	mov	r8,r19
100090d4:	d8c11d85 	stb	r3,1142(sp)
100090d8:	1001b126 	beq	r2,zero,100097a0 <___vfiprintf_internal_r+0x1118>
100090dc:	d9012317 	ldw	r4,1164(sp)
100090e0:	d9412517 	ldw	r5,1172(sp)
100090e4:	20800017 	ldw	r2,0(r4)
100090e8:	2807d7fa 	srai	r3,r5,31
100090ec:	21000104 	addi	r4,r4,4
100090f0:	d9012315 	stw	r4,1164(sp)
100090f4:	11400015 	stw	r5,0(r2)
100090f8:	10c00115 	stw	r3,4(r2)
100090fc:	003d9a06 	br	10008768 <__alt_data_end+0xf8008768>
10009100:	d8812207 	ldb	r2,1160(sp)
10009104:	1001c41e 	bne	r2,zero,10009818 <___vfiprintf_internal_r+0x1190>
10009108:	00c00804 	movi	r3,32
1000910c:	d8c12205 	stb	r3,1160(sp)
10009110:	b9800007 	ldb	r6,0(r23)
10009114:	003dbd06 	br	1000880c <__alt_data_end+0xf800880c>
10009118:	00c00ac4 	movi	r3,43
1000911c:	d8c12205 	stb	r3,1160(sp)
10009120:	b9800007 	ldb	r6,0(r23)
10009124:	003db906 	br	1000880c <__alt_data_end+0xf800880c>
10009128:	d8c12203 	ldbu	r3,1160(sp)
1000912c:	9080080c 	andi	r2,r18,32
10009130:	9811883a 	mov	r8,r19
10009134:	d8c11d85 	stb	r3,1142(sp)
10009138:	d8c12317 	ldw	r3,1164(sp)
1000913c:	103e7e1e 	bne	r2,zero,10008b38 <__alt_data_end+0xf8008b38>
10009140:	9080040c 	andi	r2,r18,16
10009144:	1001a926 	beq	r2,zero,100097ec <___vfiprintf_internal_r+0x1164>
10009148:	1cc00017 	ldw	r19,0(r3)
1000914c:	d9412317 	ldw	r5,1164(sp)
10009150:	982bd7fa 	srai	r21,r19,31
10009154:	29400104 	addi	r5,r5,4
10009158:	d9412315 	stw	r5,1164(sp)
1000915c:	a805883a 	mov	r2,r21
10009160:	003e7b06 	br	10008b50 <__alt_data_end+0xf8008b50>
10009164:	94800054 	ori	r18,r18,1
10009168:	b9800007 	ldb	r6,0(r23)
1000916c:	003da706 	br	1000880c <__alt_data_end+0xf800880c>
10009170:	d8c12203 	ldbu	r3,1160(sp)
10009174:	9811883a 	mov	r8,r19
10009178:	d8c11d85 	stb	r3,1142(sp)
1000917c:	30005826 	beq	r6,zero,100092e0 <___vfiprintf_internal_r+0xc58>
10009180:	05400044 	movi	r21,1
10009184:	d8c10004 	addi	r3,sp,1024
10009188:	d9810005 	stb	r6,1024(sp)
1000918c:	d8011d85 	stb	zero,1142(sp)
10009190:	a829883a 	mov	r20,r21
10009194:	d8c12215 	stw	r3,1160(sp)
10009198:	003f1a06 	br	10008e04 <__alt_data_end+0xf8008e04>
1000919c:	d9012117 	ldw	r4,1156(sp)
100091a0:	d9412017 	ldw	r5,1152(sp)
100091a4:	d9811a04 	addi	r6,sp,1128
100091a8:	d9c12a15 	stw	r7,1192(sp)
100091ac:	db012b15 	stw	r12,1196(sp)
100091b0:	00085740 	call	10008574 <__sprint_r.part.0>
100091b4:	d9c12a17 	ldw	r7,1192(sp)
100091b8:	db012b17 	ldw	r12,1196(sp)
100091bc:	10004e1e 	bne	r2,zero,100092f8 <___vfiprintf_internal_r+0xc70>
100091c0:	d9011b17 	ldw	r4,1132(sp)
100091c4:	d8c11c17 	ldw	r3,1136(sp)
100091c8:	d811883a 	mov	r8,sp
100091cc:	21400044 	addi	r5,r4,1
100091d0:	003e9d06 	br	10008c48 <__alt_data_end+0xf8008c48>
100091d4:	d9411b17 	ldw	r5,1132(sp)
100091d8:	d8c11c17 	ldw	r3,1136(sp)
100091dc:	28800044 	addi	r2,r5,1
100091e0:	d9011d87 	ldb	r4,1142(sp)
100091e4:	203eb626 	beq	r4,zero,10008cc0 <__alt_data_end+0xf8008cc0>
100091e8:	01000044 	movi	r4,1
100091ec:	d9411d84 	addi	r5,sp,1142
100091f0:	1907883a 	add	r3,r3,r4
100091f4:	41400015 	stw	r5,0(r8)
100091f8:	41000115 	stw	r4,4(r8)
100091fc:	d8c11c15 	stw	r3,1136(sp)
10009200:	d8811b15 	stw	r2,1132(sp)
10009204:	014001c4 	movi	r5,7
10009208:	2880ce16 	blt	r5,r2,10009544 <___vfiprintf_internal_r+0xebc>
1000920c:	100b883a 	mov	r5,r2
10009210:	42000204 	addi	r8,r8,8
10009214:	10800044 	addi	r2,r2,1
10009218:	003ea906 	br	10008cc0 <__alt_data_end+0xf8008cc0>
1000921c:	d9012117 	ldw	r4,1156(sp)
10009220:	d9412017 	ldw	r5,1152(sp)
10009224:	d9811a04 	addi	r6,sp,1128
10009228:	00085740 	call	10008574 <__sprint_r.part.0>
1000922c:	1000321e 	bne	r2,zero,100092f8 <___vfiprintf_internal_r+0xc70>
10009230:	d9411b17 	ldw	r5,1132(sp)
10009234:	d8c11c17 	ldw	r3,1136(sp)
10009238:	d811883a 	mov	r8,sp
1000923c:	28800044 	addi	r2,r5,1
10009240:	003eba06 	br	10008d2c <__alt_data_end+0xf8008d2c>
10009244:	10803fcc 	andi	r2,r2,255
10009248:	00c00044 	movi	r3,1
1000924c:	10fe4d1e 	bne	r2,r3,10008b84 <__alt_data_end+0xf8008b84>
10009250:	a800021e 	bne	r21,zero,1000925c <___vfiprintf_internal_r+0xbd4>
10009254:	00800244 	movi	r2,9
10009258:	14c01b2e 	bgeu	r2,r19,100092c8 <___vfiprintf_internal_r+0xc40>
1000925c:	dc012215 	stw	r16,1160(sp)
10009260:	dd010a04 	addi	r20,sp,1064
10009264:	a821883a 	mov	r16,r21
10009268:	402b883a 	mov	r21,r8
1000926c:	9809883a 	mov	r4,r19
10009270:	800b883a 	mov	r5,r16
10009274:	01800284 	movi	r6,10
10009278:	000f883a 	mov	r7,zero
1000927c:	000aa5c0 	call	1000aa5c <__umoddi3>
10009280:	10800c04 	addi	r2,r2,48
10009284:	a53fffc4 	addi	r20,r20,-1
10009288:	9809883a 	mov	r4,r19
1000928c:	800b883a 	mov	r5,r16
10009290:	01800284 	movi	r6,10
10009294:	000f883a 	mov	r7,zero
10009298:	a0800005 	stb	r2,0(r20)
1000929c:	000a41c0 	call	1000a41c <__udivdi3>
100092a0:	1027883a 	mov	r19,r2
100092a4:	10c4b03a 	or	r2,r2,r3
100092a8:	1821883a 	mov	r16,r3
100092ac:	103fef1e 	bne	r2,zero,1000926c <__alt_data_end+0xf800926c>
100092b0:	d9011e17 	ldw	r4,1144(sp)
100092b4:	dc012217 	ldw	r16,1160(sp)
100092b8:	a811883a 	mov	r8,r21
100092bc:	dd012215 	stw	r20,1160(sp)
100092c0:	2529c83a 	sub	r20,r4,r20
100092c4:	003e4106 	br	10008bcc <__alt_data_end+0xf8008bcc>
100092c8:	9cc00c04 	addi	r19,r19,48
100092cc:	d8c109c4 	addi	r3,sp,1063
100092d0:	dcc109c5 	stb	r19,1063(sp)
100092d4:	dd012817 	ldw	r20,1184(sp)
100092d8:	d8c12215 	stw	r3,1160(sp)
100092dc:	003e3b06 	br	10008bcc <__alt_data_end+0xf8008bcc>
100092e0:	d8811c17 	ldw	r2,1136(sp)
100092e4:	10000426 	beq	r2,zero,100092f8 <___vfiprintf_internal_r+0xc70>
100092e8:	d9012117 	ldw	r4,1156(sp)
100092ec:	d9412017 	ldw	r5,1152(sp)
100092f0:	d9811a04 	addi	r6,sp,1128
100092f4:	00085740 	call	10008574 <__sprint_r.part.0>
100092f8:	d9412017 	ldw	r5,1152(sp)
100092fc:	2880030b 	ldhu	r2,12(r5)
10009300:	1080100c 	andi	r2,r2,64
10009304:	103ddc1e 	bne	r2,zero,10008a78 <__alt_data_end+0xf8008a78>
10009308:	d8812517 	ldw	r2,1172(sp)
1000930c:	003ddb06 	br	10008a7c <__alt_data_end+0xf8008a7c>
10009310:	1801061e 	bne	r3,zero,1000972c <___vfiprintf_internal_r+0x10a4>
10009314:	d8c12217 	ldw	r3,1160(sp)
10009318:	00800044 	movi	r2,1
1000931c:	dd000115 	stw	r20,4(sp)
10009320:	d8c00015 	stw	r3,0(sp)
10009324:	dd011c15 	stw	r20,1136(sp)
10009328:	d8811b15 	stw	r2,1132(sp)
1000932c:	a007883a 	mov	r3,r20
10009330:	d811883a 	mov	r8,sp
10009334:	42000204 	addi	r8,r8,8
10009338:	9480010c 	andi	r18,r18,4
1000933c:	90003426 	beq	r18,zero,10009410 <___vfiprintf_internal_r+0xd88>
10009340:	d9412417 	ldw	r5,1168(sp)
10009344:	2d65c83a 	sub	r18,r5,r21
10009348:	0480310e 	bge	zero,r18,10009410 <___vfiprintf_internal_r+0xd88>
1000934c:	04000404 	movi	r16,16
10009350:	8481ad0e 	bge	r16,r18,10009a08 <___vfiprintf_internal_r+0x1380>
10009354:	01440074 	movhi	r5,4097
10009358:	2940d104 	addi	r5,r5,836
1000935c:	d9011b17 	ldw	r4,1132(sp)
10009360:	d9412615 	stw	r5,1176(sp)
10009364:	04c001c4 	movi	r19,7
10009368:	dd012117 	ldw	r20,1156(sp)
1000936c:	dd812017 	ldw	r22,1152(sp)
10009370:	00000506 	br	10009388 <___vfiprintf_internal_r+0xd00>
10009374:	21400084 	addi	r5,r4,2
10009378:	42000204 	addi	r8,r8,8
1000937c:	1009883a 	mov	r4,r2
10009380:	94bffc04 	addi	r18,r18,-16
10009384:	84800d0e 	bge	r16,r18,100093bc <___vfiprintf_internal_r+0xd34>
10009388:	18c00404 	addi	r3,r3,16
1000938c:	20800044 	addi	r2,r4,1
10009390:	47000015 	stw	fp,0(r8)
10009394:	44000115 	stw	r16,4(r8)
10009398:	d8c11c15 	stw	r3,1136(sp)
1000939c:	d8811b15 	stw	r2,1132(sp)
100093a0:	98bff40e 	bge	r19,r2,10009374 <__alt_data_end+0xf8009374>
100093a4:	1800291e 	bne	r3,zero,1000944c <___vfiprintf_internal_r+0xdc4>
100093a8:	94bffc04 	addi	r18,r18,-16
100093ac:	0009883a 	mov	r4,zero
100093b0:	01400044 	movi	r5,1
100093b4:	d811883a 	mov	r8,sp
100093b8:	84bff316 	blt	r16,r18,10009388 <__alt_data_end+0xf8009388>
100093bc:	d8812617 	ldw	r2,1176(sp)
100093c0:	1c87883a 	add	r3,r3,r18
100093c4:	44800115 	stw	r18,4(r8)
100093c8:	40800015 	stw	r2,0(r8)
100093cc:	d8c11c15 	stw	r3,1136(sp)
100093d0:	d9411b15 	stw	r5,1132(sp)
100093d4:	008001c4 	movi	r2,7
100093d8:	11400d0e 	bge	r2,r5,10009410 <___vfiprintf_internal_r+0xd88>
100093dc:	1800061e 	bne	r3,zero,100093f8 <___vfiprintf_internal_r+0xd70>
100093e0:	d8c12417 	ldw	r3,1168(sp)
100093e4:	a8c12e16 	blt	r21,r3,100098a0 <___vfiprintf_internal_r+0x1218>
100093e8:	d9012517 	ldw	r4,1172(sp)
100093ec:	2549883a 	add	r4,r4,r21
100093f0:	d9012515 	stw	r4,1172(sp)
100093f4:	00001206 	br	10009440 <___vfiprintf_internal_r+0xdb8>
100093f8:	d9012117 	ldw	r4,1156(sp)
100093fc:	d9412017 	ldw	r5,1152(sp)
10009400:	d9811a04 	addi	r6,sp,1128
10009404:	00085740 	call	10008574 <__sprint_r.part.0>
10009408:	103fbb1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
1000940c:	d8c11c17 	ldw	r3,1136(sp)
10009410:	d8812417 	ldw	r2,1168(sp)
10009414:	a880010e 	bge	r21,r2,1000941c <___vfiprintf_internal_r+0xd94>
10009418:	102b883a 	mov	r21,r2
1000941c:	d9012517 	ldw	r4,1172(sp)
10009420:	2549883a 	add	r4,r4,r21
10009424:	d9012515 	stw	r4,1172(sp)
10009428:	18000526 	beq	r3,zero,10009440 <___vfiprintf_internal_r+0xdb8>
1000942c:	d9012117 	ldw	r4,1156(sp)
10009430:	d9412017 	ldw	r5,1152(sp)
10009434:	d9811a04 	addi	r6,sp,1128
10009438:	00085740 	call	10008574 <__sprint_r.part.0>
1000943c:	103fae1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009440:	d8011b15 	stw	zero,1132(sp)
10009444:	d811883a 	mov	r8,sp
10009448:	003cc706 	br	10008768 <__alt_data_end+0xf8008768>
1000944c:	a009883a 	mov	r4,r20
10009450:	b00b883a 	mov	r5,r22
10009454:	d9811a04 	addi	r6,sp,1128
10009458:	00085740 	call	10008574 <__sprint_r.part.0>
1000945c:	103fa61e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009460:	d9011b17 	ldw	r4,1132(sp)
10009464:	d8c11c17 	ldw	r3,1136(sp)
10009468:	d811883a 	mov	r8,sp
1000946c:	21400044 	addi	r5,r4,1
10009470:	003fc306 	br	10009380 <__alt_data_end+0xf8009380>
10009474:	d9012417 	ldw	r4,1168(sp)
10009478:	256dc83a 	sub	r22,r4,r21
1000947c:	05be1f0e 	bge	zero,r22,10008cfc <__alt_data_end+0xf8008cfc>
10009480:	04c00404 	movi	r19,16
10009484:	9d81720e 	bge	r19,r22,10009a50 <___vfiprintf_internal_r+0x13c8>
10009488:	00840074 	movhi	r2,4097
1000948c:	1080cd04 	addi	r2,r2,820
10009490:	d8812615 	stw	r2,1176(sp)
10009494:	028001c4 	movi	r10,7
10009498:	00000506 	br	100094b0 <___vfiprintf_internal_r+0xe28>
1000949c:	29000084 	addi	r4,r5,2
100094a0:	42000204 	addi	r8,r8,8
100094a4:	100b883a 	mov	r5,r2
100094a8:	b5bffc04 	addi	r22,r22,-16
100094ac:	9d800d0e 	bge	r19,r22,100094e4 <___vfiprintf_internal_r+0xe5c>
100094b0:	18c00404 	addi	r3,r3,16
100094b4:	28800044 	addi	r2,r5,1
100094b8:	44400015 	stw	r17,0(r8)
100094bc:	44c00115 	stw	r19,4(r8)
100094c0:	d8c11c15 	stw	r3,1136(sp)
100094c4:	d8811b15 	stw	r2,1132(sp)
100094c8:	50bff40e 	bge	r10,r2,1000949c <__alt_data_end+0xf800949c>
100094cc:	1800111e 	bne	r3,zero,10009514 <___vfiprintf_internal_r+0xe8c>
100094d0:	b5bffc04 	addi	r22,r22,-16
100094d4:	000b883a 	mov	r5,zero
100094d8:	01000044 	movi	r4,1
100094dc:	d811883a 	mov	r8,sp
100094e0:	9dbff316 	blt	r19,r22,100094b0 <__alt_data_end+0xf80094b0>
100094e4:	d9412617 	ldw	r5,1176(sp)
100094e8:	1d87883a 	add	r3,r3,r22
100094ec:	45800115 	stw	r22,4(r8)
100094f0:	41400015 	stw	r5,0(r8)
100094f4:	d8c11c15 	stw	r3,1136(sp)
100094f8:	d9011b15 	stw	r4,1132(sp)
100094fc:	008001c4 	movi	r2,7
10009500:	11008516 	blt	r2,r4,10009718 <___vfiprintf_internal_r+0x1090>
10009504:	42000204 	addi	r8,r8,8
10009508:	20800044 	addi	r2,r4,1
1000950c:	200b883a 	mov	r5,r4
10009510:	003dfa06 	br	10008cfc <__alt_data_end+0xf8008cfc>
10009514:	d9012117 	ldw	r4,1156(sp)
10009518:	d9412017 	ldw	r5,1152(sp)
1000951c:	d9811a04 	addi	r6,sp,1128
10009520:	da812a15 	stw	r10,1192(sp)
10009524:	00085740 	call	10008574 <__sprint_r.part.0>
10009528:	da812a17 	ldw	r10,1192(sp)
1000952c:	103f721e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009530:	d9411b17 	ldw	r5,1132(sp)
10009534:	d8c11c17 	ldw	r3,1136(sp)
10009538:	d811883a 	mov	r8,sp
1000953c:	29000044 	addi	r4,r5,1
10009540:	003fd906 	br	100094a8 <__alt_data_end+0xf80094a8>
10009544:	1800681e 	bne	r3,zero,100096e8 <___vfiprintf_internal_r+0x1060>
10009548:	50004d26 	beq	r10,zero,10009680 <___vfiprintf_internal_r+0xff8>
1000954c:	d8811d04 	addi	r2,sp,1140
10009550:	00c00084 	movi	r3,2
10009554:	d8800015 	stw	r2,0(sp)
10009558:	d8c00115 	stw	r3,4(sp)
1000955c:	2005883a 	mov	r2,r4
10009560:	d811883a 	mov	r8,sp
10009564:	003de006 	br	10008ce8 <__alt_data_end+0xf8008ce8>
10009568:	1800551e 	bne	r3,zero,100096c0 <___vfiprintf_internal_r+0x1038>
1000956c:	000b883a 	mov	r5,zero
10009570:	00800044 	movi	r2,1
10009574:	d811883a 	mov	r8,sp
10009578:	003dde06 	br	10008cf4 <__alt_data_end+0xf8008cf4>
1000957c:	10803fcc 	andi	r2,r2,255
10009580:	1000191e 	bne	r2,zero,100095e8 <___vfiprintf_internal_r+0xf60>
10009584:	9080004c 	andi	r2,r18,1
10009588:	10001726 	beq	r2,zero,100095e8 <___vfiprintf_internal_r+0xf60>
1000958c:	00800c04 	movi	r2,48
10009590:	d8c109c4 	addi	r3,sp,1063
10009594:	d88109c5 	stb	r2,1063(sp)
10009598:	dd012817 	ldw	r20,1184(sp)
1000959c:	d8c12215 	stw	r3,1160(sp)
100095a0:	003d8a06 	br	10008bcc <__alt_data_end+0xf8008bcc>
100095a4:	d9012717 	ldw	r4,1180(sp)
100095a8:	dd010a04 	addi	r20,sp,1064
100095ac:	988003cc 	andi	r2,r19,15
100095b0:	a806973a 	slli	r3,r21,28
100095b4:	2085883a 	add	r2,r4,r2
100095b8:	9826d13a 	srli	r19,r19,4
100095bc:	10800003 	ldbu	r2,0(r2)
100095c0:	a82ad13a 	srli	r21,r21,4
100095c4:	a53fffc4 	addi	r20,r20,-1
100095c8:	1ce6b03a 	or	r19,r3,r19
100095cc:	a0800005 	stb	r2,0(r20)
100095d0:	9d44b03a 	or	r2,r19,r21
100095d4:	103ff51e 	bne	r2,zero,100095ac <__alt_data_end+0xf80095ac>
100095d8:	d9411e17 	ldw	r5,1144(sp)
100095dc:	dd012215 	stw	r20,1160(sp)
100095e0:	2d29c83a 	sub	r20,r5,r20
100095e4:	003d7906 	br	10008bcc <__alt_data_end+0xf8008bcc>
100095e8:	d8c10a04 	addi	r3,sp,1064
100095ec:	d8c12215 	stw	r3,1160(sp)
100095f0:	003d7606 	br	10008bcc <__alt_data_end+0xf8008bcc>
100095f4:	18009e1e 	bne	r3,zero,10009870 <___vfiprintf_internal_r+0x11e8>
100095f8:	d8811d87 	ldb	r2,1142(sp)
100095fc:	10005f26 	beq	r2,zero,1000977c <___vfiprintf_internal_r+0x10f4>
10009600:	00c00044 	movi	r3,1
10009604:	d9011d84 	addi	r4,sp,1142
10009608:	1805883a 	mov	r2,r3
1000960c:	d9000015 	stw	r4,0(sp)
10009610:	d8c00115 	stw	r3,4(sp)
10009614:	d811883a 	mov	r8,sp
10009618:	003efc06 	br	1000920c <__alt_data_end+0xf800920c>
1000961c:	d9412417 	ldw	r5,1168(sp)
10009620:	d811883a 	mov	r8,sp
10009624:	2d65c83a 	sub	r18,r5,r21
10009628:	04bf4816 	blt	zero,r18,1000934c <__alt_data_end+0xf800934c>
1000962c:	003f6c06 	br	100093e0 <__alt_data_end+0xf80093e0>
10009630:	b829883a 	mov	r20,r23
10009634:	003c6906 	br	100087dc <__alt_data_end+0xf80087dc>
10009638:	d9012117 	ldw	r4,1156(sp)
1000963c:	d9412017 	ldw	r5,1152(sp)
10009640:	d9811a04 	addi	r6,sp,1128
10009644:	00085740 	call	10008574 <__sprint_r.part.0>
10009648:	103f2b1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
1000964c:	d8c11c17 	ldw	r3,1136(sp)
10009650:	d811883a 	mov	r8,sp
10009654:	003f3806 	br	10009338 <__alt_data_end+0xf8009338>
10009658:	00800084 	movi	r2,2
1000965c:	9d46b03a 	or	r3,r19,r21
10009660:	003df606 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009664:	d9012117 	ldw	r4,1156(sp)
10009668:	d9412017 	ldw	r5,1152(sp)
1000966c:	d9811a04 	addi	r6,sp,1128
10009670:	00085740 	call	10008574 <__sprint_r.part.0>
10009674:	103f201e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009678:	d811883a 	mov	r8,sp
1000967c:	003cc606 	br	10008998 <__alt_data_end+0xf8008998>
10009680:	000b883a 	mov	r5,zero
10009684:	2005883a 	mov	r2,r4
10009688:	d811883a 	mov	r8,sp
1000968c:	003d9906 	br	10008cf4 <__alt_data_end+0xf8008cf4>
10009690:	10803fcc 	andi	r2,r2,255
10009694:	1080201c 	xori	r2,r2,128
10009698:	10bfe004 	addi	r2,r2,-128
1000969c:	01000c04 	movi	r4,48
100096a0:	1100b226 	beq	r2,r4,1000996c <___vfiprintf_internal_r+0x12e4>
100096a4:	d9412217 	ldw	r5,1160(sp)
100096a8:	d8811e17 	ldw	r2,1144(sp)
100096ac:	193fffc5 	stb	r4,-1(r3)
100096b0:	297fffc4 	addi	r5,r5,-1
100096b4:	d9412215 	stw	r5,1160(sp)
100096b8:	1169c83a 	sub	r20,r2,r5
100096bc:	003d4306 	br	10008bcc <__alt_data_end+0xf8008bcc>
100096c0:	d9012117 	ldw	r4,1156(sp)
100096c4:	d9412017 	ldw	r5,1152(sp)
100096c8:	d9811a04 	addi	r6,sp,1128
100096cc:	00085740 	call	10008574 <__sprint_r.part.0>
100096d0:	103f091e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
100096d4:	d9411b17 	ldw	r5,1132(sp)
100096d8:	d8c11c17 	ldw	r3,1136(sp)
100096dc:	d811883a 	mov	r8,sp
100096e0:	28800044 	addi	r2,r5,1
100096e4:	003d8306 	br	10008cf4 <__alt_data_end+0xf8008cf4>
100096e8:	d9012117 	ldw	r4,1156(sp)
100096ec:	d9412017 	ldw	r5,1152(sp)
100096f0:	d9811a04 	addi	r6,sp,1128
100096f4:	da812a15 	stw	r10,1192(sp)
100096f8:	00085740 	call	10008574 <__sprint_r.part.0>
100096fc:	da812a17 	ldw	r10,1192(sp)
10009700:	103efd1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009704:	d9411b17 	ldw	r5,1132(sp)
10009708:	d8c11c17 	ldw	r3,1136(sp)
1000970c:	d811883a 	mov	r8,sp
10009710:	28800044 	addi	r2,r5,1
10009714:	003d6a06 	br	10008cc0 <__alt_data_end+0xf8008cc0>
10009718:	1800a01e 	bne	r3,zero,1000999c <___vfiprintf_internal_r+0x1314>
1000971c:	000b883a 	mov	r5,zero
10009720:	00800044 	movi	r2,1
10009724:	d811883a 	mov	r8,sp
10009728:	003d7406 	br	10008cfc <__alt_data_end+0xf8008cfc>
1000972c:	d9012117 	ldw	r4,1156(sp)
10009730:	d9412017 	ldw	r5,1152(sp)
10009734:	d9811a04 	addi	r6,sp,1128
10009738:	00085740 	call	10008574 <__sprint_r.part.0>
1000973c:	103eee1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
10009740:	d8811b17 	ldw	r2,1132(sp)
10009744:	d8c11c17 	ldw	r3,1136(sp)
10009748:	d811883a 	mov	r8,sp
1000974c:	10800044 	addi	r2,r2,1
10009750:	003d8f06 	br	10008d90 <__alt_data_end+0xf8008d90>
10009754:	04e7c83a 	sub	r19,zero,r19
10009758:	9804c03a 	cmpne	r2,r19,zero
1000975c:	056bc83a 	sub	r21,zero,r21
10009760:	a8abc83a 	sub	r21,r21,r2
10009764:	05800b44 	movi	r22,45
10009768:	dd811d85 	stb	r22,1142(sp)
1000976c:	8029883a 	mov	r20,r16
10009770:	00800044 	movi	r2,1
10009774:	9d46b03a 	or	r3,r19,r21
10009778:	003cfa06 	br	10008b64 <__alt_data_end+0xf8008b64>
1000977c:	000b883a 	mov	r5,zero
10009780:	00800044 	movi	r2,1
10009784:	d811883a 	mov	r8,sp
10009788:	503d5a26 	beq	r10,zero,10008cf4 <__alt_data_end+0xf8008cf4>
1000978c:	00c00084 	movi	r3,2
10009790:	d9011d04 	addi	r4,sp,1140
10009794:	d9000015 	stw	r4,0(sp)
10009798:	d8c00115 	stw	r3,4(sp)
1000979c:	003d5206 	br	10008ce8 <__alt_data_end+0xf8008ce8>
100097a0:	9080040c 	andi	r2,r18,16
100097a4:	1000421e 	bne	r2,zero,100098b0 <___vfiprintf_internal_r+0x1228>
100097a8:	9480100c 	andi	r18,r18,64
100097ac:	90009c26 	beq	r18,zero,10009a20 <___vfiprintf_internal_r+0x1398>
100097b0:	d9412317 	ldw	r5,1164(sp)
100097b4:	d8c12517 	ldw	r3,1172(sp)
100097b8:	28800017 	ldw	r2,0(r5)
100097bc:	29400104 	addi	r5,r5,4
100097c0:	d9412315 	stw	r5,1164(sp)
100097c4:	10c0000d 	sth	r3,0(r2)
100097c8:	003be706 	br	10008768 <__alt_data_end+0xf8008768>
100097cc:	90c0100c 	andi	r3,r18,64
100097d0:	18003e26 	beq	r3,zero,100098cc <___vfiprintf_internal_r+0x1244>
100097d4:	d8c12317 	ldw	r3,1164(sp)
100097d8:	14c0000b 	ldhu	r19,0(r2)
100097dc:	002b883a 	mov	r21,zero
100097e0:	18c00104 	addi	r3,r3,4
100097e4:	d8c12315 	stw	r3,1164(sp)
100097e8:	003db706 	br	10008ec8 <__alt_data_end+0xf8008ec8>
100097ec:	9080100c 	andi	r2,r18,64
100097f0:	10004c26 	beq	r2,zero,10009924 <___vfiprintf_internal_r+0x129c>
100097f4:	1cc0000f 	ldh	r19,0(r3)
100097f8:	d8812317 	ldw	r2,1164(sp)
100097fc:	982bd7fa 	srai	r21,r19,31
10009800:	10800104 	addi	r2,r2,4
10009804:	d8812315 	stw	r2,1164(sp)
10009808:	a805883a 	mov	r2,r21
1000980c:	003cd006 	br	10008b50 <__alt_data_end+0xf8008b50>
10009810:	00800084 	movi	r2,2
10009814:	003d8906 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009818:	b9800007 	ldb	r6,0(r23)
1000981c:	003bfb06 	br	1000880c <__alt_data_end+0xf800880c>
10009820:	9080100c 	andi	r2,r18,64
10009824:	10003726 	beq	r2,zero,10009904 <___vfiprintf_internal_r+0x127c>
10009828:	d9412317 	ldw	r5,1164(sp)
1000982c:	002b883a 	mov	r21,zero
10009830:	0005883a 	mov	r2,zero
10009834:	2cc0000b 	ldhu	r19,0(r5)
10009838:	29400104 	addi	r5,r5,4
1000983c:	d9412315 	stw	r5,1164(sp)
10009840:	9807883a 	mov	r3,r19
10009844:	003d7d06 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009848:	9080100c 	andi	r2,r18,64
1000984c:	10002526 	beq	r2,zero,100098e4 <___vfiprintf_internal_r+0x125c>
10009850:	d8812317 	ldw	r2,1164(sp)
10009854:	002b883a 	mov	r21,zero
10009858:	14c0000b 	ldhu	r19,0(r2)
1000985c:	10800104 	addi	r2,r2,4
10009860:	d8812315 	stw	r2,1164(sp)
10009864:	9807883a 	mov	r3,r19
10009868:	00800044 	movi	r2,1
1000986c:	003d7306 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009870:	d9012117 	ldw	r4,1156(sp)
10009874:	d9412017 	ldw	r5,1152(sp)
10009878:	d9811a04 	addi	r6,sp,1128
1000987c:	da812a15 	stw	r10,1192(sp)
10009880:	00085740 	call	10008574 <__sprint_r.part.0>
10009884:	da812a17 	ldw	r10,1192(sp)
10009888:	103e9b1e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
1000988c:	d9411b17 	ldw	r5,1132(sp)
10009890:	d8c11c17 	ldw	r3,1136(sp)
10009894:	d811883a 	mov	r8,sp
10009898:	28800044 	addi	r2,r5,1
1000989c:	003e5006 	br	100091e0 <__alt_data_end+0xf80091e0>
100098a0:	182b883a 	mov	r21,r3
100098a4:	003ed006 	br	100093e8 <__alt_data_end+0xf80093e8>
100098a8:	8029883a 	mov	r20,r16
100098ac:	003dc606 	br	10008fc8 <__alt_data_end+0xf8008fc8>
100098b0:	d8c12317 	ldw	r3,1164(sp)
100098b4:	d9012517 	ldw	r4,1172(sp)
100098b8:	18800017 	ldw	r2,0(r3)
100098bc:	18c00104 	addi	r3,r3,4
100098c0:	d8c12315 	stw	r3,1164(sp)
100098c4:	11000015 	stw	r4,0(r2)
100098c8:	003ba706 	br	10008768 <__alt_data_end+0xf8008768>
100098cc:	d9012317 	ldw	r4,1164(sp)
100098d0:	14c00017 	ldw	r19,0(r2)
100098d4:	002b883a 	mov	r21,zero
100098d8:	21000104 	addi	r4,r4,4
100098dc:	d9012315 	stw	r4,1164(sp)
100098e0:	003d7906 	br	10008ec8 <__alt_data_end+0xf8008ec8>
100098e4:	d8c12317 	ldw	r3,1164(sp)
100098e8:	002b883a 	mov	r21,zero
100098ec:	00800044 	movi	r2,1
100098f0:	1cc00017 	ldw	r19,0(r3)
100098f4:	18c00104 	addi	r3,r3,4
100098f8:	d8c12315 	stw	r3,1164(sp)
100098fc:	9807883a 	mov	r3,r19
10009900:	003d4e06 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009904:	d8812317 	ldw	r2,1164(sp)
10009908:	002b883a 	mov	r21,zero
1000990c:	14c00017 	ldw	r19,0(r2)
10009910:	10800104 	addi	r2,r2,4
10009914:	d8812315 	stw	r2,1164(sp)
10009918:	9807883a 	mov	r3,r19
1000991c:	0005883a 	mov	r2,zero
10009920:	003d4606 	br	10008e3c <__alt_data_end+0xf8008e3c>
10009924:	1cc00017 	ldw	r19,0(r3)
10009928:	d8c12317 	ldw	r3,1164(sp)
1000992c:	982bd7fa 	srai	r21,r19,31
10009930:	18c00104 	addi	r3,r3,4
10009934:	d8c12315 	stw	r3,1164(sp)
10009938:	a805883a 	mov	r2,r21
1000993c:	003c8406 	br	10008b50 <__alt_data_end+0xf8008b50>
10009940:	01040074 	movhi	r4,4097
10009944:	2100cd04 	addi	r4,r4,820
10009948:	d9012615 	stw	r4,1176(sp)
1000994c:	003d0606 	br	10008d68 <__alt_data_end+0xf8008d68>
10009950:	b9800043 	ldbu	r6,1(r23)
10009954:	94800814 	ori	r18,r18,32
10009958:	bdc00044 	addi	r23,r23,1
1000995c:	31803fcc 	andi	r6,r6,255
10009960:	3180201c 	xori	r6,r6,128
10009964:	31bfe004 	addi	r6,r6,-128
10009968:	003ba806 	br	1000880c <__alt_data_end+0xf800880c>
1000996c:	d8811e17 	ldw	r2,1144(sp)
10009970:	d8c12217 	ldw	r3,1160(sp)
10009974:	10e9c83a 	sub	r20,r2,r3
10009978:	003c9406 	br	10008bcc <__alt_data_end+0xf8008bcc>
1000997c:	da012a15 	stw	r8,1192(sp)
10009980:	00012d00 	call	100012d0 <strlen>
10009984:	1029883a 	mov	r20,r2
10009988:	dd811d83 	ldbu	r22,1142(sp)
1000998c:	dcc12315 	stw	r19,1164(sp)
10009990:	0021883a 	mov	r16,zero
10009994:	da012a17 	ldw	r8,1192(sp)
10009998:	003c8c06 	br	10008bcc <__alt_data_end+0xf8008bcc>
1000999c:	d9012117 	ldw	r4,1156(sp)
100099a0:	d9412017 	ldw	r5,1152(sp)
100099a4:	d9811a04 	addi	r6,sp,1128
100099a8:	00085740 	call	10008574 <__sprint_r.part.0>
100099ac:	103e521e 	bne	r2,zero,100092f8 <__alt_data_end+0xf80092f8>
100099b0:	d9411b17 	ldw	r5,1132(sp)
100099b4:	d8c11c17 	ldw	r3,1136(sp)
100099b8:	d811883a 	mov	r8,sp
100099bc:	28800044 	addi	r2,r5,1
100099c0:	003cce06 	br	10008cfc <__alt_data_end+0xf8008cfc>
100099c4:	01440074 	movhi	r5,4097
100099c8:	2940d104 	addi	r5,r5,836
100099cc:	d9412615 	stw	r5,1176(sp)
100099d0:	d9411b17 	ldw	r5,1132(sp)
100099d4:	29400044 	addi	r5,r5,1
100099d8:	003cad06 	br	10008c90 <__alt_data_end+0xf8008c90>
100099dc:	00800184 	movi	r2,6
100099e0:	1400012e 	bgeu	r2,r16,100099e8 <___vfiprintf_internal_r+0x1360>
100099e4:	1021883a 	mov	r16,r2
100099e8:	8029883a 	mov	r20,r16
100099ec:	802b883a 	mov	r21,r16
100099f0:	80001c16 	blt	r16,zero,10009a64 <___vfiprintf_internal_r+0x13dc>
100099f4:	00c40074 	movhi	r3,4097
100099f8:	18c07104 	addi	r3,r3,452
100099fc:	dcc12315 	stw	r19,1164(sp)
10009a00:	d8c12215 	stw	r3,1160(sp)
10009a04:	003cff06 	br	10008e04 <__alt_data_end+0xf8008e04>
10009a08:	d9411b17 	ldw	r5,1132(sp)
10009a0c:	00840074 	movhi	r2,4097
10009a10:	1080d104 	addi	r2,r2,836
10009a14:	d8812615 	stw	r2,1176(sp)
10009a18:	29400044 	addi	r5,r5,1
10009a1c:	003e6706 	br	100093bc <__alt_data_end+0xf80093bc>
10009a20:	d9012317 	ldw	r4,1164(sp)
10009a24:	d9412517 	ldw	r5,1172(sp)
10009a28:	20800017 	ldw	r2,0(r4)
10009a2c:	21000104 	addi	r4,r4,4
10009a30:	d9012315 	stw	r4,1164(sp)
10009a34:	11400015 	stw	r5,0(r2)
10009a38:	003b4b06 	br	10008768 <__alt_data_end+0xf8008768>
10009a3c:	8029883a 	mov	r20,r16
10009a40:	dd811d83 	ldbu	r22,1142(sp)
10009a44:	dcc12315 	stw	r19,1164(sp)
10009a48:	0021883a 	mov	r16,zero
10009a4c:	003c5f06 	br	10008bcc <__alt_data_end+0xf8008bcc>
10009a50:	01040074 	movhi	r4,4097
10009a54:	2100cd04 	addi	r4,r4,820
10009a58:	d9012615 	stw	r4,1176(sp)
10009a5c:	1009883a 	mov	r4,r2
10009a60:	003ea006 	br	100094e4 <__alt_data_end+0xf80094e4>
10009a64:	002b883a 	mov	r21,zero
10009a68:	003fe206 	br	100099f4 <__alt_data_end+0xf80099f4>
10009a6c:	d9412317 	ldw	r5,1164(sp)
10009a70:	b807883a 	mov	r3,r23
10009a74:	102f883a 	mov	r23,r2
10009a78:	2c000017 	ldw	r16,0(r5)
10009a7c:	29000104 	addi	r4,r5,4
10009a80:	d9012315 	stw	r4,1164(sp)
10009a84:	80000416 	blt	r16,zero,10009a98 <___vfiprintf_internal_r+0x1410>
10009a88:	19800047 	ldb	r6,1(r3)
10009a8c:	003b5f06 	br	1000880c <__alt_data_end+0xf800880c>
10009a90:	043fffc4 	movi	r16,-1
10009a94:	003bef06 	br	10008a54 <__alt_data_end+0xf8008a54>
10009a98:	043fffc4 	movi	r16,-1
10009a9c:	19800047 	ldb	r6,1(r3)
10009aa0:	003b5a06 	br	1000880c <__alt_data_end+0xf800880c>
10009aa4:	282b883a 	mov	r21,r5
10009aa8:	003cc706 	br	10008dc8 <__alt_data_end+0xf8008dc8>

10009aac <__vfiprintf_internal>:
10009aac:	2007883a 	mov	r3,r4
10009ab0:	01040074 	movhi	r4,4097
10009ab4:	21095d04 	addi	r4,r4,9588
10009ab8:	21000017 	ldw	r4,0(r4)
10009abc:	2805883a 	mov	r2,r5
10009ac0:	300f883a 	mov	r7,r6
10009ac4:	180b883a 	mov	r5,r3
10009ac8:	100d883a 	mov	r6,r2
10009acc:	00086881 	jmpi	10008688 <___vfiprintf_internal_r>

10009ad0 <_write_r>:
10009ad0:	defffd04 	addi	sp,sp,-12
10009ad4:	dc000015 	stw	r16,0(sp)
10009ad8:	04040074 	movhi	r16,4097
10009adc:	dc400115 	stw	r17,4(sp)
10009ae0:	8411bc04 	addi	r16,r16,18160
10009ae4:	2023883a 	mov	r17,r4
10009ae8:	2809883a 	mov	r4,r5
10009aec:	300b883a 	mov	r5,r6
10009af0:	380d883a 	mov	r6,r7
10009af4:	dfc00215 	stw	ra,8(sp)
10009af8:	80000015 	stw	zero,0(r16)
10009afc:	000e1680 	call	1000e168 <write>
10009b00:	00ffffc4 	movi	r3,-1
10009b04:	10c00526 	beq	r2,r3,10009b1c <_write_r+0x4c>
10009b08:	dfc00217 	ldw	ra,8(sp)
10009b0c:	dc400117 	ldw	r17,4(sp)
10009b10:	dc000017 	ldw	r16,0(sp)
10009b14:	dec00304 	addi	sp,sp,12
10009b18:	f800283a 	ret
10009b1c:	80c00017 	ldw	r3,0(r16)
10009b20:	183ff926 	beq	r3,zero,10009b08 <__alt_data_end+0xf8009b08>
10009b24:	88c00015 	stw	r3,0(r17)
10009b28:	003ff706 	br	10009b08 <__alt_data_end+0xf8009b08>

10009b2c <_close_r>:
10009b2c:	defffd04 	addi	sp,sp,-12
10009b30:	dc000015 	stw	r16,0(sp)
10009b34:	04040074 	movhi	r16,4097
10009b38:	dc400115 	stw	r17,4(sp)
10009b3c:	8411bc04 	addi	r16,r16,18160
10009b40:	2023883a 	mov	r17,r4
10009b44:	2809883a 	mov	r4,r5
10009b48:	dfc00215 	stw	ra,8(sp)
10009b4c:	80000015 	stw	zero,0(r16)
10009b50:	000d8c40 	call	1000d8c4 <close>
10009b54:	00ffffc4 	movi	r3,-1
10009b58:	10c00526 	beq	r2,r3,10009b70 <_close_r+0x44>
10009b5c:	dfc00217 	ldw	ra,8(sp)
10009b60:	dc400117 	ldw	r17,4(sp)
10009b64:	dc000017 	ldw	r16,0(sp)
10009b68:	dec00304 	addi	sp,sp,12
10009b6c:	f800283a 	ret
10009b70:	80c00017 	ldw	r3,0(r16)
10009b74:	183ff926 	beq	r3,zero,10009b5c <__alt_data_end+0xf8009b5c>
10009b78:	88c00015 	stw	r3,0(r17)
10009b7c:	003ff706 	br	10009b5c <__alt_data_end+0xf8009b5c>

10009b80 <_calloc_r>:
10009b80:	defffe04 	addi	sp,sp,-8
10009b84:	dc000015 	stw	r16,0(sp)
10009b88:	2021883a 	mov	r16,r4
10009b8c:	2809883a 	mov	r4,r5
10009b90:	300b883a 	mov	r5,r6
10009b94:	dfc00115 	stw	ra,4(sp)
10009b98:	000103c0 	call	1000103c <__mulsi3>
10009b9c:	8009883a 	mov	r4,r16
10009ba0:	100b883a 	mov	r5,r2
10009ba4:	00061d40 	call	100061d4 <_malloc_r>
10009ba8:	1021883a 	mov	r16,r2
10009bac:	10002826 	beq	r2,zero,10009c50 <_calloc_r+0xd0>
10009bb0:	11bfff17 	ldw	r6,-4(r2)
10009bb4:	00bfff04 	movi	r2,-4
10009bb8:	00c00904 	movi	r3,36
10009bbc:	308c703a 	and	r6,r6,r2
10009bc0:	308d883a 	add	r6,r6,r2
10009bc4:	19801436 	bltu	r3,r6,10009c18 <_calloc_r+0x98>
10009bc8:	008004c4 	movi	r2,19
10009bcc:	11800936 	bltu	r2,r6,10009bf4 <_calloc_r+0x74>
10009bd0:	8005883a 	mov	r2,r16
10009bd4:	10000015 	stw	zero,0(r2)
10009bd8:	10000115 	stw	zero,4(r2)
10009bdc:	10000215 	stw	zero,8(r2)
10009be0:	8005883a 	mov	r2,r16
10009be4:	dfc00117 	ldw	ra,4(sp)
10009be8:	dc000017 	ldw	r16,0(sp)
10009bec:	dec00204 	addi	sp,sp,8
10009bf0:	f800283a 	ret
10009bf4:	80000015 	stw	zero,0(r16)
10009bf8:	80000115 	stw	zero,4(r16)
10009bfc:	008006c4 	movi	r2,27
10009c00:	11800d2e 	bgeu	r2,r6,10009c38 <_calloc_r+0xb8>
10009c04:	80000215 	stw	zero,8(r16)
10009c08:	80000315 	stw	zero,12(r16)
10009c0c:	30c00c26 	beq	r6,r3,10009c40 <_calloc_r+0xc0>
10009c10:	80800404 	addi	r2,r16,16
10009c14:	003fef06 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009c18:	8009883a 	mov	r4,r16
10009c1c:	000b883a 	mov	r5,zero
10009c20:	0006bc00 	call	10006bc0 <memset>
10009c24:	8005883a 	mov	r2,r16
10009c28:	dfc00117 	ldw	ra,4(sp)
10009c2c:	dc000017 	ldw	r16,0(sp)
10009c30:	dec00204 	addi	sp,sp,8
10009c34:	f800283a 	ret
10009c38:	80800204 	addi	r2,r16,8
10009c3c:	003fe506 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009c40:	80000415 	stw	zero,16(r16)
10009c44:	80800604 	addi	r2,r16,24
10009c48:	80000515 	stw	zero,20(r16)
10009c4c:	003fe106 	br	10009bd4 <__alt_data_end+0xf8009bd4>
10009c50:	0005883a 	mov	r2,zero
10009c54:	003fe306 	br	10009be4 <__alt_data_end+0xf8009be4>

10009c58 <_fclose_r>:
10009c58:	28003226 	beq	r5,zero,10009d24 <_fclose_r+0xcc>
10009c5c:	defffc04 	addi	sp,sp,-16
10009c60:	dc400115 	stw	r17,4(sp)
10009c64:	2023883a 	mov	r17,r4
10009c68:	dc000015 	stw	r16,0(sp)
10009c6c:	dfc00315 	stw	ra,12(sp)
10009c70:	dc800215 	stw	r18,8(sp)
10009c74:	2821883a 	mov	r16,r5
10009c78:	00054d40 	call	100054d4 <__sfp_lock_acquire>
10009c7c:	88000226 	beq	r17,zero,10009c88 <_fclose_r+0x30>
10009c80:	88800e17 	ldw	r2,56(r17)
10009c84:	10002926 	beq	r2,zero,10009d2c <_fclose_r+0xd4>
10009c88:	8080030f 	ldh	r2,12(r16)
10009c8c:	10002226 	beq	r2,zero,10009d18 <_fclose_r+0xc0>
10009c90:	8809883a 	mov	r4,r17
10009c94:	800b883a 	mov	r5,r16
10009c98:	0004f080 	call	10004f08 <_fflush_r>
10009c9c:	1025883a 	mov	r18,r2
10009ca0:	80800b17 	ldw	r2,44(r16)
10009ca4:	10000426 	beq	r2,zero,10009cb8 <_fclose_r+0x60>
10009ca8:	81400717 	ldw	r5,28(r16)
10009cac:	8809883a 	mov	r4,r17
10009cb0:	103ee83a 	callr	r2
10009cb4:	10002616 	blt	r2,zero,10009d50 <_fclose_r+0xf8>
10009cb8:	8080030b 	ldhu	r2,12(r16)
10009cbc:	1080200c 	andi	r2,r2,128
10009cc0:	10001f1e 	bne	r2,zero,10009d40 <_fclose_r+0xe8>
10009cc4:	81400c17 	ldw	r5,48(r16)
10009cc8:	28000526 	beq	r5,zero,10009ce0 <_fclose_r+0x88>
10009ccc:	80801004 	addi	r2,r16,64
10009cd0:	28800226 	beq	r5,r2,10009cdc <_fclose_r+0x84>
10009cd4:	8809883a 	mov	r4,r17
10009cd8:	00056380 	call	10005638 <_free_r>
10009cdc:	80000c15 	stw	zero,48(r16)
10009ce0:	81401117 	ldw	r5,68(r16)
10009ce4:	28000326 	beq	r5,zero,10009cf4 <_fclose_r+0x9c>
10009ce8:	8809883a 	mov	r4,r17
10009cec:	00056380 	call	10005638 <_free_r>
10009cf0:	80001115 	stw	zero,68(r16)
10009cf4:	8000030d 	sth	zero,12(r16)
10009cf8:	00054d80 	call	100054d8 <__sfp_lock_release>
10009cfc:	9005883a 	mov	r2,r18
10009d00:	dfc00317 	ldw	ra,12(sp)
10009d04:	dc800217 	ldw	r18,8(sp)
10009d08:	dc400117 	ldw	r17,4(sp)
10009d0c:	dc000017 	ldw	r16,0(sp)
10009d10:	dec00404 	addi	sp,sp,16
10009d14:	f800283a 	ret
10009d18:	00054d80 	call	100054d8 <__sfp_lock_release>
10009d1c:	0005883a 	mov	r2,zero
10009d20:	003ff706 	br	10009d00 <__alt_data_end+0xf8009d00>
10009d24:	0005883a 	mov	r2,zero
10009d28:	f800283a 	ret
10009d2c:	8809883a 	mov	r4,r17
10009d30:	00054c40 	call	100054c4 <__sinit>
10009d34:	8080030f 	ldh	r2,12(r16)
10009d38:	103fd51e 	bne	r2,zero,10009c90 <__alt_data_end+0xf8009c90>
10009d3c:	003ff606 	br	10009d18 <__alt_data_end+0xf8009d18>
10009d40:	81400417 	ldw	r5,16(r16)
10009d44:	8809883a 	mov	r4,r17
10009d48:	00056380 	call	10005638 <_free_r>
10009d4c:	003fdd06 	br	10009cc4 <__alt_data_end+0xf8009cc4>
10009d50:	04bfffc4 	movi	r18,-1
10009d54:	003fd806 	br	10009cb8 <__alt_data_end+0xf8009cb8>

10009d58 <fclose>:
10009d58:	00840074 	movhi	r2,4097
10009d5c:	10895d04 	addi	r2,r2,9588
10009d60:	200b883a 	mov	r5,r4
10009d64:	11000017 	ldw	r4,0(r2)
10009d68:	0009c581 	jmpi	10009c58 <_fclose_r>

10009d6c <_fputwc_r>:
10009d6c:	3080030b 	ldhu	r2,12(r6)
10009d70:	defff804 	addi	sp,sp,-32
10009d74:	dcc00415 	stw	r19,16(sp)
10009d78:	dc800315 	stw	r18,12(sp)
10009d7c:	dc000115 	stw	r16,4(sp)
10009d80:	dfc00715 	stw	ra,28(sp)
10009d84:	dd400615 	stw	r21,24(sp)
10009d88:	dd000515 	stw	r20,20(sp)
10009d8c:	dc400215 	stw	r17,8(sp)
10009d90:	10c8000c 	andi	r3,r2,8192
10009d94:	3021883a 	mov	r16,r6
10009d98:	2027883a 	mov	r19,r4
10009d9c:	2825883a 	mov	r18,r5
10009da0:	1800051e 	bne	r3,zero,10009db8 <_fputwc_r+0x4c>
10009da4:	30c01917 	ldw	r3,100(r6)
10009da8:	10880014 	ori	r2,r2,8192
10009dac:	3080030d 	sth	r2,12(r6)
10009db0:	18880014 	ori	r2,r3,8192
10009db4:	30801915 	stw	r2,100(r6)
10009db8:	0005fc40 	call	10005fc4 <__locale_mb_cur_max>
10009dbc:	00c00044 	movi	r3,1
10009dc0:	10c03e26 	beq	r2,r3,10009ebc <_fputwc_r+0x150>
10009dc4:	9809883a 	mov	r4,r19
10009dc8:	d80b883a 	mov	r5,sp
10009dcc:	900d883a 	mov	r6,r18
10009dd0:	81c01704 	addi	r7,r16,92
10009dd4:	000a21c0 	call	1000a21c <_wcrtomb_r>
10009dd8:	1029883a 	mov	r20,r2
10009ddc:	00bfffc4 	movi	r2,-1
10009de0:	a0802026 	beq	r20,r2,10009e64 <_fputwc_r+0xf8>
10009de4:	d9400003 	ldbu	r5,0(sp)
10009de8:	a0001c26 	beq	r20,zero,10009e5c <_fputwc_r+0xf0>
10009dec:	0023883a 	mov	r17,zero
10009df0:	05400284 	movi	r21,10
10009df4:	00000906 	br	10009e1c <_fputwc_r+0xb0>
10009df8:	80800017 	ldw	r2,0(r16)
10009dfc:	11400005 	stb	r5,0(r2)
10009e00:	80c00017 	ldw	r3,0(r16)
10009e04:	18c00044 	addi	r3,r3,1
10009e08:	80c00015 	stw	r3,0(r16)
10009e0c:	8c400044 	addi	r17,r17,1
10009e10:	dc45883a 	add	r2,sp,r17
10009e14:	8d00112e 	bgeu	r17,r20,10009e5c <_fputwc_r+0xf0>
10009e18:	11400003 	ldbu	r5,0(r2)
10009e1c:	80c00217 	ldw	r3,8(r16)
10009e20:	18ffffc4 	addi	r3,r3,-1
10009e24:	80c00215 	stw	r3,8(r16)
10009e28:	183ff30e 	bge	r3,zero,10009df8 <__alt_data_end+0xf8009df8>
10009e2c:	80800617 	ldw	r2,24(r16)
10009e30:	18801916 	blt	r3,r2,10009e98 <_fputwc_r+0x12c>
10009e34:	80800017 	ldw	r2,0(r16)
10009e38:	11400005 	stb	r5,0(r2)
10009e3c:	80800017 	ldw	r2,0(r16)
10009e40:	10c00003 	ldbu	r3,0(r2)
10009e44:	10800044 	addi	r2,r2,1
10009e48:	1d402326 	beq	r3,r21,10009ed8 <_fputwc_r+0x16c>
10009e4c:	80800015 	stw	r2,0(r16)
10009e50:	8c400044 	addi	r17,r17,1
10009e54:	dc45883a 	add	r2,sp,r17
10009e58:	8d3fef36 	bltu	r17,r20,10009e18 <__alt_data_end+0xf8009e18>
10009e5c:	9005883a 	mov	r2,r18
10009e60:	00000406 	br	10009e74 <_fputwc_r+0x108>
10009e64:	80c0030b 	ldhu	r3,12(r16)
10009e68:	a005883a 	mov	r2,r20
10009e6c:	18c01014 	ori	r3,r3,64
10009e70:	80c0030d 	sth	r3,12(r16)
10009e74:	dfc00717 	ldw	ra,28(sp)
10009e78:	dd400617 	ldw	r21,24(sp)
10009e7c:	dd000517 	ldw	r20,20(sp)
10009e80:	dcc00417 	ldw	r19,16(sp)
10009e84:	dc800317 	ldw	r18,12(sp)
10009e88:	dc400217 	ldw	r17,8(sp)
10009e8c:	dc000117 	ldw	r16,4(sp)
10009e90:	dec00804 	addi	sp,sp,32
10009e94:	f800283a 	ret
10009e98:	9809883a 	mov	r4,r19
10009e9c:	29403fcc 	andi	r5,r5,255
10009ea0:	800d883a 	mov	r6,r16
10009ea4:	000a0ac0 	call	1000a0ac <__swbuf_r>
10009ea8:	10bfffe0 	cmpeqi	r2,r2,-1
10009eac:	10803fcc 	andi	r2,r2,255
10009eb0:	103fd626 	beq	r2,zero,10009e0c <__alt_data_end+0xf8009e0c>
10009eb4:	00bfffc4 	movi	r2,-1
10009eb8:	003fee06 	br	10009e74 <__alt_data_end+0xf8009e74>
10009ebc:	90ffffc4 	addi	r3,r18,-1
10009ec0:	01003f84 	movi	r4,254
10009ec4:	20ffbf36 	bltu	r4,r3,10009dc4 <__alt_data_end+0xf8009dc4>
10009ec8:	900b883a 	mov	r5,r18
10009ecc:	dc800005 	stb	r18,0(sp)
10009ed0:	1029883a 	mov	r20,r2
10009ed4:	003fc506 	br	10009dec <__alt_data_end+0xf8009dec>
10009ed8:	9809883a 	mov	r4,r19
10009edc:	a80b883a 	mov	r5,r21
10009ee0:	800d883a 	mov	r6,r16
10009ee4:	000a0ac0 	call	1000a0ac <__swbuf_r>
10009ee8:	10bfffe0 	cmpeqi	r2,r2,-1
10009eec:	003fef06 	br	10009eac <__alt_data_end+0xf8009eac>

10009ef0 <fputwc>:
10009ef0:	defffc04 	addi	sp,sp,-16
10009ef4:	dc000115 	stw	r16,4(sp)
10009ef8:	04040074 	movhi	r16,4097
10009efc:	84095d04 	addi	r16,r16,9588
10009f00:	dc400215 	stw	r17,8(sp)
10009f04:	2023883a 	mov	r17,r4
10009f08:	81000017 	ldw	r4,0(r16)
10009f0c:	dfc00315 	stw	ra,12(sp)
10009f10:	280d883a 	mov	r6,r5
10009f14:	20000626 	beq	r4,zero,10009f30 <fputwc+0x40>
10009f18:	20800e17 	ldw	r2,56(r4)
10009f1c:	1000041e 	bne	r2,zero,10009f30 <fputwc+0x40>
10009f20:	d9400015 	stw	r5,0(sp)
10009f24:	00054c40 	call	100054c4 <__sinit>
10009f28:	81000017 	ldw	r4,0(r16)
10009f2c:	d9800017 	ldw	r6,0(sp)
10009f30:	880b883a 	mov	r5,r17
10009f34:	dfc00317 	ldw	ra,12(sp)
10009f38:	dc400217 	ldw	r17,8(sp)
10009f3c:	dc000117 	ldw	r16,4(sp)
10009f40:	dec00404 	addi	sp,sp,16
10009f44:	0009d6c1 	jmpi	10009d6c <_fputwc_r>

10009f48 <_fstat_r>:
10009f48:	defffd04 	addi	sp,sp,-12
10009f4c:	dc000015 	stw	r16,0(sp)
10009f50:	04040074 	movhi	r16,4097
10009f54:	dc400115 	stw	r17,4(sp)
10009f58:	8411bc04 	addi	r16,r16,18160
10009f5c:	2023883a 	mov	r17,r4
10009f60:	2809883a 	mov	r4,r5
10009f64:	300b883a 	mov	r5,r6
10009f68:	dfc00215 	stw	ra,8(sp)
10009f6c:	80000015 	stw	zero,0(r16)
10009f70:	000da180 	call	1000da18 <fstat>
10009f74:	00ffffc4 	movi	r3,-1
10009f78:	10c00526 	beq	r2,r3,10009f90 <_fstat_r+0x48>
10009f7c:	dfc00217 	ldw	ra,8(sp)
10009f80:	dc400117 	ldw	r17,4(sp)
10009f84:	dc000017 	ldw	r16,0(sp)
10009f88:	dec00304 	addi	sp,sp,12
10009f8c:	f800283a 	ret
10009f90:	80c00017 	ldw	r3,0(r16)
10009f94:	183ff926 	beq	r3,zero,10009f7c <__alt_data_end+0xf8009f7c>
10009f98:	88c00015 	stw	r3,0(r17)
10009f9c:	003ff706 	br	10009f7c <__alt_data_end+0xf8009f7c>

10009fa0 <_isatty_r>:
10009fa0:	defffd04 	addi	sp,sp,-12
10009fa4:	dc000015 	stw	r16,0(sp)
10009fa8:	04040074 	movhi	r16,4097
10009fac:	dc400115 	stw	r17,4(sp)
10009fb0:	8411bc04 	addi	r16,r16,18160
10009fb4:	2023883a 	mov	r17,r4
10009fb8:	2809883a 	mov	r4,r5
10009fbc:	dfc00215 	stw	ra,8(sp)
10009fc0:	80000015 	stw	zero,0(r16)
10009fc4:	000db200 	call	1000db20 <isatty>
10009fc8:	00ffffc4 	movi	r3,-1
10009fcc:	10c00526 	beq	r2,r3,10009fe4 <_isatty_r+0x44>
10009fd0:	dfc00217 	ldw	ra,8(sp)
10009fd4:	dc400117 	ldw	r17,4(sp)
10009fd8:	dc000017 	ldw	r16,0(sp)
10009fdc:	dec00304 	addi	sp,sp,12
10009fe0:	f800283a 	ret
10009fe4:	80c00017 	ldw	r3,0(r16)
10009fe8:	183ff926 	beq	r3,zero,10009fd0 <__alt_data_end+0xf8009fd0>
10009fec:	88c00015 	stw	r3,0(r17)
10009ff0:	003ff706 	br	10009fd0 <__alt_data_end+0xf8009fd0>

10009ff4 <_lseek_r>:
10009ff4:	defffd04 	addi	sp,sp,-12
10009ff8:	dc000015 	stw	r16,0(sp)
10009ffc:	04040074 	movhi	r16,4097
1000a000:	dc400115 	stw	r17,4(sp)
1000a004:	8411bc04 	addi	r16,r16,18160
1000a008:	2023883a 	mov	r17,r4
1000a00c:	2809883a 	mov	r4,r5
1000a010:	300b883a 	mov	r5,r6
1000a014:	380d883a 	mov	r6,r7
1000a018:	dfc00215 	stw	ra,8(sp)
1000a01c:	80000015 	stw	zero,0(r16)
1000a020:	000dd000 	call	1000dd00 <lseek>
1000a024:	00ffffc4 	movi	r3,-1
1000a028:	10c00526 	beq	r2,r3,1000a040 <_lseek_r+0x4c>
1000a02c:	dfc00217 	ldw	ra,8(sp)
1000a030:	dc400117 	ldw	r17,4(sp)
1000a034:	dc000017 	ldw	r16,0(sp)
1000a038:	dec00304 	addi	sp,sp,12
1000a03c:	f800283a 	ret
1000a040:	80c00017 	ldw	r3,0(r16)
1000a044:	183ff926 	beq	r3,zero,1000a02c <__alt_data_end+0xf800a02c>
1000a048:	88c00015 	stw	r3,0(r17)
1000a04c:	003ff706 	br	1000a02c <__alt_data_end+0xf800a02c>

1000a050 <_read_r>:
1000a050:	defffd04 	addi	sp,sp,-12
1000a054:	dc000015 	stw	r16,0(sp)
1000a058:	04040074 	movhi	r16,4097
1000a05c:	dc400115 	stw	r17,4(sp)
1000a060:	8411bc04 	addi	r16,r16,18160
1000a064:	2023883a 	mov	r17,r4
1000a068:	2809883a 	mov	r4,r5
1000a06c:	300b883a 	mov	r5,r6
1000a070:	380d883a 	mov	r6,r7
1000a074:	dfc00215 	stw	ra,8(sp)
1000a078:	80000015 	stw	zero,0(r16)
1000a07c:	000dee40 	call	1000dee4 <read>
1000a080:	00ffffc4 	movi	r3,-1
1000a084:	10c00526 	beq	r2,r3,1000a09c <_read_r+0x4c>
1000a088:	dfc00217 	ldw	ra,8(sp)
1000a08c:	dc400117 	ldw	r17,4(sp)
1000a090:	dc000017 	ldw	r16,0(sp)
1000a094:	dec00304 	addi	sp,sp,12
1000a098:	f800283a 	ret
1000a09c:	80c00017 	ldw	r3,0(r16)
1000a0a0:	183ff926 	beq	r3,zero,1000a088 <__alt_data_end+0xf800a088>
1000a0a4:	88c00015 	stw	r3,0(r17)
1000a0a8:	003ff706 	br	1000a088 <__alt_data_end+0xf800a088>

1000a0ac <__swbuf_r>:
1000a0ac:	defffc04 	addi	sp,sp,-16
1000a0b0:	dc800215 	stw	r18,8(sp)
1000a0b4:	dc400115 	stw	r17,4(sp)
1000a0b8:	dc000015 	stw	r16,0(sp)
1000a0bc:	dfc00315 	stw	ra,12(sp)
1000a0c0:	2025883a 	mov	r18,r4
1000a0c4:	2823883a 	mov	r17,r5
1000a0c8:	3021883a 	mov	r16,r6
1000a0cc:	20000226 	beq	r4,zero,1000a0d8 <__swbuf_r+0x2c>
1000a0d0:	20800e17 	ldw	r2,56(r4)
1000a0d4:	10004126 	beq	r2,zero,1000a1dc <__swbuf_r+0x130>
1000a0d8:	80c00617 	ldw	r3,24(r16)
1000a0dc:	8180030b 	ldhu	r6,12(r16)
1000a0e0:	80c00215 	stw	r3,8(r16)
1000a0e4:	30c0020c 	andi	r3,r6,8
1000a0e8:	18003526 	beq	r3,zero,1000a1c0 <__swbuf_r+0x114>
1000a0ec:	80c00417 	ldw	r3,16(r16)
1000a0f0:	18003326 	beq	r3,zero,1000a1c0 <__swbuf_r+0x114>
1000a0f4:	3088000c 	andi	r2,r6,8192
1000a0f8:	8c403fcc 	andi	r17,r17,255
1000a0fc:	10001726 	beq	r2,zero,1000a15c <__swbuf_r+0xb0>
1000a100:	80800017 	ldw	r2,0(r16)
1000a104:	81000517 	ldw	r4,20(r16)
1000a108:	10c7c83a 	sub	r3,r2,r3
1000a10c:	19001d0e 	bge	r3,r4,1000a184 <__swbuf_r+0xd8>
1000a110:	18c00044 	addi	r3,r3,1
1000a114:	81400217 	ldw	r5,8(r16)
1000a118:	11000044 	addi	r4,r2,1
1000a11c:	81000015 	stw	r4,0(r16)
1000a120:	297fffc4 	addi	r5,r5,-1
1000a124:	81400215 	stw	r5,8(r16)
1000a128:	14400005 	stb	r17,0(r2)
1000a12c:	80800517 	ldw	r2,20(r16)
1000a130:	10c01d26 	beq	r2,r3,1000a1a8 <__swbuf_r+0xfc>
1000a134:	8080030b 	ldhu	r2,12(r16)
1000a138:	1080004c 	andi	r2,r2,1
1000a13c:	1000181e 	bne	r2,zero,1000a1a0 <__swbuf_r+0xf4>
1000a140:	8805883a 	mov	r2,r17
1000a144:	dfc00317 	ldw	ra,12(sp)
1000a148:	dc800217 	ldw	r18,8(sp)
1000a14c:	dc400117 	ldw	r17,4(sp)
1000a150:	dc000017 	ldw	r16,0(sp)
1000a154:	dec00404 	addi	sp,sp,16
1000a158:	f800283a 	ret
1000a15c:	81001917 	ldw	r4,100(r16)
1000a160:	00b7ffc4 	movi	r2,-8193
1000a164:	31880014 	ori	r6,r6,8192
1000a168:	2084703a 	and	r2,r4,r2
1000a16c:	80801915 	stw	r2,100(r16)
1000a170:	80800017 	ldw	r2,0(r16)
1000a174:	81000517 	ldw	r4,20(r16)
1000a178:	8180030d 	sth	r6,12(r16)
1000a17c:	10c7c83a 	sub	r3,r2,r3
1000a180:	193fe316 	blt	r3,r4,1000a110 <__alt_data_end+0xf800a110>
1000a184:	9009883a 	mov	r4,r18
1000a188:	800b883a 	mov	r5,r16
1000a18c:	0004f080 	call	10004f08 <_fflush_r>
1000a190:	1000091e 	bne	r2,zero,1000a1b8 <__swbuf_r+0x10c>
1000a194:	80800017 	ldw	r2,0(r16)
1000a198:	00c00044 	movi	r3,1
1000a19c:	003fdd06 	br	1000a114 <__alt_data_end+0xf800a114>
1000a1a0:	00800284 	movi	r2,10
1000a1a4:	88bfe61e 	bne	r17,r2,1000a140 <__alt_data_end+0xf800a140>
1000a1a8:	9009883a 	mov	r4,r18
1000a1ac:	800b883a 	mov	r5,r16
1000a1b0:	0004f080 	call	10004f08 <_fflush_r>
1000a1b4:	103fe226 	beq	r2,zero,1000a140 <__alt_data_end+0xf800a140>
1000a1b8:	00bfffc4 	movi	r2,-1
1000a1bc:	003fe106 	br	1000a144 <__alt_data_end+0xf800a144>
1000a1c0:	9009883a 	mov	r4,r18
1000a1c4:	800b883a 	mov	r5,r16
1000a1c8:	00034880 	call	10003488 <__swsetup_r>
1000a1cc:	1000051e 	bne	r2,zero,1000a1e4 <__swbuf_r+0x138>
1000a1d0:	8180030b 	ldhu	r6,12(r16)
1000a1d4:	80c00417 	ldw	r3,16(r16)
1000a1d8:	003fc606 	br	1000a0f4 <__alt_data_end+0xf800a0f4>
1000a1dc:	00054c40 	call	100054c4 <__sinit>
1000a1e0:	003fbd06 	br	1000a0d8 <__alt_data_end+0xf800a0d8>
1000a1e4:	80c0030b 	ldhu	r3,12(r16)
1000a1e8:	00bfffc4 	movi	r2,-1
1000a1ec:	18c01014 	ori	r3,r3,64
1000a1f0:	80c0030d 	sth	r3,12(r16)
1000a1f4:	00c00244 	movi	r3,9
1000a1f8:	90c00015 	stw	r3,0(r18)
1000a1fc:	003fd106 	br	1000a144 <__alt_data_end+0xf800a144>

1000a200 <__swbuf>:
1000a200:	00c40074 	movhi	r3,4097
1000a204:	18c95d04 	addi	r3,r3,9588
1000a208:	2005883a 	mov	r2,r4
1000a20c:	19000017 	ldw	r4,0(r3)
1000a210:	280d883a 	mov	r6,r5
1000a214:	100b883a 	mov	r5,r2
1000a218:	000a0ac1 	jmpi	1000a0ac <__swbuf_r>

1000a21c <_wcrtomb_r>:
1000a21c:	defff604 	addi	sp,sp,-40
1000a220:	00840074 	movhi	r2,4097
1000a224:	dc800815 	stw	r18,32(sp)
1000a228:	dc400715 	stw	r17,28(sp)
1000a22c:	dc000615 	stw	r16,24(sp)
1000a230:	10896104 	addi	r2,r2,9604
1000a234:	dfc00915 	stw	ra,36(sp)
1000a238:	2021883a 	mov	r16,r4
1000a23c:	3823883a 	mov	r17,r7
1000a240:	14800017 	ldw	r18,0(r2)
1000a244:	28001426 	beq	r5,zero,1000a298 <_wcrtomb_r+0x7c>
1000a248:	d9400415 	stw	r5,16(sp)
1000a24c:	d9800515 	stw	r6,20(sp)
1000a250:	0005fb80 	call	10005fb8 <__locale_charset>
1000a254:	d9400417 	ldw	r5,16(sp)
1000a258:	d9800517 	ldw	r6,20(sp)
1000a25c:	8009883a 	mov	r4,r16
1000a260:	dc400015 	stw	r17,0(sp)
1000a264:	100f883a 	mov	r7,r2
1000a268:	903ee83a 	callr	r18
1000a26c:	00ffffc4 	movi	r3,-1
1000a270:	10c0031e 	bne	r2,r3,1000a280 <_wcrtomb_r+0x64>
1000a274:	88000015 	stw	zero,0(r17)
1000a278:	00c02284 	movi	r3,138
1000a27c:	80c00015 	stw	r3,0(r16)
1000a280:	dfc00917 	ldw	ra,36(sp)
1000a284:	dc800817 	ldw	r18,32(sp)
1000a288:	dc400717 	ldw	r17,28(sp)
1000a28c:	dc000617 	ldw	r16,24(sp)
1000a290:	dec00a04 	addi	sp,sp,40
1000a294:	f800283a 	ret
1000a298:	0005fb80 	call	10005fb8 <__locale_charset>
1000a29c:	8009883a 	mov	r4,r16
1000a2a0:	dc400015 	stw	r17,0(sp)
1000a2a4:	d9400104 	addi	r5,sp,4
1000a2a8:	000d883a 	mov	r6,zero
1000a2ac:	100f883a 	mov	r7,r2
1000a2b0:	903ee83a 	callr	r18
1000a2b4:	003fed06 	br	1000a26c <__alt_data_end+0xf800a26c>

1000a2b8 <wcrtomb>:
1000a2b8:	defff504 	addi	sp,sp,-44
1000a2bc:	dc400515 	stw	r17,20(sp)
1000a2c0:	dc000415 	stw	r16,16(sp)
1000a2c4:	dfc00a15 	stw	ra,40(sp)
1000a2c8:	dd400915 	stw	r21,36(sp)
1000a2cc:	dd000815 	stw	r20,32(sp)
1000a2d0:	dcc00715 	stw	r19,28(sp)
1000a2d4:	dc800615 	stw	r18,24(sp)
1000a2d8:	2021883a 	mov	r16,r4
1000a2dc:	3023883a 	mov	r17,r6
1000a2e0:	20001d26 	beq	r4,zero,1000a358 <wcrtomb+0xa0>
1000a2e4:	04840074 	movhi	r18,4097
1000a2e8:	94895d04 	addi	r18,r18,9588
1000a2ec:	00840074 	movhi	r2,4097
1000a2f0:	95400017 	ldw	r21,0(r18)
1000a2f4:	10896104 	addi	r2,r2,9604
1000a2f8:	15000017 	ldw	r20,0(r2)
1000a2fc:	2827883a 	mov	r19,r5
1000a300:	0005fb80 	call	10005fb8 <__locale_charset>
1000a304:	a809883a 	mov	r4,r21
1000a308:	dc400015 	stw	r17,0(sp)
1000a30c:	800b883a 	mov	r5,r16
1000a310:	980d883a 	mov	r6,r19
1000a314:	100f883a 	mov	r7,r2
1000a318:	a03ee83a 	callr	r20
1000a31c:	00ffffc4 	movi	r3,-1
1000a320:	10c0041e 	bne	r2,r3,1000a334 <wcrtomb+0x7c>
1000a324:	90c00017 	ldw	r3,0(r18)
1000a328:	01002284 	movi	r4,138
1000a32c:	88000015 	stw	zero,0(r17)
1000a330:	19000015 	stw	r4,0(r3)
1000a334:	dfc00a17 	ldw	ra,40(sp)
1000a338:	dd400917 	ldw	r21,36(sp)
1000a33c:	dd000817 	ldw	r20,32(sp)
1000a340:	dcc00717 	ldw	r19,28(sp)
1000a344:	dc800617 	ldw	r18,24(sp)
1000a348:	dc400517 	ldw	r17,20(sp)
1000a34c:	dc000417 	ldw	r16,16(sp)
1000a350:	dec00b04 	addi	sp,sp,44
1000a354:	f800283a 	ret
1000a358:	04840074 	movhi	r18,4097
1000a35c:	94895d04 	addi	r18,r18,9588
1000a360:	00840074 	movhi	r2,4097
1000a364:	94c00017 	ldw	r19,0(r18)
1000a368:	10896104 	addi	r2,r2,9604
1000a36c:	14000017 	ldw	r16,0(r2)
1000a370:	0005fb80 	call	10005fb8 <__locale_charset>
1000a374:	9809883a 	mov	r4,r19
1000a378:	dc400015 	stw	r17,0(sp)
1000a37c:	d9400104 	addi	r5,sp,4
1000a380:	000d883a 	mov	r6,zero
1000a384:	100f883a 	mov	r7,r2
1000a388:	803ee83a 	callr	r16
1000a38c:	003fe306 	br	1000a31c <__alt_data_end+0xf800a31c>

1000a390 <__ascii_wctomb>:
1000a390:	28000526 	beq	r5,zero,1000a3a8 <__ascii_wctomb+0x18>
1000a394:	00803fc4 	movi	r2,255
1000a398:	11800536 	bltu	r2,r6,1000a3b0 <__ascii_wctomb+0x20>
1000a39c:	29800005 	stb	r6,0(r5)
1000a3a0:	00800044 	movi	r2,1
1000a3a4:	f800283a 	ret
1000a3a8:	0005883a 	mov	r2,zero
1000a3ac:	f800283a 	ret
1000a3b0:	00802284 	movi	r2,138
1000a3b4:	20800015 	stw	r2,0(r4)
1000a3b8:	00bfffc4 	movi	r2,-1
1000a3bc:	f800283a 	ret

1000a3c0 <_wctomb_r>:
1000a3c0:	00840074 	movhi	r2,4097
1000a3c4:	defff904 	addi	sp,sp,-28
1000a3c8:	10896104 	addi	r2,r2,9604
1000a3cc:	dfc00615 	stw	ra,24(sp)
1000a3d0:	dc400515 	stw	r17,20(sp)
1000a3d4:	dc000415 	stw	r16,16(sp)
1000a3d8:	3823883a 	mov	r17,r7
1000a3dc:	14000017 	ldw	r16,0(r2)
1000a3e0:	d9000115 	stw	r4,4(sp)
1000a3e4:	d9400215 	stw	r5,8(sp)
1000a3e8:	d9800315 	stw	r6,12(sp)
1000a3ec:	0005fb80 	call	10005fb8 <__locale_charset>
1000a3f0:	d9000117 	ldw	r4,4(sp)
1000a3f4:	d9400217 	ldw	r5,8(sp)
1000a3f8:	d9800317 	ldw	r6,12(sp)
1000a3fc:	dc400015 	stw	r17,0(sp)
1000a400:	100f883a 	mov	r7,r2
1000a404:	803ee83a 	callr	r16
1000a408:	dfc00617 	ldw	ra,24(sp)
1000a40c:	dc400517 	ldw	r17,20(sp)
1000a410:	dc000417 	ldw	r16,16(sp)
1000a414:	dec00704 	addi	sp,sp,28
1000a418:	f800283a 	ret

1000a41c <__udivdi3>:
1000a41c:	defff504 	addi	sp,sp,-44
1000a420:	dcc00415 	stw	r19,16(sp)
1000a424:	dc000115 	stw	r16,4(sp)
1000a428:	dfc00a15 	stw	ra,40(sp)
1000a42c:	df000915 	stw	fp,36(sp)
1000a430:	ddc00815 	stw	r23,32(sp)
1000a434:	dd800715 	stw	r22,28(sp)
1000a438:	dd400615 	stw	r21,24(sp)
1000a43c:	dd000515 	stw	r20,20(sp)
1000a440:	dc800315 	stw	r18,12(sp)
1000a444:	dc400215 	stw	r17,8(sp)
1000a448:	2027883a 	mov	r19,r4
1000a44c:	2821883a 	mov	r16,r5
1000a450:	3800471e 	bne	r7,zero,1000a570 <__udivdi3+0x154>
1000a454:	3025883a 	mov	r18,r6
1000a458:	2023883a 	mov	r17,r4
1000a45c:	2980592e 	bgeu	r5,r6,1000a5c4 <__udivdi3+0x1a8>
1000a460:	00bfffd4 	movui	r2,65535
1000a464:	2829883a 	mov	r20,r5
1000a468:	1180b236 	bltu	r2,r6,1000a734 <__udivdi3+0x318>
1000a46c:	00803fc4 	movi	r2,255
1000a470:	1181622e 	bgeu	r2,r6,1000a9fc <__udivdi3+0x5e0>
1000a474:	00800204 	movi	r2,8
1000a478:	1007883a 	mov	r3,r2
1000a47c:	3084d83a 	srl	r2,r6,r2
1000a480:	01040074 	movhi	r4,4097
1000a484:	2100d504 	addi	r4,r4,852
1000a488:	2085883a 	add	r2,r4,r2
1000a48c:	11000003 	ldbu	r4,0(r2)
1000a490:	20c9883a 	add	r4,r4,r3
1000a494:	00c00804 	movi	r3,32
1000a498:	1907c83a 	sub	r3,r3,r4
1000a49c:	18000526 	beq	r3,zero,1000a4b4 <__udivdi3+0x98>
1000a4a0:	80e0983a 	sll	r16,r16,r3
1000a4a4:	9908d83a 	srl	r4,r19,r4
1000a4a8:	30e4983a 	sll	r18,r6,r3
1000a4ac:	98e2983a 	sll	r17,r19,r3
1000a4b0:	8128b03a 	or	r20,r16,r4
1000a4b4:	902ad43a 	srli	r21,r18,16
1000a4b8:	a009883a 	mov	r4,r20
1000a4bc:	95bfffcc 	andi	r22,r18,65535
1000a4c0:	a80b883a 	mov	r5,r21
1000a4c4:	00010340 	call	10001034 <__umodsi3>
1000a4c8:	a009883a 	mov	r4,r20
1000a4cc:	a80b883a 	mov	r5,r21
1000a4d0:	102f883a 	mov	r23,r2
1000a4d4:	000102c0 	call	1000102c <__udivsi3>
1000a4d8:	1009883a 	mov	r4,r2
1000a4dc:	b00b883a 	mov	r5,r22
1000a4e0:	1021883a 	mov	r16,r2
1000a4e4:	000103c0 	call	1000103c <__mulsi3>
1000a4e8:	b82e943a 	slli	r23,r23,16
1000a4ec:	8808d43a 	srli	r4,r17,16
1000a4f0:	b906b03a 	or	r3,r23,r4
1000a4f4:	1880052e 	bgeu	r3,r2,1000a50c <__udivdi3+0xf0>
1000a4f8:	1c87883a 	add	r3,r3,r18
1000a4fc:	813fffc4 	addi	r4,r16,-1
1000a500:	1c800136 	bltu	r3,r18,1000a508 <__udivdi3+0xec>
1000a504:	18815236 	bltu	r3,r2,1000aa50 <__udivdi3+0x634>
1000a508:	2021883a 	mov	r16,r4
1000a50c:	18a7c83a 	sub	r19,r3,r2
1000a510:	9809883a 	mov	r4,r19
1000a514:	a80b883a 	mov	r5,r21
1000a518:	00010340 	call	10001034 <__umodsi3>
1000a51c:	1029883a 	mov	r20,r2
1000a520:	9809883a 	mov	r4,r19
1000a524:	a80b883a 	mov	r5,r21
1000a528:	a028943a 	slli	r20,r20,16
1000a52c:	000102c0 	call	1000102c <__udivsi3>
1000a530:	1009883a 	mov	r4,r2
1000a534:	b00b883a 	mov	r5,r22
1000a538:	8c7fffcc 	andi	r17,r17,65535
1000a53c:	1027883a 	mov	r19,r2
1000a540:	a462b03a 	or	r17,r20,r17
1000a544:	000103c0 	call	1000103c <__mulsi3>
1000a548:	8880052e 	bgeu	r17,r2,1000a560 <__udivdi3+0x144>
1000a54c:	8ca3883a 	add	r17,r17,r18
1000a550:	98ffffc4 	addi	r3,r19,-1
1000a554:	8c811036 	bltu	r17,r18,1000a998 <__udivdi3+0x57c>
1000a558:	88810f2e 	bgeu	r17,r2,1000a998 <__udivdi3+0x57c>
1000a55c:	9cffff84 	addi	r19,r19,-2
1000a560:	8020943a 	slli	r16,r16,16
1000a564:	0007883a 	mov	r3,zero
1000a568:	9c04b03a 	or	r2,r19,r16
1000a56c:	00006006 	br	1000a6f0 <__udivdi3+0x2d4>
1000a570:	29c05d36 	bltu	r5,r7,1000a6e8 <__udivdi3+0x2cc>
1000a574:	00bfffd4 	movui	r2,65535
1000a578:	11c0692e 	bgeu	r2,r7,1000a720 <__udivdi3+0x304>
1000a57c:	00804034 	movhi	r2,256
1000a580:	10bfffc4 	addi	r2,r2,-1
1000a584:	11c10e2e 	bgeu	r2,r7,1000a9c0 <__udivdi3+0x5a4>
1000a588:	01400604 	movi	r5,24
1000a58c:	2811883a 	mov	r8,r5
1000a590:	394ad83a 	srl	r5,r7,r5
1000a594:	00840074 	movhi	r2,4097
1000a598:	1080d504 	addi	r2,r2,852
1000a59c:	114b883a 	add	r5,r2,r5
1000a5a0:	29400003 	ldbu	r5,0(r5)
1000a5a4:	00c00804 	movi	r3,32
1000a5a8:	2a0b883a 	add	r5,r5,r8
1000a5ac:	196fc83a 	sub	r23,r3,r5
1000a5b0:	b8006b1e 	bne	r23,zero,1000a760 <__udivdi3+0x344>
1000a5b4:	3c011436 	bltu	r7,r16,1000aa08 <__udivdi3+0x5ec>
1000a5b8:	9985403a 	cmpgeu	r2,r19,r6
1000a5bc:	0007883a 	mov	r3,zero
1000a5c0:	00004b06 	br	1000a6f0 <__udivdi3+0x2d4>
1000a5c4:	3000041e 	bne	r6,zero,1000a5d8 <__udivdi3+0x1bc>
1000a5c8:	01000044 	movi	r4,1
1000a5cc:	000b883a 	mov	r5,zero
1000a5d0:	000102c0 	call	1000102c <__udivsi3>
1000a5d4:	1025883a 	mov	r18,r2
1000a5d8:	00bfffd4 	movui	r2,65535
1000a5dc:	14805b2e 	bgeu	r2,r18,1000a74c <__udivdi3+0x330>
1000a5e0:	00804034 	movhi	r2,256
1000a5e4:	10bfffc4 	addi	r2,r2,-1
1000a5e8:	1480fe2e 	bgeu	r2,r18,1000a9e4 <__udivdi3+0x5c8>
1000a5ec:	00800604 	movi	r2,24
1000a5f0:	1007883a 	mov	r3,r2
1000a5f4:	9084d83a 	srl	r2,r18,r2
1000a5f8:	01040074 	movhi	r4,4097
1000a5fc:	2100d504 	addi	r4,r4,852
1000a600:	2085883a 	add	r2,r4,r2
1000a604:	11800003 	ldbu	r6,0(r2)
1000a608:	01c00804 	movi	r7,32
1000a60c:	30c7883a 	add	r3,r6,r3
1000a610:	38cfc83a 	sub	r7,r7,r3
1000a614:	3800a71e 	bne	r7,zero,1000a8b4 <__udivdi3+0x498>
1000a618:	9028d43a 	srli	r20,r18,16
1000a61c:	84a1c83a 	sub	r16,r16,r18
1000a620:	957fffcc 	andi	r21,r18,65535
1000a624:	00c00044 	movi	r3,1
1000a628:	8009883a 	mov	r4,r16
1000a62c:	a00b883a 	mov	r5,r20
1000a630:	d8c00015 	stw	r3,0(sp)
1000a634:	00010340 	call	10001034 <__umodsi3>
1000a638:	8009883a 	mov	r4,r16
1000a63c:	a00b883a 	mov	r5,r20
1000a640:	102d883a 	mov	r22,r2
1000a644:	000102c0 	call	1000102c <__udivsi3>
1000a648:	1009883a 	mov	r4,r2
1000a64c:	a80b883a 	mov	r5,r21
1000a650:	1021883a 	mov	r16,r2
1000a654:	000103c0 	call	1000103c <__mulsi3>
1000a658:	b02c943a 	slli	r22,r22,16
1000a65c:	880ed43a 	srli	r7,r17,16
1000a660:	d8c00017 	ldw	r3,0(sp)
1000a664:	b1ccb03a 	or	r6,r22,r7
1000a668:	3080052e 	bgeu	r6,r2,1000a680 <__udivdi3+0x264>
1000a66c:	348d883a 	add	r6,r6,r18
1000a670:	813fffc4 	addi	r4,r16,-1
1000a674:	34800136 	bltu	r6,r18,1000a67c <__udivdi3+0x260>
1000a678:	3080f236 	bltu	r6,r2,1000aa44 <__udivdi3+0x628>
1000a67c:	2021883a 	mov	r16,r4
1000a680:	30a7c83a 	sub	r19,r6,r2
1000a684:	9809883a 	mov	r4,r19
1000a688:	a00b883a 	mov	r5,r20
1000a68c:	d8c00015 	stw	r3,0(sp)
1000a690:	00010340 	call	10001034 <__umodsi3>
1000a694:	102d883a 	mov	r22,r2
1000a698:	9809883a 	mov	r4,r19
1000a69c:	a00b883a 	mov	r5,r20
1000a6a0:	b02c943a 	slli	r22,r22,16
1000a6a4:	000102c0 	call	1000102c <__udivsi3>
1000a6a8:	1009883a 	mov	r4,r2
1000a6ac:	a80b883a 	mov	r5,r21
1000a6b0:	8c7fffcc 	andi	r17,r17,65535
1000a6b4:	1027883a 	mov	r19,r2
1000a6b8:	b462b03a 	or	r17,r22,r17
1000a6bc:	000103c0 	call	1000103c <__mulsi3>
1000a6c0:	d8c00017 	ldw	r3,0(sp)
1000a6c4:	8880052e 	bgeu	r17,r2,1000a6dc <__udivdi3+0x2c0>
1000a6c8:	8ca3883a 	add	r17,r17,r18
1000a6cc:	993fffc4 	addi	r4,r19,-1
1000a6d0:	8c80af36 	bltu	r17,r18,1000a990 <__udivdi3+0x574>
1000a6d4:	8880ae2e 	bgeu	r17,r2,1000a990 <__udivdi3+0x574>
1000a6d8:	9cffff84 	addi	r19,r19,-2
1000a6dc:	8020943a 	slli	r16,r16,16
1000a6e0:	9c04b03a 	or	r2,r19,r16
1000a6e4:	00000206 	br	1000a6f0 <__udivdi3+0x2d4>
1000a6e8:	0007883a 	mov	r3,zero
1000a6ec:	0005883a 	mov	r2,zero
1000a6f0:	dfc00a17 	ldw	ra,40(sp)
1000a6f4:	df000917 	ldw	fp,36(sp)
1000a6f8:	ddc00817 	ldw	r23,32(sp)
1000a6fc:	dd800717 	ldw	r22,28(sp)
1000a700:	dd400617 	ldw	r21,24(sp)
1000a704:	dd000517 	ldw	r20,20(sp)
1000a708:	dcc00417 	ldw	r19,16(sp)
1000a70c:	dc800317 	ldw	r18,12(sp)
1000a710:	dc400217 	ldw	r17,8(sp)
1000a714:	dc000117 	ldw	r16,4(sp)
1000a718:	dec00b04 	addi	sp,sp,44
1000a71c:	f800283a 	ret
1000a720:	00803fc4 	movi	r2,255
1000a724:	11c0a92e 	bgeu	r2,r7,1000a9cc <__udivdi3+0x5b0>
1000a728:	01400204 	movi	r5,8
1000a72c:	2811883a 	mov	r8,r5
1000a730:	003f9706 	br	1000a590 <__alt_data_end+0xf800a590>
1000a734:	00804034 	movhi	r2,256
1000a738:	10bfffc4 	addi	r2,r2,-1
1000a73c:	1180a62e 	bgeu	r2,r6,1000a9d8 <__udivdi3+0x5bc>
1000a740:	00800604 	movi	r2,24
1000a744:	1007883a 	mov	r3,r2
1000a748:	003f4c06 	br	1000a47c <__alt_data_end+0xf800a47c>
1000a74c:	00803fc4 	movi	r2,255
1000a750:	1480a72e 	bgeu	r2,r18,1000a9f0 <__udivdi3+0x5d4>
1000a754:	00800204 	movi	r2,8
1000a758:	1007883a 	mov	r3,r2
1000a75c:	003fa506 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000a760:	3178d83a 	srl	fp,r6,r5
1000a764:	3dce983a 	sll	r7,r7,r23
1000a768:	8168d83a 	srl	r20,r16,r5
1000a76c:	9950d83a 	srl	r8,r19,r5
1000a770:	3f38b03a 	or	fp,r7,fp
1000a774:	e024d43a 	srli	r18,fp,16
1000a778:	85e0983a 	sll	r16,r16,r23
1000a77c:	a009883a 	mov	r4,r20
1000a780:	900b883a 	mov	r5,r18
1000a784:	8220b03a 	or	r16,r16,r8
1000a788:	35ea983a 	sll	r21,r6,r23
1000a78c:	00010340 	call	10001034 <__umodsi3>
1000a790:	a009883a 	mov	r4,r20
1000a794:	900b883a 	mov	r5,r18
1000a798:	1023883a 	mov	r17,r2
1000a79c:	e5bfffcc 	andi	r22,fp,65535
1000a7a0:	000102c0 	call	1000102c <__udivsi3>
1000a7a4:	1009883a 	mov	r4,r2
1000a7a8:	b00b883a 	mov	r5,r22
1000a7ac:	1029883a 	mov	r20,r2
1000a7b0:	000103c0 	call	1000103c <__mulsi3>
1000a7b4:	8806943a 	slli	r3,r17,16
1000a7b8:	8014d43a 	srli	r10,r16,16
1000a7bc:	1a92b03a 	or	r9,r3,r10
1000a7c0:	4880042e 	bgeu	r9,r2,1000a7d4 <__udivdi3+0x3b8>
1000a7c4:	4f13883a 	add	r9,r9,fp
1000a7c8:	a0ffffc4 	addi	r3,r20,-1
1000a7cc:	4f00952e 	bgeu	r9,fp,1000aa24 <__udivdi3+0x608>
1000a7d0:	1829883a 	mov	r20,r3
1000a7d4:	48a3c83a 	sub	r17,r9,r2
1000a7d8:	8809883a 	mov	r4,r17
1000a7dc:	900b883a 	mov	r5,r18
1000a7e0:	00010340 	call	10001034 <__umodsi3>
1000a7e4:	8809883a 	mov	r4,r17
1000a7e8:	900b883a 	mov	r5,r18
1000a7ec:	d8800015 	stw	r2,0(sp)
1000a7f0:	000102c0 	call	1000102c <__udivsi3>
1000a7f4:	1009883a 	mov	r4,r2
1000a7f8:	b00b883a 	mov	r5,r22
1000a7fc:	1023883a 	mov	r17,r2
1000a800:	000103c0 	call	1000103c <__mulsi3>
1000a804:	d8c00017 	ldw	r3,0(sp)
1000a808:	823fffcc 	andi	r8,r16,65535
1000a80c:	1806943a 	slli	r3,r3,16
1000a810:	1a20b03a 	or	r16,r3,r8
1000a814:	8080042e 	bgeu	r16,r2,1000a828 <__udivdi3+0x40c>
1000a818:	8721883a 	add	r16,r16,fp
1000a81c:	88ffffc4 	addi	r3,r17,-1
1000a820:	87007c2e 	bgeu	r16,fp,1000aa14 <__udivdi3+0x5f8>
1000a824:	1823883a 	mov	r17,r3
1000a828:	a028943a 	slli	r20,r20,16
1000a82c:	acbfffcc 	andi	r18,r21,65535
1000a830:	900b883a 	mov	r5,r18
1000a834:	8d28b03a 	or	r20,r17,r20
1000a838:	a022d43a 	srli	r17,r20,16
1000a83c:	a5bfffcc 	andi	r22,r20,65535
1000a840:	b009883a 	mov	r4,r22
1000a844:	a82ad43a 	srli	r21,r21,16
1000a848:	80a1c83a 	sub	r16,r16,r2
1000a84c:	000103c0 	call	1000103c <__mulsi3>
1000a850:	8809883a 	mov	r4,r17
1000a854:	900b883a 	mov	r5,r18
1000a858:	1039883a 	mov	fp,r2
1000a85c:	000103c0 	call	1000103c <__mulsi3>
1000a860:	8809883a 	mov	r4,r17
1000a864:	a80b883a 	mov	r5,r21
1000a868:	1025883a 	mov	r18,r2
1000a86c:	000103c0 	call	1000103c <__mulsi3>
1000a870:	b009883a 	mov	r4,r22
1000a874:	a80b883a 	mov	r5,r21
1000a878:	1023883a 	mov	r17,r2
1000a87c:	000103c0 	call	1000103c <__mulsi3>
1000a880:	e006d43a 	srli	r3,fp,16
1000a884:	9085883a 	add	r2,r18,r2
1000a888:	10c7883a 	add	r3,r2,r3
1000a88c:	1c80022e 	bgeu	r3,r18,1000a898 <__udivdi3+0x47c>
1000a890:	00800074 	movhi	r2,1
1000a894:	88a3883a 	add	r17,r17,r2
1000a898:	1808d43a 	srli	r4,r3,16
1000a89c:	8909883a 	add	r4,r17,r4
1000a8a0:	81004436 	bltu	r16,r4,1000a9b4 <__udivdi3+0x598>
1000a8a4:	81003e26 	beq	r16,r4,1000a9a0 <__udivdi3+0x584>
1000a8a8:	a005883a 	mov	r2,r20
1000a8ac:	0007883a 	mov	r3,zero
1000a8b0:	003f8f06 	br	1000a6f0 <__alt_data_end+0xf800a6f0>
1000a8b4:	91e4983a 	sll	r18,r18,r7
1000a8b8:	80eed83a 	srl	r23,r16,r3
1000a8bc:	81cc983a 	sll	r6,r16,r7
1000a8c0:	9028d43a 	srli	r20,r18,16
1000a8c4:	98c6d83a 	srl	r3,r19,r3
1000a8c8:	b809883a 	mov	r4,r23
1000a8cc:	a00b883a 	mov	r5,r20
1000a8d0:	30ecb03a 	or	r22,r6,r3
1000a8d4:	99e2983a 	sll	r17,r19,r7
1000a8d8:	00010340 	call	10001034 <__umodsi3>
1000a8dc:	b809883a 	mov	r4,r23
1000a8e0:	a00b883a 	mov	r5,r20
1000a8e4:	1021883a 	mov	r16,r2
1000a8e8:	957fffcc 	andi	r21,r18,65535
1000a8ec:	000102c0 	call	1000102c <__udivsi3>
1000a8f0:	a80b883a 	mov	r5,r21
1000a8f4:	1009883a 	mov	r4,r2
1000a8f8:	102f883a 	mov	r23,r2
1000a8fc:	000103c0 	call	1000103c <__mulsi3>
1000a900:	8020943a 	slli	r16,r16,16
1000a904:	b00ad43a 	srli	r5,r22,16
1000a908:	814cb03a 	or	r6,r16,r5
1000a90c:	3080062e 	bgeu	r6,r2,1000a928 <__udivdi3+0x50c>
1000a910:	348d883a 	add	r6,r6,r18
1000a914:	b8ffffc4 	addi	r3,r23,-1
1000a918:	34804836 	bltu	r6,r18,1000aa3c <__udivdi3+0x620>
1000a91c:	3080472e 	bgeu	r6,r2,1000aa3c <__udivdi3+0x620>
1000a920:	bdffff84 	addi	r23,r23,-2
1000a924:	348d883a 	add	r6,r6,r18
1000a928:	30a7c83a 	sub	r19,r6,r2
1000a92c:	9809883a 	mov	r4,r19
1000a930:	a00b883a 	mov	r5,r20
1000a934:	00010340 	call	10001034 <__umodsi3>
1000a938:	9809883a 	mov	r4,r19
1000a93c:	a00b883a 	mov	r5,r20
1000a940:	1039883a 	mov	fp,r2
1000a944:	000102c0 	call	1000102c <__udivsi3>
1000a948:	1009883a 	mov	r4,r2
1000a94c:	a80b883a 	mov	r5,r21
1000a950:	e038943a 	slli	fp,fp,16
1000a954:	1027883a 	mov	r19,r2
1000a958:	000103c0 	call	1000103c <__mulsi3>
1000a95c:	b1bfffcc 	andi	r6,r22,65535
1000a960:	e18cb03a 	or	r6,fp,r6
1000a964:	3080062e 	bgeu	r6,r2,1000a980 <__udivdi3+0x564>
1000a968:	348d883a 	add	r6,r6,r18
1000a96c:	98ffffc4 	addi	r3,r19,-1
1000a970:	34803036 	bltu	r6,r18,1000aa34 <__udivdi3+0x618>
1000a974:	30802f2e 	bgeu	r6,r2,1000aa34 <__udivdi3+0x618>
1000a978:	9cffff84 	addi	r19,r19,-2
1000a97c:	348d883a 	add	r6,r6,r18
1000a980:	b82e943a 	slli	r23,r23,16
1000a984:	30a1c83a 	sub	r16,r6,r2
1000a988:	9dc6b03a 	or	r3,r19,r23
1000a98c:	003f2606 	br	1000a628 <__alt_data_end+0xf800a628>
1000a990:	2027883a 	mov	r19,r4
1000a994:	003f5106 	br	1000a6dc <__alt_data_end+0xf800a6dc>
1000a998:	1827883a 	mov	r19,r3
1000a99c:	003ef006 	br	1000a560 <__alt_data_end+0xf800a560>
1000a9a0:	1808943a 	slli	r4,r3,16
1000a9a4:	9dc6983a 	sll	r3,r19,r23
1000a9a8:	e73fffcc 	andi	fp,fp,65535
1000a9ac:	2709883a 	add	r4,r4,fp
1000a9b0:	193fbd2e 	bgeu	r3,r4,1000a8a8 <__alt_data_end+0xf800a8a8>
1000a9b4:	a0bfffc4 	addi	r2,r20,-1
1000a9b8:	0007883a 	mov	r3,zero
1000a9bc:	003f4c06 	br	1000a6f0 <__alt_data_end+0xf800a6f0>
1000a9c0:	01400404 	movi	r5,16
1000a9c4:	2811883a 	mov	r8,r5
1000a9c8:	003ef106 	br	1000a590 <__alt_data_end+0xf800a590>
1000a9cc:	000b883a 	mov	r5,zero
1000a9d0:	0011883a 	mov	r8,zero
1000a9d4:	003eee06 	br	1000a590 <__alt_data_end+0xf800a590>
1000a9d8:	00800404 	movi	r2,16
1000a9dc:	1007883a 	mov	r3,r2
1000a9e0:	003ea606 	br	1000a47c <__alt_data_end+0xf800a47c>
1000a9e4:	00800404 	movi	r2,16
1000a9e8:	1007883a 	mov	r3,r2
1000a9ec:	003f0106 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000a9f0:	0005883a 	mov	r2,zero
1000a9f4:	0007883a 	mov	r3,zero
1000a9f8:	003efe06 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000a9fc:	0005883a 	mov	r2,zero
1000aa00:	0007883a 	mov	r3,zero
1000aa04:	003e9d06 	br	1000a47c <__alt_data_end+0xf800a47c>
1000aa08:	0007883a 	mov	r3,zero
1000aa0c:	00800044 	movi	r2,1
1000aa10:	003f3706 	br	1000a6f0 <__alt_data_end+0xf800a6f0>
1000aa14:	80bf832e 	bgeu	r16,r2,1000a824 <__alt_data_end+0xf800a824>
1000aa18:	8c7fff84 	addi	r17,r17,-2
1000aa1c:	8721883a 	add	r16,r16,fp
1000aa20:	003f8106 	br	1000a828 <__alt_data_end+0xf800a828>
1000aa24:	48bf6a2e 	bgeu	r9,r2,1000a7d0 <__alt_data_end+0xf800a7d0>
1000aa28:	a53fff84 	addi	r20,r20,-2
1000aa2c:	4f13883a 	add	r9,r9,fp
1000aa30:	003f6806 	br	1000a7d4 <__alt_data_end+0xf800a7d4>
1000aa34:	1827883a 	mov	r19,r3
1000aa38:	003fd106 	br	1000a980 <__alt_data_end+0xf800a980>
1000aa3c:	182f883a 	mov	r23,r3
1000aa40:	003fb906 	br	1000a928 <__alt_data_end+0xf800a928>
1000aa44:	843fff84 	addi	r16,r16,-2
1000aa48:	348d883a 	add	r6,r6,r18
1000aa4c:	003f0c06 	br	1000a680 <__alt_data_end+0xf800a680>
1000aa50:	843fff84 	addi	r16,r16,-2
1000aa54:	1c87883a 	add	r3,r3,r18
1000aa58:	003eac06 	br	1000a50c <__alt_data_end+0xf800a50c>

1000aa5c <__umoddi3>:
1000aa5c:	defff404 	addi	sp,sp,-48
1000aa60:	dd800815 	stw	r22,32(sp)
1000aa64:	dc400315 	stw	r17,12(sp)
1000aa68:	dc000215 	stw	r16,8(sp)
1000aa6c:	dfc00b15 	stw	ra,44(sp)
1000aa70:	df000a15 	stw	fp,40(sp)
1000aa74:	ddc00915 	stw	r23,36(sp)
1000aa78:	dd400715 	stw	r21,28(sp)
1000aa7c:	dd000615 	stw	r20,24(sp)
1000aa80:	dcc00515 	stw	r19,20(sp)
1000aa84:	dc800415 	stw	r18,16(sp)
1000aa88:	2021883a 	mov	r16,r4
1000aa8c:	2823883a 	mov	r17,r5
1000aa90:	282d883a 	mov	r22,r5
1000aa94:	38003c1e 	bne	r7,zero,1000ab88 <__umoddi3+0x12c>
1000aa98:	3027883a 	mov	r19,r6
1000aa9c:	2029883a 	mov	r20,r4
1000aaa0:	2980522e 	bgeu	r5,r6,1000abec <__umoddi3+0x190>
1000aaa4:	00bfffd4 	movui	r2,65535
1000aaa8:	1180a436 	bltu	r2,r6,1000ad3c <__umoddi3+0x2e0>
1000aaac:	00803fc4 	movi	r2,255
1000aab0:	11815e2e 	bgeu	r2,r6,1000b02c <__umoddi3+0x5d0>
1000aab4:	01400204 	movi	r5,8
1000aab8:	2805883a 	mov	r2,r5
1000aabc:	314ad83a 	srl	r5,r6,r5
1000aac0:	00c40074 	movhi	r3,4097
1000aac4:	18c0d504 	addi	r3,r3,852
1000aac8:	194b883a 	add	r5,r3,r5
1000aacc:	29000003 	ldbu	r4,0(r5)
1000aad0:	2089883a 	add	r4,r4,r2
1000aad4:	00800804 	movi	r2,32
1000aad8:	1105c83a 	sub	r2,r2,r4
1000aadc:	10010c26 	beq	r2,zero,1000af10 <__umoddi3+0x4b4>
1000aae0:	88a2983a 	sll	r17,r17,r2
1000aae4:	8108d83a 	srl	r4,r16,r4
1000aae8:	30a6983a 	sll	r19,r6,r2
1000aaec:	80a8983a 	sll	r20,r16,r2
1000aaf0:	1025883a 	mov	r18,r2
1000aaf4:	892cb03a 	or	r22,r17,r4
1000aaf8:	9822d43a 	srli	r17,r19,16
1000aafc:	b009883a 	mov	r4,r22
1000ab00:	9d7fffcc 	andi	r21,r19,65535
1000ab04:	880b883a 	mov	r5,r17
1000ab08:	00010340 	call	10001034 <__umodsi3>
1000ab0c:	b009883a 	mov	r4,r22
1000ab10:	880b883a 	mov	r5,r17
1000ab14:	102f883a 	mov	r23,r2
1000ab18:	000102c0 	call	1000102c <__udivsi3>
1000ab1c:	1009883a 	mov	r4,r2
1000ab20:	a80b883a 	mov	r5,r21
1000ab24:	000103c0 	call	1000103c <__mulsi3>
1000ab28:	b82e943a 	slli	r23,r23,16
1000ab2c:	a008d43a 	srli	r4,r20,16
1000ab30:	b906b03a 	or	r3,r23,r4
1000ab34:	1880042e 	bgeu	r3,r2,1000ab48 <__umoddi3+0xec>
1000ab38:	1cc7883a 	add	r3,r3,r19
1000ab3c:	1cc00236 	bltu	r3,r19,1000ab48 <__umoddi3+0xec>
1000ab40:	1880012e 	bgeu	r3,r2,1000ab48 <__umoddi3+0xec>
1000ab44:	1cc7883a 	add	r3,r3,r19
1000ab48:	18a1c83a 	sub	r16,r3,r2
1000ab4c:	8009883a 	mov	r4,r16
1000ab50:	880b883a 	mov	r5,r17
1000ab54:	00010340 	call	10001034 <__umodsi3>
1000ab58:	8009883a 	mov	r4,r16
1000ab5c:	880b883a 	mov	r5,r17
1000ab60:	102d883a 	mov	r22,r2
1000ab64:	000102c0 	call	1000102c <__udivsi3>
1000ab68:	1009883a 	mov	r4,r2
1000ab6c:	a80b883a 	mov	r5,r21
1000ab70:	b02c943a 	slli	r22,r22,16
1000ab74:	000103c0 	call	1000103c <__mulsi3>
1000ab78:	a13fffcc 	andi	r4,r20,65535
1000ab7c:	b106b03a 	or	r3,r22,r4
1000ab80:	1880572e 	bgeu	r3,r2,1000ace0 <__umoddi3+0x284>
1000ab84:	00005206 	br	1000acd0 <__umoddi3+0x274>
1000ab88:	29c05936 	bltu	r5,r7,1000acf0 <__umoddi3+0x294>
1000ab8c:	00bfffd4 	movui	r2,65535
1000ab90:	11c0652e 	bgeu	r2,r7,1000ad28 <__umoddi3+0x2cc>
1000ab94:	00804034 	movhi	r2,256
1000ab98:	10bfffc4 	addi	r2,r2,-1
1000ab9c:	11c1172e 	bgeu	r2,r7,1000affc <__umoddi3+0x5a0>
1000aba0:	01400604 	movi	r5,24
1000aba4:	282b883a 	mov	r21,r5
1000aba8:	394ad83a 	srl	r5,r7,r5
1000abac:	00c40074 	movhi	r3,4097
1000abb0:	18c0d504 	addi	r3,r3,852
1000abb4:	194b883a 	add	r5,r3,r5
1000abb8:	28800003 	ldbu	r2,0(r5)
1000abbc:	00c00804 	movi	r3,32
1000abc0:	156b883a 	add	r21,r2,r21
1000abc4:	1d69c83a 	sub	r20,r3,r21
1000abc8:	a000671e 	bne	r20,zero,1000ad68 <__umoddi3+0x30c>
1000abcc:	3c400136 	bltu	r7,r17,1000abd4 <__umoddi3+0x178>
1000abd0:	81812336 	bltu	r16,r6,1000b060 <__umoddi3+0x604>
1000abd4:	8185c83a 	sub	r2,r16,r6
1000abd8:	89e3c83a 	sub	r17,r17,r7
1000abdc:	8087803a 	cmpltu	r3,r16,r2
1000abe0:	88edc83a 	sub	r22,r17,r3
1000abe4:	b007883a 	mov	r3,r22
1000abe8:	00004306 	br	1000acf8 <__umoddi3+0x29c>
1000abec:	3000041e 	bne	r6,zero,1000ac00 <__umoddi3+0x1a4>
1000abf0:	01000044 	movi	r4,1
1000abf4:	000b883a 	mov	r5,zero
1000abf8:	000102c0 	call	1000102c <__udivsi3>
1000abfc:	1027883a 	mov	r19,r2
1000ac00:	00bfffd4 	movui	r2,65535
1000ac04:	14c0532e 	bgeu	r2,r19,1000ad54 <__umoddi3+0x2f8>
1000ac08:	00804034 	movhi	r2,256
1000ac0c:	10bfffc4 	addi	r2,r2,-1
1000ac10:	14c1032e 	bgeu	r2,r19,1000b020 <__umoddi3+0x5c4>
1000ac14:	00800604 	movi	r2,24
1000ac18:	1007883a 	mov	r3,r2
1000ac1c:	9884d83a 	srl	r2,r19,r2
1000ac20:	01040074 	movhi	r4,4097
1000ac24:	2100d504 	addi	r4,r4,852
1000ac28:	2085883a 	add	r2,r4,r2
1000ac2c:	11000003 	ldbu	r4,0(r2)
1000ac30:	00800804 	movi	r2,32
1000ac34:	20c7883a 	add	r3,r4,r3
1000ac38:	10c5c83a 	sub	r2,r2,r3
1000ac3c:	1000b61e 	bne	r2,zero,1000af18 <__umoddi3+0x4bc>
1000ac40:	982ad43a 	srli	r21,r19,16
1000ac44:	8ce3c83a 	sub	r17,r17,r19
1000ac48:	9dbfffcc 	andi	r22,r19,65535
1000ac4c:	0025883a 	mov	r18,zero
1000ac50:	8809883a 	mov	r4,r17
1000ac54:	a80b883a 	mov	r5,r21
1000ac58:	00010340 	call	10001034 <__umodsi3>
1000ac5c:	8809883a 	mov	r4,r17
1000ac60:	a80b883a 	mov	r5,r21
1000ac64:	102f883a 	mov	r23,r2
1000ac68:	000102c0 	call	1000102c <__udivsi3>
1000ac6c:	1009883a 	mov	r4,r2
1000ac70:	b00b883a 	mov	r5,r22
1000ac74:	000103c0 	call	1000103c <__mulsi3>
1000ac78:	b82e943a 	slli	r23,r23,16
1000ac7c:	a008d43a 	srli	r4,r20,16
1000ac80:	b906b03a 	or	r3,r23,r4
1000ac84:	1880032e 	bgeu	r3,r2,1000ac94 <__umoddi3+0x238>
1000ac88:	1cc7883a 	add	r3,r3,r19
1000ac8c:	1cc00136 	bltu	r3,r19,1000ac94 <__umoddi3+0x238>
1000ac90:	1880f136 	bltu	r3,r2,1000b058 <__umoddi3+0x5fc>
1000ac94:	18a1c83a 	sub	r16,r3,r2
1000ac98:	8009883a 	mov	r4,r16
1000ac9c:	a80b883a 	mov	r5,r21
1000aca0:	00010340 	call	10001034 <__umodsi3>
1000aca4:	8009883a 	mov	r4,r16
1000aca8:	a80b883a 	mov	r5,r21
1000acac:	1023883a 	mov	r17,r2
1000acb0:	000102c0 	call	1000102c <__udivsi3>
1000acb4:	1009883a 	mov	r4,r2
1000acb8:	b00b883a 	mov	r5,r22
1000acbc:	8822943a 	slli	r17,r17,16
1000acc0:	000103c0 	call	1000103c <__mulsi3>
1000acc4:	a13fffcc 	andi	r4,r20,65535
1000acc8:	8906b03a 	or	r3,r17,r4
1000accc:	1880042e 	bgeu	r3,r2,1000ace0 <__umoddi3+0x284>
1000acd0:	1cc7883a 	add	r3,r3,r19
1000acd4:	1cc00236 	bltu	r3,r19,1000ace0 <__umoddi3+0x284>
1000acd8:	1880012e 	bgeu	r3,r2,1000ace0 <__umoddi3+0x284>
1000acdc:	1cc7883a 	add	r3,r3,r19
1000ace0:	1887c83a 	sub	r3,r3,r2
1000ace4:	1c84d83a 	srl	r2,r3,r18
1000ace8:	0007883a 	mov	r3,zero
1000acec:	00000206 	br	1000acf8 <__umoddi3+0x29c>
1000acf0:	2005883a 	mov	r2,r4
1000acf4:	2807883a 	mov	r3,r5
1000acf8:	dfc00b17 	ldw	ra,44(sp)
1000acfc:	df000a17 	ldw	fp,40(sp)
1000ad00:	ddc00917 	ldw	r23,36(sp)
1000ad04:	dd800817 	ldw	r22,32(sp)
1000ad08:	dd400717 	ldw	r21,28(sp)
1000ad0c:	dd000617 	ldw	r20,24(sp)
1000ad10:	dcc00517 	ldw	r19,20(sp)
1000ad14:	dc800417 	ldw	r18,16(sp)
1000ad18:	dc400317 	ldw	r17,12(sp)
1000ad1c:	dc000217 	ldw	r16,8(sp)
1000ad20:	dec00c04 	addi	sp,sp,48
1000ad24:	f800283a 	ret
1000ad28:	00803fc4 	movi	r2,255
1000ad2c:	11c0b02e 	bgeu	r2,r7,1000aff0 <__umoddi3+0x594>
1000ad30:	01400204 	movi	r5,8
1000ad34:	282b883a 	mov	r21,r5
1000ad38:	003f9b06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000ad3c:	00804034 	movhi	r2,256
1000ad40:	10bfffc4 	addi	r2,r2,-1
1000ad44:	1180b02e 	bgeu	r2,r6,1000b008 <__umoddi3+0x5ac>
1000ad48:	01400604 	movi	r5,24
1000ad4c:	2805883a 	mov	r2,r5
1000ad50:	003f5a06 	br	1000aabc <__alt_data_end+0xf800aabc>
1000ad54:	00803fc4 	movi	r2,255
1000ad58:	14c0ae2e 	bgeu	r2,r19,1000b014 <__umoddi3+0x5b8>
1000ad5c:	00800204 	movi	r2,8
1000ad60:	1007883a 	mov	r3,r2
1000ad64:	003fad06 	br	1000ac1c <__alt_data_end+0xf800ac1c>
1000ad68:	3d0a983a 	sll	r5,r7,r20
1000ad6c:	356cd83a 	srl	r22,r6,r21
1000ad70:	8d78d83a 	srl	fp,r17,r21
1000ad74:	8d10983a 	sll	r8,r17,r20
1000ad78:	2dacb03a 	or	r22,r5,r22
1000ad7c:	b02ed43a 	srli	r23,r22,16
1000ad80:	8564d83a 	srl	r18,r16,r21
1000ad84:	e009883a 	mov	r4,fp
1000ad88:	b80b883a 	mov	r5,r23
1000ad8c:	44a4b03a 	or	r18,r8,r18
1000ad90:	3526983a 	sll	r19,r6,r20
1000ad94:	00010340 	call	10001034 <__umodsi3>
1000ad98:	e009883a 	mov	r4,fp
1000ad9c:	b80b883a 	mov	r5,r23
1000ada0:	b47fffcc 	andi	r17,r22,65535
1000ada4:	d8800015 	stw	r2,0(sp)
1000ada8:	000102c0 	call	1000102c <__udivsi3>
1000adac:	1009883a 	mov	r4,r2
1000adb0:	880b883a 	mov	r5,r17
1000adb4:	1039883a 	mov	fp,r2
1000adb8:	000103c0 	call	1000103c <__mulsi3>
1000adbc:	d9800017 	ldw	r6,0(sp)
1000adc0:	9008d43a 	srli	r4,r18,16
1000adc4:	8520983a 	sll	r16,r16,r20
1000adc8:	300c943a 	slli	r6,r6,16
1000adcc:	3106b03a 	or	r3,r6,r4
1000add0:	1880042e 	bgeu	r3,r2,1000ade4 <__umoddi3+0x388>
1000add4:	1d87883a 	add	r3,r3,r22
1000add8:	e13fffc4 	addi	r4,fp,-1
1000addc:	1d809a2e 	bgeu	r3,r22,1000b048 <__umoddi3+0x5ec>
1000ade0:	2039883a 	mov	fp,r4
1000ade4:	1887c83a 	sub	r3,r3,r2
1000ade8:	1809883a 	mov	r4,r3
1000adec:	b80b883a 	mov	r5,r23
1000adf0:	d8c00115 	stw	r3,4(sp)
1000adf4:	00010340 	call	10001034 <__umodsi3>
1000adf8:	d8c00117 	ldw	r3,4(sp)
1000adfc:	b80b883a 	mov	r5,r23
1000ae00:	d8800015 	stw	r2,0(sp)
1000ae04:	1809883a 	mov	r4,r3
1000ae08:	000102c0 	call	1000102c <__udivsi3>
1000ae0c:	880b883a 	mov	r5,r17
1000ae10:	1009883a 	mov	r4,r2
1000ae14:	102f883a 	mov	r23,r2
1000ae18:	000103c0 	call	1000103c <__mulsi3>
1000ae1c:	d9800017 	ldw	r6,0(sp)
1000ae20:	947fffcc 	andi	r17,r18,65535
1000ae24:	300c943a 	slli	r6,r6,16
1000ae28:	3464b03a 	or	r18,r6,r17
1000ae2c:	9080042e 	bgeu	r18,r2,1000ae40 <__umoddi3+0x3e4>
1000ae30:	95a5883a 	add	r18,r18,r22
1000ae34:	b8ffffc4 	addi	r3,r23,-1
1000ae38:	95807f2e 	bgeu	r18,r22,1000b038 <__umoddi3+0x5dc>
1000ae3c:	182f883a 	mov	r23,r3
1000ae40:	e038943a 	slli	fp,fp,16
1000ae44:	980cd43a 	srli	r6,r19,16
1000ae48:	98ffffcc 	andi	r3,r19,65535
1000ae4c:	bf38b03a 	or	fp,r23,fp
1000ae50:	e02ed43a 	srli	r23,fp,16
1000ae54:	e73fffcc 	andi	fp,fp,65535
1000ae58:	180b883a 	mov	r5,r3
1000ae5c:	e009883a 	mov	r4,fp
1000ae60:	d9800015 	stw	r6,0(sp)
1000ae64:	d8c00115 	stw	r3,4(sp)
1000ae68:	90a5c83a 	sub	r18,r18,r2
1000ae6c:	000103c0 	call	1000103c <__mulsi3>
1000ae70:	d8c00117 	ldw	r3,4(sp)
1000ae74:	b809883a 	mov	r4,r23
1000ae78:	1023883a 	mov	r17,r2
1000ae7c:	180b883a 	mov	r5,r3
1000ae80:	000103c0 	call	1000103c <__mulsi3>
1000ae84:	d9800017 	ldw	r6,0(sp)
1000ae88:	b809883a 	mov	r4,r23
1000ae8c:	d8800115 	stw	r2,4(sp)
1000ae90:	300b883a 	mov	r5,r6
1000ae94:	302f883a 	mov	r23,r6
1000ae98:	000103c0 	call	1000103c <__mulsi3>
1000ae9c:	e009883a 	mov	r4,fp
1000aea0:	b80b883a 	mov	r5,r23
1000aea4:	d8800015 	stw	r2,0(sp)
1000aea8:	000103c0 	call	1000103c <__mulsi3>
1000aeac:	d8c00117 	ldw	r3,4(sp)
1000aeb0:	880cd43a 	srli	r6,r17,16
1000aeb4:	d9c00017 	ldw	r7,0(sp)
1000aeb8:	1885883a 	add	r2,r3,r2
1000aebc:	118d883a 	add	r6,r2,r6
1000aec0:	30c0022e 	bgeu	r6,r3,1000aecc <__umoddi3+0x470>
1000aec4:	00800074 	movhi	r2,1
1000aec8:	388f883a 	add	r7,r7,r2
1000aecc:	3006d43a 	srli	r3,r6,16
1000aed0:	300c943a 	slli	r6,r6,16
1000aed4:	8c7fffcc 	andi	r17,r17,65535
1000aed8:	38c7883a 	add	r3,r7,r3
1000aedc:	3463883a 	add	r17,r6,r17
1000aee0:	90c03d36 	bltu	r18,r3,1000afd8 <__umoddi3+0x57c>
1000aee4:	90c06026 	beq	r18,r3,1000b068 <__umoddi3+0x60c>
1000aee8:	90c9c83a 	sub	r4,r18,r3
1000aeec:	880f883a 	mov	r7,r17
1000aef0:	81cfc83a 	sub	r7,r16,r7
1000aef4:	81c7803a 	cmpltu	r3,r16,r7
1000aef8:	20c7c83a 	sub	r3,r4,r3
1000aefc:	1d44983a 	sll	r2,r3,r21
1000af00:	3d0ed83a 	srl	r7,r7,r20
1000af04:	1d06d83a 	srl	r3,r3,r20
1000af08:	11c4b03a 	or	r2,r2,r7
1000af0c:	003f7a06 	br	1000acf8 <__alt_data_end+0xf800acf8>
1000af10:	0025883a 	mov	r18,zero
1000af14:	003ef806 	br	1000aaf8 <__alt_data_end+0xf800aaf8>
1000af18:	98a6983a 	sll	r19,r19,r2
1000af1c:	88e8d83a 	srl	r20,r17,r3
1000af20:	80c6d83a 	srl	r3,r16,r3
1000af24:	982ad43a 	srli	r21,r19,16
1000af28:	88a2983a 	sll	r17,r17,r2
1000af2c:	a009883a 	mov	r4,r20
1000af30:	a80b883a 	mov	r5,r21
1000af34:	88eeb03a 	or	r23,r17,r3
1000af38:	1025883a 	mov	r18,r2
1000af3c:	00010340 	call	10001034 <__umodsi3>
1000af40:	a009883a 	mov	r4,r20
1000af44:	a80b883a 	mov	r5,r21
1000af48:	1023883a 	mov	r17,r2
1000af4c:	9dbfffcc 	andi	r22,r19,65535
1000af50:	000102c0 	call	1000102c <__udivsi3>
1000af54:	1009883a 	mov	r4,r2
1000af58:	b00b883a 	mov	r5,r22
1000af5c:	000103c0 	call	1000103c <__mulsi3>
1000af60:	8822943a 	slli	r17,r17,16
1000af64:	b808d43a 	srli	r4,r23,16
1000af68:	84a8983a 	sll	r20,r16,r18
1000af6c:	8906b03a 	or	r3,r17,r4
1000af70:	1880042e 	bgeu	r3,r2,1000af84 <__umoddi3+0x528>
1000af74:	1cc7883a 	add	r3,r3,r19
1000af78:	1cc00236 	bltu	r3,r19,1000af84 <__umoddi3+0x528>
1000af7c:	1880012e 	bgeu	r3,r2,1000af84 <__umoddi3+0x528>
1000af80:	1cc7883a 	add	r3,r3,r19
1000af84:	18a1c83a 	sub	r16,r3,r2
1000af88:	8009883a 	mov	r4,r16
1000af8c:	a80b883a 	mov	r5,r21
1000af90:	00010340 	call	10001034 <__umodsi3>
1000af94:	8009883a 	mov	r4,r16
1000af98:	a80b883a 	mov	r5,r21
1000af9c:	1039883a 	mov	fp,r2
1000afa0:	000102c0 	call	1000102c <__udivsi3>
1000afa4:	1009883a 	mov	r4,r2
1000afa8:	b00b883a 	mov	r5,r22
1000afac:	000103c0 	call	1000103c <__mulsi3>
1000afb0:	e006943a 	slli	r3,fp,16
1000afb4:	b93fffcc 	andi	r4,r23,65535
1000afb8:	1906b03a 	or	r3,r3,r4
1000afbc:	1880042e 	bgeu	r3,r2,1000afd0 <__umoddi3+0x574>
1000afc0:	1cc7883a 	add	r3,r3,r19
1000afc4:	1cc00236 	bltu	r3,r19,1000afd0 <__umoddi3+0x574>
1000afc8:	1880012e 	bgeu	r3,r2,1000afd0 <__umoddi3+0x574>
1000afcc:	1cc7883a 	add	r3,r3,r19
1000afd0:	18a3c83a 	sub	r17,r3,r2
1000afd4:	003f1e06 	br	1000ac50 <__alt_data_end+0xf800ac50>
1000afd8:	8ccfc83a 	sub	r7,r17,r19
1000afdc:	1d89c83a 	sub	r4,r3,r22
1000afe0:	89e3803a 	cmpltu	r17,r17,r7
1000afe4:	2463c83a 	sub	r17,r4,r17
1000afe8:	9449c83a 	sub	r4,r18,r17
1000afec:	003fc006 	br	1000aef0 <__alt_data_end+0xf800aef0>
1000aff0:	000b883a 	mov	r5,zero
1000aff4:	002b883a 	mov	r21,zero
1000aff8:	003eeb06 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000affc:	01400404 	movi	r5,16
1000b000:	282b883a 	mov	r21,r5
1000b004:	003ee806 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b008:	01400404 	movi	r5,16
1000b00c:	2805883a 	mov	r2,r5
1000b010:	003eaa06 	br	1000aabc <__alt_data_end+0xf800aabc>
1000b014:	0005883a 	mov	r2,zero
1000b018:	0007883a 	mov	r3,zero
1000b01c:	003eff06 	br	1000ac1c <__alt_data_end+0xf800ac1c>
1000b020:	00800404 	movi	r2,16
1000b024:	1007883a 	mov	r3,r2
1000b028:	003efc06 	br	1000ac1c <__alt_data_end+0xf800ac1c>
1000b02c:	000b883a 	mov	r5,zero
1000b030:	0005883a 	mov	r2,zero
1000b034:	003ea106 	br	1000aabc <__alt_data_end+0xf800aabc>
1000b038:	90bf802e 	bgeu	r18,r2,1000ae3c <__alt_data_end+0xf800ae3c>
1000b03c:	bdffff84 	addi	r23,r23,-2
1000b040:	95a5883a 	add	r18,r18,r22
1000b044:	003f7e06 	br	1000ae40 <__alt_data_end+0xf800ae40>
1000b048:	18bf652e 	bgeu	r3,r2,1000ade0 <__alt_data_end+0xf800ade0>
1000b04c:	e73fff84 	addi	fp,fp,-2
1000b050:	1d87883a 	add	r3,r3,r22
1000b054:	003f6306 	br	1000ade4 <__alt_data_end+0xf800ade4>
1000b058:	1cc7883a 	add	r3,r3,r19
1000b05c:	003f0d06 	br	1000ac94 <__alt_data_end+0xf800ac94>
1000b060:	8005883a 	mov	r2,r16
1000b064:	003edf06 	br	1000abe4 <__alt_data_end+0xf800abe4>
1000b068:	847fdb36 	bltu	r16,r17,1000afd8 <__alt_data_end+0xf800afd8>
1000b06c:	880f883a 	mov	r7,r17
1000b070:	0009883a 	mov	r4,zero
1000b074:	003f9e06 	br	1000aef0 <__alt_data_end+0xf800aef0>

1000b078 <__adddf3>:
1000b078:	02000434 	movhi	r8,16
1000b07c:	423fffc4 	addi	r8,r8,-1
1000b080:	defffb04 	addi	sp,sp,-20
1000b084:	2a12703a 	and	r9,r5,r8
1000b088:	2806d7fa 	srli	r3,r5,31
1000b08c:	3a10703a 	and	r8,r7,r8
1000b090:	3804d53a 	srli	r2,r7,20
1000b094:	3014d77a 	srli	r10,r6,29
1000b098:	dc000015 	stw	r16,0(sp)
1000b09c:	481290fa 	slli	r9,r9,3
1000b0a0:	2820d53a 	srli	r16,r5,20
1000b0a4:	401090fa 	slli	r8,r8,3
1000b0a8:	200ad77a 	srli	r5,r4,29
1000b0ac:	380ed7fa 	srli	r7,r7,31
1000b0b0:	dc800215 	stw	r18,8(sp)
1000b0b4:	dc400115 	stw	r17,4(sp)
1000b0b8:	dfc00415 	stw	ra,16(sp)
1000b0bc:	dcc00315 	stw	r19,12(sp)
1000b0c0:	1c803fcc 	andi	r18,r3,255
1000b0c4:	8401ffcc 	andi	r16,r16,2047
1000b0c8:	494ab03a 	or	r5,r9,r5
1000b0cc:	202290fa 	slli	r17,r4,3
1000b0d0:	1081ffcc 	andi	r2,r2,2047
1000b0d4:	4290b03a 	or	r8,r8,r10
1000b0d8:	300c90fa 	slli	r6,r6,3
1000b0dc:	91c07026 	beq	r18,r7,1000b2a0 <__adddf3+0x228>
1000b0e0:	8087c83a 	sub	r3,r16,r2
1000b0e4:	00c0b30e 	bge	zero,r3,1000b3b4 <__adddf3+0x33c>
1000b0e8:	10002a1e 	bne	r2,zero,1000b194 <__adddf3+0x11c>
1000b0ec:	4184b03a 	or	r2,r8,r6
1000b0f0:	1000991e 	bne	r2,zero,1000b358 <__adddf3+0x2e0>
1000b0f4:	888001cc 	andi	r2,r17,7
1000b0f8:	10005b26 	beq	r2,zero,1000b268 <__adddf3+0x1f0>
1000b0fc:	88c003cc 	andi	r3,r17,15
1000b100:	00800104 	movi	r2,4
1000b104:	18805826 	beq	r3,r2,1000b268 <__adddf3+0x1f0>
1000b108:	89800104 	addi	r6,r17,4
1000b10c:	3463803a 	cmpltu	r17,r6,r17
1000b110:	2c4b883a 	add	r5,r5,r17
1000b114:	2880202c 	andhi	r2,r5,128
1000b118:	9007883a 	mov	r3,r18
1000b11c:	3023883a 	mov	r17,r6
1000b120:	10005426 	beq	r2,zero,1000b274 <__adddf3+0x1fc>
1000b124:	84000044 	addi	r16,r16,1
1000b128:	0081ffc4 	movi	r2,2047
1000b12c:	8080c126 	beq	r16,r2,1000b434 <__adddf3+0x3bc>
1000b130:	013fe034 	movhi	r4,65408
1000b134:	213fffc4 	addi	r4,r4,-1
1000b138:	290a703a 	and	r5,r5,r4
1000b13c:	2804977a 	slli	r2,r5,29
1000b140:	280a927a 	slli	r5,r5,9
1000b144:	8822d0fa 	srli	r17,r17,3
1000b148:	8401ffcc 	andi	r16,r16,2047
1000b14c:	2808d33a 	srli	r4,r5,12
1000b150:	1444b03a 	or	r2,r2,r17
1000b154:	8401ffcc 	andi	r16,r16,2047
1000b158:	800a953a 	slli	r5,r16,20
1000b15c:	18c03fcc 	andi	r3,r3,255
1000b160:	04000434 	movhi	r16,16
1000b164:	180697fa 	slli	r3,r3,31
1000b168:	843fffc4 	addi	r16,r16,-1
1000b16c:	2420703a 	and	r16,r4,r16
1000b170:	8160b03a 	or	r16,r16,r5
1000b174:	80c6b03a 	or	r3,r16,r3
1000b178:	dfc00417 	ldw	ra,16(sp)
1000b17c:	dcc00317 	ldw	r19,12(sp)
1000b180:	dc800217 	ldw	r18,8(sp)
1000b184:	dc400117 	ldw	r17,4(sp)
1000b188:	dc000017 	ldw	r16,0(sp)
1000b18c:	dec00504 	addi	sp,sp,20
1000b190:	f800283a 	ret
1000b194:	0081ffc4 	movi	r2,2047
1000b198:	80bfd626 	beq	r16,r2,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b19c:	42002034 	orhi	r8,r8,128
1000b1a0:	00800e04 	movi	r2,56
1000b1a4:	10c0a616 	blt	r2,r3,1000b440 <__adddf3+0x3c8>
1000b1a8:	008007c4 	movi	r2,31
1000b1ac:	10c0c916 	blt	r2,r3,1000b4d4 <__adddf3+0x45c>
1000b1b0:	00800804 	movi	r2,32
1000b1b4:	10c5c83a 	sub	r2,r2,r3
1000b1b8:	408e983a 	sll	r7,r8,r2
1000b1bc:	30c8d83a 	srl	r4,r6,r3
1000b1c0:	3084983a 	sll	r2,r6,r2
1000b1c4:	40c6d83a 	srl	r3,r8,r3
1000b1c8:	390cb03a 	or	r6,r7,r4
1000b1cc:	1004c03a 	cmpne	r2,r2,zero
1000b1d0:	308cb03a 	or	r6,r6,r2
1000b1d4:	898dc83a 	sub	r6,r17,r6
1000b1d8:	89a3803a 	cmpltu	r17,r17,r6
1000b1dc:	28cbc83a 	sub	r5,r5,r3
1000b1e0:	2c4bc83a 	sub	r5,r5,r17
1000b1e4:	3023883a 	mov	r17,r6
1000b1e8:	2880202c 	andhi	r2,r5,128
1000b1ec:	10006d26 	beq	r2,zero,1000b3a4 <__adddf3+0x32c>
1000b1f0:	04c02034 	movhi	r19,128
1000b1f4:	9cffffc4 	addi	r19,r19,-1
1000b1f8:	2ce6703a 	and	r19,r5,r19
1000b1fc:	98007e26 	beq	r19,zero,1000b3f8 <__adddf3+0x380>
1000b200:	9809883a 	mov	r4,r19
1000b204:	000d8100 	call	1000d810 <__clzsi2>
1000b208:	10fffe04 	addi	r3,r2,-8
1000b20c:	010007c4 	movi	r4,31
1000b210:	20c07f16 	blt	r4,r3,1000b410 <__adddf3+0x398>
1000b214:	01400a04 	movi	r5,40
1000b218:	2885c83a 	sub	r2,r5,r2
1000b21c:	888ad83a 	srl	r5,r17,r2
1000b220:	98e6983a 	sll	r19,r19,r3
1000b224:	88e2983a 	sll	r17,r17,r3
1000b228:	2ce6b03a 	or	r19,r5,r19
1000b22c:	1c007c16 	blt	r3,r16,1000b420 <__adddf3+0x3a8>
1000b230:	1c21c83a 	sub	r16,r3,r16
1000b234:	81400044 	addi	r5,r16,1
1000b238:	00c007c4 	movi	r3,31
1000b23c:	19409816 	blt	r3,r5,1000b4a0 <__adddf3+0x428>
1000b240:	1c21c83a 	sub	r16,r3,r16
1000b244:	8c08983a 	sll	r4,r17,r16
1000b248:	8946d83a 	srl	r3,r17,r5
1000b24c:	9c20983a 	sll	r16,r19,r16
1000b250:	2008c03a 	cmpne	r4,r4,zero
1000b254:	994ad83a 	srl	r5,r19,r5
1000b258:	1c06b03a 	or	r3,r3,r16
1000b25c:	1922b03a 	or	r17,r3,r4
1000b260:	0021883a 	mov	r16,zero
1000b264:	003fa306 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b268:	2880202c 	andhi	r2,r5,128
1000b26c:	9007883a 	mov	r3,r18
1000b270:	103fac1e 	bne	r2,zero,1000b124 <__alt_data_end+0xf800b124>
1000b274:	2804977a 	slli	r2,r5,29
1000b278:	8822d0fa 	srli	r17,r17,3
1000b27c:	0101ffc4 	movi	r4,2047
1000b280:	280ad0fa 	srli	r5,r5,3
1000b284:	1444b03a 	or	r2,r2,r17
1000b288:	81002c26 	beq	r16,r4,1000b33c <__adddf3+0x2c4>
1000b28c:	8120703a 	and	r16,r16,r4
1000b290:	01000434 	movhi	r4,16
1000b294:	213fffc4 	addi	r4,r4,-1
1000b298:	2908703a 	and	r4,r5,r4
1000b29c:	003fad06 	br	1000b154 <__alt_data_end+0xf800b154>
1000b2a0:	8089c83a 	sub	r4,r16,r2
1000b2a4:	01006a0e 	bge	zero,r4,1000b450 <__adddf3+0x3d8>
1000b2a8:	10003326 	beq	r2,zero,1000b378 <__adddf3+0x300>
1000b2ac:	0081ffc4 	movi	r2,2047
1000b2b0:	80bf9026 	beq	r16,r2,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b2b4:	42002034 	orhi	r8,r8,128
1000b2b8:	00800e04 	movi	r2,56
1000b2bc:	1100b116 	blt	r2,r4,1000b584 <__adddf3+0x50c>
1000b2c0:	008007c4 	movi	r2,31
1000b2c4:	1100e216 	blt	r2,r4,1000b650 <__adddf3+0x5d8>
1000b2c8:	00800804 	movi	r2,32
1000b2cc:	1105c83a 	sub	r2,r2,r4
1000b2d0:	4092983a 	sll	r9,r8,r2
1000b2d4:	310ed83a 	srl	r7,r6,r4
1000b2d8:	3084983a 	sll	r2,r6,r2
1000b2dc:	4110d83a 	srl	r8,r8,r4
1000b2e0:	49ccb03a 	or	r6,r9,r7
1000b2e4:	1004c03a 	cmpne	r2,r2,zero
1000b2e8:	308cb03a 	or	r6,r6,r2
1000b2ec:	344d883a 	add	r6,r6,r17
1000b2f0:	3463803a 	cmpltu	r17,r6,r17
1000b2f4:	414b883a 	add	r5,r8,r5
1000b2f8:	2c4b883a 	add	r5,r5,r17
1000b2fc:	3023883a 	mov	r17,r6
1000b300:	2880202c 	andhi	r2,r5,128
1000b304:	10002726 	beq	r2,zero,1000b3a4 <__adddf3+0x32c>
1000b308:	84000044 	addi	r16,r16,1
1000b30c:	0081ffc4 	movi	r2,2047
1000b310:	8080ae26 	beq	r16,r2,1000b5cc <__adddf3+0x554>
1000b314:	00bfe034 	movhi	r2,65408
1000b318:	10bfffc4 	addi	r2,r2,-1
1000b31c:	288a703a 	and	r5,r5,r2
1000b320:	880cd07a 	srli	r6,r17,1
1000b324:	280897fa 	slli	r4,r5,31
1000b328:	88c0004c 	andi	r3,r17,1
1000b32c:	30e2b03a 	or	r17,r6,r3
1000b330:	280ad07a 	srli	r5,r5,1
1000b334:	8922b03a 	or	r17,r17,r4
1000b338:	003f6e06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b33c:	1148b03a 	or	r4,r2,r5
1000b340:	20003c26 	beq	r4,zero,1000b434 <__adddf3+0x3bc>
1000b344:	29000234 	orhi	r4,r5,8
1000b348:	01400434 	movhi	r5,16
1000b34c:	297fffc4 	addi	r5,r5,-1
1000b350:	2148703a 	and	r4,r4,r5
1000b354:	003f7f06 	br	1000b154 <__alt_data_end+0xf800b154>
1000b358:	18ffffc4 	addi	r3,r3,-1
1000b35c:	18004d1e 	bne	r3,zero,1000b494 <__adddf3+0x41c>
1000b360:	898dc83a 	sub	r6,r17,r6
1000b364:	89a3803a 	cmpltu	r17,r17,r6
1000b368:	2a0bc83a 	sub	r5,r5,r8
1000b36c:	2c4bc83a 	sub	r5,r5,r17
1000b370:	3023883a 	mov	r17,r6
1000b374:	003f9c06 	br	1000b1e8 <__alt_data_end+0xf800b1e8>
1000b378:	4184b03a 	or	r2,r8,r6
1000b37c:	103f5d26 	beq	r2,zero,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b380:	213fffc4 	addi	r4,r4,-1
1000b384:	203fd926 	beq	r4,zero,1000b2ec <__alt_data_end+0xf800b2ec>
1000b388:	0081ffc4 	movi	r2,2047
1000b38c:	80bfca1e 	bne	r16,r2,1000b2b8 <__alt_data_end+0xf800b2b8>
1000b390:	003f5806 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b394:	10c8b03a 	or	r4,r2,r3
1000b398:	20008b26 	beq	r4,zero,1000b5c8 <__adddf3+0x550>
1000b39c:	100b883a 	mov	r5,r2
1000b3a0:	1823883a 	mov	r17,r3
1000b3a4:	888001cc 	andi	r2,r17,7
1000b3a8:	103f541e 	bne	r2,zero,1000b0fc <__alt_data_end+0xf800b0fc>
1000b3ac:	9007883a 	mov	r3,r18
1000b3b0:	003fb006 	br	1000b274 <__alt_data_end+0xf800b274>
1000b3b4:	1800531e 	bne	r3,zero,1000b504 <__adddf3+0x48c>
1000b3b8:	80800044 	addi	r2,r16,1
1000b3bc:	1081ffcc 	andi	r2,r2,2047
1000b3c0:	00c00044 	movi	r3,1
1000b3c4:	1880990e 	bge	r3,r2,1000b62c <__adddf3+0x5b4>
1000b3c8:	8985c83a 	sub	r2,r17,r6
1000b3cc:	8887803a 	cmpltu	r3,r17,r2
1000b3d0:	2a27c83a 	sub	r19,r5,r8
1000b3d4:	98e7c83a 	sub	r19,r19,r3
1000b3d8:	98c0202c 	andhi	r3,r19,128
1000b3dc:	18006226 	beq	r3,zero,1000b568 <__adddf3+0x4f0>
1000b3e0:	3463c83a 	sub	r17,r6,r17
1000b3e4:	4151c83a 	sub	r8,r8,r5
1000b3e8:	344d803a 	cmpltu	r6,r6,r17
1000b3ec:	41a7c83a 	sub	r19,r8,r6
1000b3f0:	3825883a 	mov	r18,r7
1000b3f4:	983f821e 	bne	r19,zero,1000b200 <__alt_data_end+0xf800b200>
1000b3f8:	8809883a 	mov	r4,r17
1000b3fc:	000d8100 	call	1000d810 <__clzsi2>
1000b400:	10800804 	addi	r2,r2,32
1000b404:	10fffe04 	addi	r3,r2,-8
1000b408:	010007c4 	movi	r4,31
1000b40c:	20ff810e 	bge	r4,r3,1000b214 <__alt_data_end+0xf800b214>
1000b410:	14fff604 	addi	r19,r2,-40
1000b414:	8ce6983a 	sll	r19,r17,r19
1000b418:	0023883a 	mov	r17,zero
1000b41c:	1c3f840e 	bge	r3,r16,1000b230 <__alt_data_end+0xf800b230>
1000b420:	017fe034 	movhi	r5,65408
1000b424:	297fffc4 	addi	r5,r5,-1
1000b428:	80e1c83a 	sub	r16,r16,r3
1000b42c:	994a703a 	and	r5,r19,r5
1000b430:	003f3006 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b434:	0009883a 	mov	r4,zero
1000b438:	0005883a 	mov	r2,zero
1000b43c:	003f4506 	br	1000b154 <__alt_data_end+0xf800b154>
1000b440:	418cb03a 	or	r6,r8,r6
1000b444:	300cc03a 	cmpne	r6,r6,zero
1000b448:	0007883a 	mov	r3,zero
1000b44c:	003f6106 	br	1000b1d4 <__alt_data_end+0xf800b1d4>
1000b450:	2000921e 	bne	r4,zero,1000b69c <__adddf3+0x624>
1000b454:	80800044 	addi	r2,r16,1
1000b458:	11c1ffcc 	andi	r7,r2,2047
1000b45c:	01000044 	movi	r4,1
1000b460:	21c0610e 	bge	r4,r7,1000b5e8 <__adddf3+0x570>
1000b464:	0101ffc4 	movi	r4,2047
1000b468:	1100a326 	beq	r2,r4,1000b6f8 <__adddf3+0x680>
1000b46c:	344d883a 	add	r6,r6,r17
1000b470:	3463803a 	cmpltu	r17,r6,r17
1000b474:	414b883a 	add	r5,r8,r5
1000b478:	2c4b883a 	add	r5,r5,r17
1000b47c:	282297fa 	slli	r17,r5,31
1000b480:	300cd07a 	srli	r6,r6,1
1000b484:	280ad07a 	srli	r5,r5,1
1000b488:	1021883a 	mov	r16,r2
1000b48c:	89a2b03a 	or	r17,r17,r6
1000b490:	003f1806 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b494:	0081ffc4 	movi	r2,2047
1000b498:	80bf411e 	bne	r16,r2,1000b1a0 <__alt_data_end+0xf800b1a0>
1000b49c:	003f1506 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b4a0:	80bff844 	addi	r2,r16,-31
1000b4a4:	00c00804 	movi	r3,32
1000b4a8:	9884d83a 	srl	r2,r19,r2
1000b4ac:	28c04a26 	beq	r5,r3,1000b5d8 <__adddf3+0x560>
1000b4b0:	00c00fc4 	movi	r3,63
1000b4b4:	1c21c83a 	sub	r16,r3,r16
1000b4b8:	9c26983a 	sll	r19,r19,r16
1000b4bc:	9c62b03a 	or	r17,r19,r17
1000b4c0:	8822c03a 	cmpne	r17,r17,zero
1000b4c4:	88a2b03a 	or	r17,r17,r2
1000b4c8:	000b883a 	mov	r5,zero
1000b4cc:	0021883a 	mov	r16,zero
1000b4d0:	003fb406 	br	1000b3a4 <__alt_data_end+0xf800b3a4>
1000b4d4:	18bff804 	addi	r2,r3,-32
1000b4d8:	01000804 	movi	r4,32
1000b4dc:	4084d83a 	srl	r2,r8,r2
1000b4e0:	19003f26 	beq	r3,r4,1000b5e0 <__adddf3+0x568>
1000b4e4:	01001004 	movi	r4,64
1000b4e8:	20c7c83a 	sub	r3,r4,r3
1000b4ec:	40d0983a 	sll	r8,r8,r3
1000b4f0:	418cb03a 	or	r6,r8,r6
1000b4f4:	300cc03a 	cmpne	r6,r6,zero
1000b4f8:	308cb03a 	or	r6,r6,r2
1000b4fc:	0007883a 	mov	r3,zero
1000b500:	003f3406 	br	1000b1d4 <__alt_data_end+0xf800b1d4>
1000b504:	80002326 	beq	r16,zero,1000b594 <__adddf3+0x51c>
1000b508:	0101ffc4 	movi	r4,2047
1000b50c:	11005e26 	beq	r2,r4,1000b688 <__adddf3+0x610>
1000b510:	00c7c83a 	sub	r3,zero,r3
1000b514:	29402034 	orhi	r5,r5,128
1000b518:	01000e04 	movi	r4,56
1000b51c:	20c07216 	blt	r4,r3,1000b6e8 <__adddf3+0x670>
1000b520:	010007c4 	movi	r4,31
1000b524:	20c0ce16 	blt	r4,r3,1000b860 <__adddf3+0x7e8>
1000b528:	01000804 	movi	r4,32
1000b52c:	20c9c83a 	sub	r4,r4,r3
1000b530:	2914983a 	sll	r10,r5,r4
1000b534:	88d2d83a 	srl	r9,r17,r3
1000b538:	8908983a 	sll	r4,r17,r4
1000b53c:	28c6d83a 	srl	r3,r5,r3
1000b540:	5262b03a 	or	r17,r10,r9
1000b544:	2008c03a 	cmpne	r4,r4,zero
1000b548:	8922b03a 	or	r17,r17,r4
1000b54c:	3463c83a 	sub	r17,r6,r17
1000b550:	40c7c83a 	sub	r3,r8,r3
1000b554:	344d803a 	cmpltu	r6,r6,r17
1000b558:	198bc83a 	sub	r5,r3,r6
1000b55c:	1021883a 	mov	r16,r2
1000b560:	3825883a 	mov	r18,r7
1000b564:	003f2006 	br	1000b1e8 <__alt_data_end+0xf800b1e8>
1000b568:	9886b03a 	or	r3,r19,r2
1000b56c:	1800141e 	bne	r3,zero,1000b5c0 <__adddf3+0x548>
1000b570:	0007883a 	mov	r3,zero
1000b574:	000b883a 	mov	r5,zero
1000b578:	0023883a 	mov	r17,zero
1000b57c:	0021883a 	mov	r16,zero
1000b580:	003f3c06 	br	1000b274 <__alt_data_end+0xf800b274>
1000b584:	418cb03a 	or	r6,r8,r6
1000b588:	300cc03a 	cmpne	r6,r6,zero
1000b58c:	0011883a 	mov	r8,zero
1000b590:	003f5606 	br	1000b2ec <__alt_data_end+0xf800b2ec>
1000b594:	2c48b03a 	or	r4,r5,r17
1000b598:	20003b26 	beq	r4,zero,1000b688 <__adddf3+0x610>
1000b59c:	00c6303a 	nor	r3,zero,r3
1000b5a0:	1800371e 	bne	r3,zero,1000b680 <__adddf3+0x608>
1000b5a4:	3463c83a 	sub	r17,r6,r17
1000b5a8:	414bc83a 	sub	r5,r8,r5
1000b5ac:	344d803a 	cmpltu	r6,r6,r17
1000b5b0:	298bc83a 	sub	r5,r5,r6
1000b5b4:	1021883a 	mov	r16,r2
1000b5b8:	3825883a 	mov	r18,r7
1000b5bc:	003f0a06 	br	1000b1e8 <__alt_data_end+0xf800b1e8>
1000b5c0:	1023883a 	mov	r17,r2
1000b5c4:	003f0d06 	br	1000b1fc <__alt_data_end+0xf800b1fc>
1000b5c8:	0007883a 	mov	r3,zero
1000b5cc:	000b883a 	mov	r5,zero
1000b5d0:	0023883a 	mov	r17,zero
1000b5d4:	003f2706 	br	1000b274 <__alt_data_end+0xf800b274>
1000b5d8:	0027883a 	mov	r19,zero
1000b5dc:	003fb706 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b5e0:	0011883a 	mov	r8,zero
1000b5e4:	003fc206 	br	1000b4f0 <__alt_data_end+0xf800b4f0>
1000b5e8:	2c44b03a 	or	r2,r5,r17
1000b5ec:	8000871e 	bne	r16,zero,1000b80c <__adddf3+0x794>
1000b5f0:	1000b126 	beq	r2,zero,1000b8b8 <__adddf3+0x840>
1000b5f4:	4184b03a 	or	r2,r8,r6
1000b5f8:	103ebe26 	beq	r2,zero,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b5fc:	3445883a 	add	r2,r6,r17
1000b600:	1463803a 	cmpltu	r17,r2,r17
1000b604:	414b883a 	add	r5,r8,r5
1000b608:	2c4b883a 	add	r5,r5,r17
1000b60c:	28c0202c 	andhi	r3,r5,128
1000b610:	1023883a 	mov	r17,r2
1000b614:	183f6326 	beq	r3,zero,1000b3a4 <__alt_data_end+0xf800b3a4>
1000b618:	00bfe034 	movhi	r2,65408
1000b61c:	10bfffc4 	addi	r2,r2,-1
1000b620:	2021883a 	mov	r16,r4
1000b624:	288a703a 	and	r5,r5,r2
1000b628:	003eb206 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b62c:	2c44b03a 	or	r2,r5,r17
1000b630:	8000251e 	bne	r16,zero,1000b6c8 <__adddf3+0x650>
1000b634:	10004b1e 	bne	r2,zero,1000b764 <__adddf3+0x6ec>
1000b638:	4184b03a 	or	r2,r8,r6
1000b63c:	103fe226 	beq	r2,zero,1000b5c8 <__alt_data_end+0xf800b5c8>
1000b640:	400b883a 	mov	r5,r8
1000b644:	3023883a 	mov	r17,r6
1000b648:	3825883a 	mov	r18,r7
1000b64c:	003ea906 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b650:	20bff804 	addi	r2,r4,-32
1000b654:	01c00804 	movi	r7,32
1000b658:	4084d83a 	srl	r2,r8,r2
1000b65c:	21c07e26 	beq	r4,r7,1000b858 <__adddf3+0x7e0>
1000b660:	01c01004 	movi	r7,64
1000b664:	3909c83a 	sub	r4,r7,r4
1000b668:	4110983a 	sll	r8,r8,r4
1000b66c:	418cb03a 	or	r6,r8,r6
1000b670:	300cc03a 	cmpne	r6,r6,zero
1000b674:	308cb03a 	or	r6,r6,r2
1000b678:	0011883a 	mov	r8,zero
1000b67c:	003f1b06 	br	1000b2ec <__alt_data_end+0xf800b2ec>
1000b680:	0101ffc4 	movi	r4,2047
1000b684:	113fa41e 	bne	r2,r4,1000b518 <__alt_data_end+0xf800b518>
1000b688:	400b883a 	mov	r5,r8
1000b68c:	3023883a 	mov	r17,r6
1000b690:	1021883a 	mov	r16,r2
1000b694:	3825883a 	mov	r18,r7
1000b698:	003e9606 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b69c:	80001a1e 	bne	r16,zero,1000b708 <__adddf3+0x690>
1000b6a0:	2c4eb03a 	or	r7,r5,r17
1000b6a4:	38005526 	beq	r7,zero,1000b7fc <__adddf3+0x784>
1000b6a8:	0108303a 	nor	r4,zero,r4
1000b6ac:	2000511e 	bne	r4,zero,1000b7f4 <__adddf3+0x77c>
1000b6b0:	89a3883a 	add	r17,r17,r6
1000b6b4:	414b883a 	add	r5,r8,r5
1000b6b8:	898d803a 	cmpltu	r6,r17,r6
1000b6bc:	298b883a 	add	r5,r5,r6
1000b6c0:	1021883a 	mov	r16,r2
1000b6c4:	003f0e06 	br	1000b300 <__alt_data_end+0xf800b300>
1000b6c8:	1000341e 	bne	r2,zero,1000b79c <__adddf3+0x724>
1000b6cc:	4184b03a 	or	r2,r8,r6
1000b6d0:	10006f26 	beq	r2,zero,1000b890 <__adddf3+0x818>
1000b6d4:	400b883a 	mov	r5,r8
1000b6d8:	3023883a 	mov	r17,r6
1000b6dc:	3825883a 	mov	r18,r7
1000b6e0:	0401ffc4 	movi	r16,2047
1000b6e4:	003e8306 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b6e8:	2c62b03a 	or	r17,r5,r17
1000b6ec:	8822c03a 	cmpne	r17,r17,zero
1000b6f0:	0007883a 	mov	r3,zero
1000b6f4:	003f9506 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b6f8:	1021883a 	mov	r16,r2
1000b6fc:	000b883a 	mov	r5,zero
1000b700:	0023883a 	mov	r17,zero
1000b704:	003edb06 	br	1000b274 <__alt_data_end+0xf800b274>
1000b708:	01c1ffc4 	movi	r7,2047
1000b70c:	11c03b26 	beq	r2,r7,1000b7fc <__adddf3+0x784>
1000b710:	0109c83a 	sub	r4,zero,r4
1000b714:	29402034 	orhi	r5,r5,128
1000b718:	01c00e04 	movi	r7,56
1000b71c:	39006216 	blt	r7,r4,1000b8a8 <__adddf3+0x830>
1000b720:	01c007c4 	movi	r7,31
1000b724:	39006b16 	blt	r7,r4,1000b8d4 <__adddf3+0x85c>
1000b728:	01c00804 	movi	r7,32
1000b72c:	390fc83a 	sub	r7,r7,r4
1000b730:	29d4983a 	sll	r10,r5,r7
1000b734:	8912d83a 	srl	r9,r17,r4
1000b738:	89ce983a 	sll	r7,r17,r7
1000b73c:	2908d83a 	srl	r4,r5,r4
1000b740:	5262b03a 	or	r17,r10,r9
1000b744:	380ac03a 	cmpne	r5,r7,zero
1000b748:	8962b03a 	or	r17,r17,r5
1000b74c:	89a3883a 	add	r17,r17,r6
1000b750:	2211883a 	add	r8,r4,r8
1000b754:	898d803a 	cmpltu	r6,r17,r6
1000b758:	418b883a 	add	r5,r8,r6
1000b75c:	1021883a 	mov	r16,r2
1000b760:	003ee706 	br	1000b300 <__alt_data_end+0xf800b300>
1000b764:	4184b03a 	or	r2,r8,r6
1000b768:	103e6226 	beq	r2,zero,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b76c:	8987c83a 	sub	r3,r17,r6
1000b770:	88c9803a 	cmpltu	r4,r17,r3
1000b774:	2a05c83a 	sub	r2,r5,r8
1000b778:	1105c83a 	sub	r2,r2,r4
1000b77c:	1100202c 	andhi	r4,r2,128
1000b780:	203f0426 	beq	r4,zero,1000b394 <__alt_data_end+0xf800b394>
1000b784:	3463c83a 	sub	r17,r6,r17
1000b788:	414bc83a 	sub	r5,r8,r5
1000b78c:	344d803a 	cmpltu	r6,r6,r17
1000b790:	298bc83a 	sub	r5,r5,r6
1000b794:	3825883a 	mov	r18,r7
1000b798:	003e5606 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b79c:	4184b03a 	or	r2,r8,r6
1000b7a0:	10002b26 	beq	r2,zero,1000b850 <__adddf3+0x7d8>
1000b7a4:	2804d0fa 	srli	r2,r5,3
1000b7a8:	8822d0fa 	srli	r17,r17,3
1000b7ac:	280a977a 	slli	r5,r5,29
1000b7b0:	10c0022c 	andhi	r3,r2,8
1000b7b4:	2c62b03a 	or	r17,r5,r17
1000b7b8:	18000826 	beq	r3,zero,1000b7dc <__adddf3+0x764>
1000b7bc:	4008d0fa 	srli	r4,r8,3
1000b7c0:	20c0022c 	andhi	r3,r4,8
1000b7c4:	1800051e 	bne	r3,zero,1000b7dc <__adddf3+0x764>
1000b7c8:	300cd0fa 	srli	r6,r6,3
1000b7cc:	4010977a 	slli	r8,r8,29
1000b7d0:	2005883a 	mov	r2,r4
1000b7d4:	3825883a 	mov	r18,r7
1000b7d8:	41a2b03a 	or	r17,r8,r6
1000b7dc:	880ad77a 	srli	r5,r17,29
1000b7e0:	100490fa 	slli	r2,r2,3
1000b7e4:	882290fa 	slli	r17,r17,3
1000b7e8:	0401ffc4 	movi	r16,2047
1000b7ec:	288ab03a 	or	r5,r5,r2
1000b7f0:	003e4006 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b7f4:	01c1ffc4 	movi	r7,2047
1000b7f8:	11ffc71e 	bne	r2,r7,1000b718 <__alt_data_end+0xf800b718>
1000b7fc:	400b883a 	mov	r5,r8
1000b800:	3023883a 	mov	r17,r6
1000b804:	1021883a 	mov	r16,r2
1000b808:	003e3a06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b80c:	10002d26 	beq	r2,zero,1000b8c4 <__adddf3+0x84c>
1000b810:	4184b03a 	or	r2,r8,r6
1000b814:	10000e26 	beq	r2,zero,1000b850 <__adddf3+0x7d8>
1000b818:	2804d0fa 	srli	r2,r5,3
1000b81c:	8822d0fa 	srli	r17,r17,3
1000b820:	280a977a 	slli	r5,r5,29
1000b824:	10c0022c 	andhi	r3,r2,8
1000b828:	2c62b03a 	or	r17,r5,r17
1000b82c:	183feb26 	beq	r3,zero,1000b7dc <__alt_data_end+0xf800b7dc>
1000b830:	4008d0fa 	srli	r4,r8,3
1000b834:	20c0022c 	andhi	r3,r4,8
1000b838:	183fe81e 	bne	r3,zero,1000b7dc <__alt_data_end+0xf800b7dc>
1000b83c:	300cd0fa 	srli	r6,r6,3
1000b840:	4010977a 	slli	r8,r8,29
1000b844:	2005883a 	mov	r2,r4
1000b848:	41a2b03a 	or	r17,r8,r6
1000b84c:	003fe306 	br	1000b7dc <__alt_data_end+0xf800b7dc>
1000b850:	0401ffc4 	movi	r16,2047
1000b854:	003e2706 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b858:	0011883a 	mov	r8,zero
1000b85c:	003f8306 	br	1000b66c <__alt_data_end+0xf800b66c>
1000b860:	193ff804 	addi	r4,r3,-32
1000b864:	02400804 	movi	r9,32
1000b868:	2908d83a 	srl	r4,r5,r4
1000b86c:	1a402526 	beq	r3,r9,1000b904 <__adddf3+0x88c>
1000b870:	02401004 	movi	r9,64
1000b874:	48c7c83a 	sub	r3,r9,r3
1000b878:	28ca983a 	sll	r5,r5,r3
1000b87c:	2c62b03a 	or	r17,r5,r17
1000b880:	8822c03a 	cmpne	r17,r17,zero
1000b884:	8922b03a 	or	r17,r17,r4
1000b888:	0007883a 	mov	r3,zero
1000b88c:	003f2f06 	br	1000b54c <__alt_data_end+0xf800b54c>
1000b890:	01402034 	movhi	r5,128
1000b894:	0007883a 	mov	r3,zero
1000b898:	297fffc4 	addi	r5,r5,-1
1000b89c:	047ffe04 	movi	r17,-8
1000b8a0:	0401ffc4 	movi	r16,2047
1000b8a4:	003e7306 	br	1000b274 <__alt_data_end+0xf800b274>
1000b8a8:	2c62b03a 	or	r17,r5,r17
1000b8ac:	8822c03a 	cmpne	r17,r17,zero
1000b8b0:	0009883a 	mov	r4,zero
1000b8b4:	003fa506 	br	1000b74c <__alt_data_end+0xf800b74c>
1000b8b8:	400b883a 	mov	r5,r8
1000b8bc:	3023883a 	mov	r17,r6
1000b8c0:	003e0c06 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b8c4:	400b883a 	mov	r5,r8
1000b8c8:	3023883a 	mov	r17,r6
1000b8cc:	0401ffc4 	movi	r16,2047
1000b8d0:	003e0806 	br	1000b0f4 <__alt_data_end+0xf800b0f4>
1000b8d4:	21fff804 	addi	r7,r4,-32
1000b8d8:	02400804 	movi	r9,32
1000b8dc:	29ced83a 	srl	r7,r5,r7
1000b8e0:	22400a26 	beq	r4,r9,1000b90c <__adddf3+0x894>
1000b8e4:	02401004 	movi	r9,64
1000b8e8:	4909c83a 	sub	r4,r9,r4
1000b8ec:	290a983a 	sll	r5,r5,r4
1000b8f0:	2c62b03a 	or	r17,r5,r17
1000b8f4:	8822c03a 	cmpne	r17,r17,zero
1000b8f8:	89e2b03a 	or	r17,r17,r7
1000b8fc:	0009883a 	mov	r4,zero
1000b900:	003f9206 	br	1000b74c <__alt_data_end+0xf800b74c>
1000b904:	000b883a 	mov	r5,zero
1000b908:	003fdc06 	br	1000b87c <__alt_data_end+0xf800b87c>
1000b90c:	000b883a 	mov	r5,zero
1000b910:	003ff706 	br	1000b8f0 <__alt_data_end+0xf800b8f0>

1000b914 <__divdf3>:
1000b914:	defff004 	addi	sp,sp,-64
1000b918:	dc800815 	stw	r18,32(sp)
1000b91c:	2824d53a 	srli	r18,r5,20
1000b920:	dd800c15 	stw	r22,48(sp)
1000b924:	282cd7fa 	srli	r22,r5,31
1000b928:	dc000615 	stw	r16,24(sp)
1000b92c:	04000434 	movhi	r16,16
1000b930:	df000e15 	stw	fp,56(sp)
1000b934:	dd000a15 	stw	r20,40(sp)
1000b938:	dcc00915 	stw	r19,36(sp)
1000b93c:	dc400715 	stw	r17,28(sp)
1000b940:	843fffc4 	addi	r16,r16,-1
1000b944:	dfc00f15 	stw	ra,60(sp)
1000b948:	ddc00d15 	stw	r23,52(sp)
1000b94c:	dd400b15 	stw	r21,44(sp)
1000b950:	9481ffcc 	andi	r18,r18,2047
1000b954:	2029883a 	mov	r20,r4
1000b958:	2027883a 	mov	r19,r4
1000b95c:	2c22703a 	and	r17,r5,r16
1000b960:	b7003fcc 	andi	fp,r22,255
1000b964:	90005e26 	beq	r18,zero,1000bae0 <__divdf3+0x1cc>
1000b968:	0081ffc4 	movi	r2,2047
1000b96c:	90803526 	beq	r18,r2,1000ba44 <__divdf3+0x130>
1000b970:	8c000434 	orhi	r16,r17,16
1000b974:	2004d77a 	srli	r2,r4,29
1000b978:	802090fa 	slli	r16,r16,3
1000b97c:	202690fa 	slli	r19,r4,3
1000b980:	94bf0044 	addi	r18,r18,-1023
1000b984:	80a2b03a 	or	r17,r16,r2
1000b988:	0029883a 	mov	r20,zero
1000b98c:	0011883a 	mov	r8,zero
1000b990:	380ad53a 	srli	r5,r7,20
1000b994:	382ed7fa 	srli	r23,r7,31
1000b998:	04000434 	movhi	r16,16
1000b99c:	843fffc4 	addi	r16,r16,-1
1000b9a0:	2941ffcc 	andi	r5,r5,2047
1000b9a4:	302b883a 	mov	r21,r6
1000b9a8:	3c20703a 	and	r16,r7,r16
1000b9ac:	ba403fcc 	andi	r9,r23,255
1000b9b0:	28006726 	beq	r5,zero,1000bb50 <__divdf3+0x23c>
1000b9b4:	0081ffc4 	movi	r2,2047
1000b9b8:	28805f26 	beq	r5,r2,1000bb38 <__divdf3+0x224>
1000b9bc:	84000434 	orhi	r16,r16,16
1000b9c0:	3004d77a 	srli	r2,r6,29
1000b9c4:	802090fa 	slli	r16,r16,3
1000b9c8:	302a90fa 	slli	r21,r6,3
1000b9cc:	297f0044 	addi	r5,r5,-1023
1000b9d0:	80a0b03a 	or	r16,r16,r2
1000b9d4:	000f883a 	mov	r7,zero
1000b9d8:	3d06b03a 	or	r3,r7,r20
1000b9dc:	180690ba 	slli	r3,r3,2
1000b9e0:	00840074 	movhi	r2,4097
1000b9e4:	10ae8104 	addi	r2,r2,-17916
1000b9e8:	1885883a 	add	r2,r3,r2
1000b9ec:	10800017 	ldw	r2,0(r2)
1000b9f0:	b5c8f03a 	xor	r4,r22,r23
1000b9f4:	200d883a 	mov	r6,r4
1000b9f8:	25003fcc 	andi	r20,r4,255
1000b9fc:	9165c83a 	sub	r18,r18,r5
1000ba00:	1000683a 	jmp	r2
1000ba04:	1000bc4c 	andi	zero,r2,753
1000ba08:	1000ba7c 	xorhi	zero,r2,745
1000ba0c:	1000bc10 	cmplti	zero,r2,752
1000ba10:	1000ba60 	cmpeqi	zero,r2,745
1000ba14:	1000bc10 	cmplti	zero,r2,752
1000ba18:	1000bbe4 	muli	zero,r2,751
1000ba1c:	1000bc10 	cmplti	zero,r2,752
1000ba20:	1000ba60 	cmpeqi	zero,r2,745
1000ba24:	1000ba7c 	xorhi	zero,r2,745
1000ba28:	1000ba7c 	xorhi	zero,r2,745
1000ba2c:	1000bbe4 	muli	zero,r2,751
1000ba30:	1000ba60 	cmpeqi	zero,r2,745
1000ba34:	1000ba70 	cmpltui	zero,r2,745
1000ba38:	1000ba70 	cmpltui	zero,r2,745
1000ba3c:	1000ba70 	cmpltui	zero,r2,745
1000ba40:	1000bc20 	cmpeqi	zero,r2,752
1000ba44:	8904b03a 	or	r2,r17,r4
1000ba48:	1000631e 	bne	r2,zero,1000bbd8 <__divdf3+0x2c4>
1000ba4c:	05000204 	movi	r20,8
1000ba50:	0023883a 	mov	r17,zero
1000ba54:	0027883a 	mov	r19,zero
1000ba58:	02000084 	movi	r8,2
1000ba5c:	003fcc06 	br	1000b990 <__alt_data_end+0xf800b990>
1000ba60:	8023883a 	mov	r17,r16
1000ba64:	a827883a 	mov	r19,r21
1000ba68:	4839883a 	mov	fp,r9
1000ba6c:	3811883a 	mov	r8,r7
1000ba70:	00800084 	movi	r2,2
1000ba74:	4081531e 	bne	r8,r2,1000bfc4 <__divdf3+0x6b0>
1000ba78:	e029883a 	mov	r20,fp
1000ba7c:	a180004c 	andi	r6,r20,1
1000ba80:	0201ffc4 	movi	r8,2047
1000ba84:	000b883a 	mov	r5,zero
1000ba88:	0027883a 	mov	r19,zero
1000ba8c:	4010953a 	slli	r8,r8,20
1000ba90:	30c03fcc 	andi	r3,r6,255
1000ba94:	04000434 	movhi	r16,16
1000ba98:	180697fa 	slli	r3,r3,31
1000ba9c:	843fffc4 	addi	r16,r16,-1
1000baa0:	2c20703a 	and	r16,r5,r16
1000baa4:	8220b03a 	or	r16,r16,r8
1000baa8:	80c6b03a 	or	r3,r16,r3
1000baac:	9805883a 	mov	r2,r19
1000bab0:	dfc00f17 	ldw	ra,60(sp)
1000bab4:	df000e17 	ldw	fp,56(sp)
1000bab8:	ddc00d17 	ldw	r23,52(sp)
1000babc:	dd800c17 	ldw	r22,48(sp)
1000bac0:	dd400b17 	ldw	r21,44(sp)
1000bac4:	dd000a17 	ldw	r20,40(sp)
1000bac8:	dcc00917 	ldw	r19,36(sp)
1000bacc:	dc800817 	ldw	r18,32(sp)
1000bad0:	dc400717 	ldw	r17,28(sp)
1000bad4:	dc000617 	ldw	r16,24(sp)
1000bad8:	dec01004 	addi	sp,sp,64
1000badc:	f800283a 	ret
1000bae0:	8904b03a 	or	r2,r17,r4
1000bae4:	10003726 	beq	r2,zero,1000bbc4 <__divdf3+0x2b0>
1000bae8:	88014d26 	beq	r17,zero,1000c020 <__divdf3+0x70c>
1000baec:	8809883a 	mov	r4,r17
1000baf0:	d9800215 	stw	r6,8(sp)
1000baf4:	d9c00515 	stw	r7,20(sp)
1000baf8:	000d8100 	call	1000d810 <__clzsi2>
1000bafc:	d9800217 	ldw	r6,8(sp)
1000bb00:	d9c00517 	ldw	r7,20(sp)
1000bb04:	1007883a 	mov	r3,r2
1000bb08:	01000a04 	movi	r4,40
1000bb0c:	1cfffe04 	addi	r19,r3,-8
1000bb10:	20c9c83a 	sub	r4,r4,r3
1000bb14:	8cca983a 	sll	r5,r17,r19
1000bb18:	a108d83a 	srl	r4,r20,r4
1000bb1c:	a4e6983a 	sll	r19,r20,r19
1000bb20:	2162b03a 	or	r17,r4,r5
1000bb24:	04bf0344 	movi	r18,-1011
1000bb28:	90e5c83a 	sub	r18,r18,r3
1000bb2c:	0029883a 	mov	r20,zero
1000bb30:	0011883a 	mov	r8,zero
1000bb34:	003f9606 	br	1000b990 <__alt_data_end+0xf800b990>
1000bb38:	8184b03a 	or	r2,r16,r6
1000bb3c:	10001f1e 	bne	r2,zero,1000bbbc <__divdf3+0x2a8>
1000bb40:	0021883a 	mov	r16,zero
1000bb44:	002b883a 	mov	r21,zero
1000bb48:	01c00084 	movi	r7,2
1000bb4c:	003fa206 	br	1000b9d8 <__alt_data_end+0xf800b9d8>
1000bb50:	8184b03a 	or	r2,r16,r6
1000bb54:	10001526 	beq	r2,zero,1000bbac <__divdf3+0x298>
1000bb58:	80013d26 	beq	r16,zero,1000c050 <__divdf3+0x73c>
1000bb5c:	8009883a 	mov	r4,r16
1000bb60:	d9800215 	stw	r6,8(sp)
1000bb64:	da000315 	stw	r8,12(sp)
1000bb68:	da400415 	stw	r9,16(sp)
1000bb6c:	000d8100 	call	1000d810 <__clzsi2>
1000bb70:	d9800217 	ldw	r6,8(sp)
1000bb74:	da000317 	ldw	r8,12(sp)
1000bb78:	da400417 	ldw	r9,16(sp)
1000bb7c:	1007883a 	mov	r3,r2
1000bb80:	01000a04 	movi	r4,40
1000bb84:	1d7ffe04 	addi	r21,r3,-8
1000bb88:	20c9c83a 	sub	r4,r4,r3
1000bb8c:	8560983a 	sll	r16,r16,r21
1000bb90:	3108d83a 	srl	r4,r6,r4
1000bb94:	356a983a 	sll	r21,r6,r21
1000bb98:	2420b03a 	or	r16,r4,r16
1000bb9c:	017f0344 	movi	r5,-1011
1000bba0:	28cbc83a 	sub	r5,r5,r3
1000bba4:	000f883a 	mov	r7,zero
1000bba8:	003f8b06 	br	1000b9d8 <__alt_data_end+0xf800b9d8>
1000bbac:	0021883a 	mov	r16,zero
1000bbb0:	002b883a 	mov	r21,zero
1000bbb4:	01c00044 	movi	r7,1
1000bbb8:	003f8706 	br	1000b9d8 <__alt_data_end+0xf800b9d8>
1000bbbc:	01c000c4 	movi	r7,3
1000bbc0:	003f8506 	br	1000b9d8 <__alt_data_end+0xf800b9d8>
1000bbc4:	05000104 	movi	r20,4
1000bbc8:	0023883a 	mov	r17,zero
1000bbcc:	0027883a 	mov	r19,zero
1000bbd0:	02000044 	movi	r8,1
1000bbd4:	003f6e06 	br	1000b990 <__alt_data_end+0xf800b990>
1000bbd8:	05000304 	movi	r20,12
1000bbdc:	020000c4 	movi	r8,3
1000bbe0:	003f6b06 	br	1000b990 <__alt_data_end+0xf800b990>
1000bbe4:	01400434 	movhi	r5,16
1000bbe8:	000d883a 	mov	r6,zero
1000bbec:	297fffc4 	addi	r5,r5,-1
1000bbf0:	04ffffc4 	movi	r19,-1
1000bbf4:	0201ffc4 	movi	r8,2047
1000bbf8:	003fa406 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000bbfc:	043f0084 	movi	r16,-1022
1000bc00:	84a1c83a 	sub	r16,r16,r18
1000bc04:	00800e04 	movi	r2,56
1000bc08:	14014d0e 	bge	r2,r16,1000c140 <__divdf3+0x82c>
1000bc0c:	a180004c 	andi	r6,r20,1
1000bc10:	0011883a 	mov	r8,zero
1000bc14:	000b883a 	mov	r5,zero
1000bc18:	0027883a 	mov	r19,zero
1000bc1c:	003f9b06 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000bc20:	8880022c 	andhi	r2,r17,8
1000bc24:	1000f026 	beq	r2,zero,1000bfe8 <__divdf3+0x6d4>
1000bc28:	8080022c 	andhi	r2,r16,8
1000bc2c:	1000ee1e 	bne	r2,zero,1000bfe8 <__divdf3+0x6d4>
1000bc30:	00800434 	movhi	r2,16
1000bc34:	81400234 	orhi	r5,r16,8
1000bc38:	10bfffc4 	addi	r2,r2,-1
1000bc3c:	b80d883a 	mov	r6,r23
1000bc40:	288a703a 	and	r5,r5,r2
1000bc44:	a827883a 	mov	r19,r21
1000bc48:	003fea06 	br	1000bbf4 <__alt_data_end+0xf800bbf4>
1000bc4c:	84411c36 	bltu	r16,r17,1000c0c0 <__divdf3+0x7ac>
1000bc50:	8c011a26 	beq	r17,r16,1000c0bc <__divdf3+0x7a8>
1000bc54:	94bfffc4 	addi	r18,r18,-1
1000bc58:	dcc00015 	stw	r19,0(sp)
1000bc5c:	8811883a 	mov	r8,r17
1000bc60:	002d883a 	mov	r22,zero
1000bc64:	a80cd63a 	srli	r6,r21,24
1000bc68:	8020923a 	slli	r16,r16,8
1000bc6c:	a82a923a 	slli	r21,r21,8
1000bc70:	4009883a 	mov	r4,r8
1000bc74:	342eb03a 	or	r23,r6,r16
1000bc78:	dd400115 	stw	r21,4(sp)
1000bc7c:	b82ad43a 	srli	r21,r23,16
1000bc80:	da000315 	stw	r8,12(sp)
1000bc84:	bcffffcc 	andi	r19,r23,65535
1000bc88:	a80b883a 	mov	r5,r21
1000bc8c:	000102c0 	call	1000102c <__udivsi3>
1000bc90:	1009883a 	mov	r4,r2
1000bc94:	980b883a 	mov	r5,r19
1000bc98:	1023883a 	mov	r17,r2
1000bc9c:	000103c0 	call	1000103c <__mulsi3>
1000bca0:	da000317 	ldw	r8,12(sp)
1000bca4:	a80b883a 	mov	r5,r21
1000bca8:	1039883a 	mov	fp,r2
1000bcac:	4009883a 	mov	r4,r8
1000bcb0:	00010340 	call	10001034 <__umodsi3>
1000bcb4:	d8c00017 	ldw	r3,0(sp)
1000bcb8:	1004943a 	slli	r2,r2,16
1000bcbc:	1810d43a 	srli	r8,r3,16
1000bcc0:	120eb03a 	or	r7,r2,r8
1000bcc4:	3f00062e 	bgeu	r7,fp,1000bce0 <__divdf3+0x3cc>
1000bcc8:	3dcf883a 	add	r7,r7,r23
1000bccc:	88bfffc4 	addi	r2,r17,-1
1000bcd0:	3dc10a36 	bltu	r7,r23,1000c0fc <__divdf3+0x7e8>
1000bcd4:	3f01092e 	bgeu	r7,fp,1000c0fc <__divdf3+0x7e8>
1000bcd8:	8c7fff84 	addi	r17,r17,-2
1000bcdc:	3dcf883a 	add	r7,r7,r23
1000bce0:	3f39c83a 	sub	fp,r7,fp
1000bce4:	e009883a 	mov	r4,fp
1000bce8:	a80b883a 	mov	r5,r21
1000bcec:	000102c0 	call	1000102c <__udivsi3>
1000bcf0:	1009883a 	mov	r4,r2
1000bcf4:	980b883a 	mov	r5,r19
1000bcf8:	1021883a 	mov	r16,r2
1000bcfc:	000103c0 	call	1000103c <__mulsi3>
1000bd00:	e009883a 	mov	r4,fp
1000bd04:	a80b883a 	mov	r5,r21
1000bd08:	d8800315 	stw	r2,12(sp)
1000bd0c:	00010340 	call	10001034 <__umodsi3>
1000bd10:	d9000017 	ldw	r4,0(sp)
1000bd14:	1004943a 	slli	r2,r2,16
1000bd18:	da000317 	ldw	r8,12(sp)
1000bd1c:	20ffffcc 	andi	r3,r4,65535
1000bd20:	10ceb03a 	or	r7,r2,r3
1000bd24:	3a00062e 	bgeu	r7,r8,1000bd40 <__divdf3+0x42c>
1000bd28:	3dcf883a 	add	r7,r7,r23
1000bd2c:	80bfffc4 	addi	r2,r16,-1
1000bd30:	3dc0f036 	bltu	r7,r23,1000c0f4 <__divdf3+0x7e0>
1000bd34:	3a00ef2e 	bgeu	r7,r8,1000c0f4 <__divdf3+0x7e0>
1000bd38:	843fff84 	addi	r16,r16,-2
1000bd3c:	3dcf883a 	add	r7,r7,r23
1000bd40:	d8c00117 	ldw	r3,4(sp)
1000bd44:	8822943a 	slli	r17,r17,16
1000bd48:	3a0fc83a 	sub	r7,r7,r8
1000bd4c:	1806d43a 	srli	r3,r3,16
1000bd50:	8462b03a 	or	r17,r16,r17
1000bd54:	8affffcc 	andi	r11,r17,65535
1000bd58:	d8c00015 	stw	r3,0(sp)
1000bd5c:	d8c00117 	ldw	r3,4(sp)
1000bd60:	8820d43a 	srli	r16,r17,16
1000bd64:	5809883a 	mov	r4,r11
1000bd68:	1f3fffcc 	andi	fp,r3,65535
1000bd6c:	e00b883a 	mov	r5,fp
1000bd70:	d9c00515 	stw	r7,20(sp)
1000bd74:	dac00215 	stw	r11,8(sp)
1000bd78:	000103c0 	call	1000103c <__mulsi3>
1000bd7c:	8009883a 	mov	r4,r16
1000bd80:	e00b883a 	mov	r5,fp
1000bd84:	d8800415 	stw	r2,16(sp)
1000bd88:	000103c0 	call	1000103c <__mulsi3>
1000bd8c:	d9400017 	ldw	r5,0(sp)
1000bd90:	8009883a 	mov	r4,r16
1000bd94:	d8800315 	stw	r2,12(sp)
1000bd98:	000103c0 	call	1000103c <__mulsi3>
1000bd9c:	dac00217 	ldw	r11,8(sp)
1000bda0:	d9400017 	ldw	r5,0(sp)
1000bda4:	d8800215 	stw	r2,8(sp)
1000bda8:	5809883a 	mov	r4,r11
1000bdac:	000103c0 	call	1000103c <__mulsi3>
1000bdb0:	da400417 	ldw	r9,16(sp)
1000bdb4:	da800317 	ldw	r10,12(sp)
1000bdb8:	d9c00517 	ldw	r7,20(sp)
1000bdbc:	480ad43a 	srli	r5,r9,16
1000bdc0:	5085883a 	add	r2,r10,r2
1000bdc4:	db000217 	ldw	r12,8(sp)
1000bdc8:	1151883a 	add	r8,r2,r5
1000bdcc:	4280022e 	bgeu	r8,r10,1000bdd8 <__divdf3+0x4c4>
1000bdd0:	00800074 	movhi	r2,1
1000bdd4:	6099883a 	add	r12,r12,r2
1000bdd8:	400ad43a 	srli	r5,r8,16
1000bddc:	4010943a 	slli	r8,r8,16
1000bde0:	4c3fffcc 	andi	r16,r9,65535
1000bde4:	6149883a 	add	r4,r12,r5
1000bde8:	4411883a 	add	r8,r8,r16
1000bdec:	3900a736 	bltu	r7,r4,1000c08c <__divdf3+0x778>
1000bdf0:	3900c426 	beq	r7,r4,1000c104 <__divdf3+0x7f0>
1000bdf4:	3909c83a 	sub	r4,r7,r4
1000bdf8:	b221c83a 	sub	r16,r22,r8
1000bdfc:	b42d803a 	cmpltu	r22,r22,r16
1000be00:	25adc83a 	sub	r22,r4,r22
1000be04:	b5c0c626 	beq	r22,r23,1000c120 <__divdf3+0x80c>
1000be08:	b009883a 	mov	r4,r22
1000be0c:	a80b883a 	mov	r5,r21
1000be10:	000102c0 	call	1000102c <__udivsi3>
1000be14:	1009883a 	mov	r4,r2
1000be18:	980b883a 	mov	r5,r19
1000be1c:	d8800315 	stw	r2,12(sp)
1000be20:	000103c0 	call	1000103c <__mulsi3>
1000be24:	a80b883a 	mov	r5,r21
1000be28:	b009883a 	mov	r4,r22
1000be2c:	d8800415 	stw	r2,16(sp)
1000be30:	00010340 	call	10001034 <__umodsi3>
1000be34:	1004943a 	slli	r2,r2,16
1000be38:	800ed43a 	srli	r7,r16,16
1000be3c:	da400417 	ldw	r9,16(sp)
1000be40:	da000317 	ldw	r8,12(sp)
1000be44:	11cab03a 	or	r5,r2,r7
1000be48:	2a40062e 	bgeu	r5,r9,1000be64 <__divdf3+0x550>
1000be4c:	2dcb883a 	add	r5,r5,r23
1000be50:	40bfffc4 	addi	r2,r8,-1
1000be54:	2dc0b436 	bltu	r5,r23,1000c128 <__divdf3+0x814>
1000be58:	2a40b32e 	bgeu	r5,r9,1000c128 <__divdf3+0x814>
1000be5c:	423fff84 	addi	r8,r8,-2
1000be60:	2dcb883a 	add	r5,r5,r23
1000be64:	2a6dc83a 	sub	r22,r5,r9
1000be68:	b009883a 	mov	r4,r22
1000be6c:	a80b883a 	mov	r5,r21
1000be70:	da000315 	stw	r8,12(sp)
1000be74:	000102c0 	call	1000102c <__udivsi3>
1000be78:	980b883a 	mov	r5,r19
1000be7c:	1009883a 	mov	r4,r2
1000be80:	d8800415 	stw	r2,16(sp)
1000be84:	000103c0 	call	1000103c <__mulsi3>
1000be88:	b009883a 	mov	r4,r22
1000be8c:	a80b883a 	mov	r5,r21
1000be90:	1027883a 	mov	r19,r2
1000be94:	00010340 	call	10001034 <__umodsi3>
1000be98:	1004943a 	slli	r2,r2,16
1000be9c:	843fffcc 	andi	r16,r16,65535
1000bea0:	da000317 	ldw	r8,12(sp)
1000bea4:	140eb03a 	or	r7,r2,r16
1000bea8:	da400417 	ldw	r9,16(sp)
1000beac:	3cc0062e 	bgeu	r7,r19,1000bec8 <__divdf3+0x5b4>
1000beb0:	3dcf883a 	add	r7,r7,r23
1000beb4:	48bfffc4 	addi	r2,r9,-1
1000beb8:	3dc09d36 	bltu	r7,r23,1000c130 <__divdf3+0x81c>
1000bebc:	3cc09c2e 	bgeu	r7,r19,1000c130 <__divdf3+0x81c>
1000bec0:	4a7fff84 	addi	r9,r9,-2
1000bec4:	3dcf883a 	add	r7,r7,r23
1000bec8:	4010943a 	slli	r8,r8,16
1000becc:	3cebc83a 	sub	r21,r7,r19
1000bed0:	e00b883a 	mov	r5,fp
1000bed4:	4a26b03a 	or	r19,r9,r8
1000bed8:	99ffffcc 	andi	r7,r19,65535
1000bedc:	9820d43a 	srli	r16,r19,16
1000bee0:	3809883a 	mov	r4,r7
1000bee4:	d9c00515 	stw	r7,20(sp)
1000bee8:	000103c0 	call	1000103c <__mulsi3>
1000beec:	8009883a 	mov	r4,r16
1000bef0:	e00b883a 	mov	r5,fp
1000bef4:	102d883a 	mov	r22,r2
1000bef8:	000103c0 	call	1000103c <__mulsi3>
1000befc:	d9400017 	ldw	r5,0(sp)
1000bf00:	8009883a 	mov	r4,r16
1000bf04:	1039883a 	mov	fp,r2
1000bf08:	000103c0 	call	1000103c <__mulsi3>
1000bf0c:	d9c00517 	ldw	r7,20(sp)
1000bf10:	d9400017 	ldw	r5,0(sp)
1000bf14:	1021883a 	mov	r16,r2
1000bf18:	3809883a 	mov	r4,r7
1000bf1c:	000103c0 	call	1000103c <__mulsi3>
1000bf20:	b008d43a 	srli	r4,r22,16
1000bf24:	e085883a 	add	r2,fp,r2
1000bf28:	1109883a 	add	r4,r2,r4
1000bf2c:	2700022e 	bgeu	r4,fp,1000bf38 <__divdf3+0x624>
1000bf30:	00800074 	movhi	r2,1
1000bf34:	80a1883a 	add	r16,r16,r2
1000bf38:	200ad43a 	srli	r5,r4,16
1000bf3c:	2008943a 	slli	r4,r4,16
1000bf40:	b5bfffcc 	andi	r22,r22,65535
1000bf44:	8145883a 	add	r2,r16,r5
1000bf48:	2589883a 	add	r4,r4,r22
1000bf4c:	a8802c36 	bltu	r21,r2,1000c000 <__divdf3+0x6ec>
1000bf50:	a880a426 	beq	r21,r2,1000c1e4 <__divdf3+0x8d0>
1000bf54:	9cc00054 	ori	r19,r19,1
1000bf58:	9200ffc4 	addi	r8,r18,1023
1000bf5c:	023f270e 	bge	zero,r8,1000bbfc <__alt_data_end+0xf800bbfc>
1000bf60:	988001cc 	andi	r2,r19,7
1000bf64:	10000726 	beq	r2,zero,1000bf84 <__divdf3+0x670>
1000bf68:	990003cc 	andi	r4,r19,15
1000bf6c:	00800104 	movi	r2,4
1000bf70:	20800426 	beq	r4,r2,1000bf84 <__divdf3+0x670>
1000bf74:	9885883a 	add	r2,r19,r2
1000bf78:	14e7803a 	cmpltu	r19,r2,r19
1000bf7c:	8ce3883a 	add	r17,r17,r19
1000bf80:	1027883a 	mov	r19,r2
1000bf84:	8880402c 	andhi	r2,r17,256
1000bf88:	10000426 	beq	r2,zero,1000bf9c <__divdf3+0x688>
1000bf8c:	00bfc034 	movhi	r2,65280
1000bf90:	10bfffc4 	addi	r2,r2,-1
1000bf94:	92010004 	addi	r8,r18,1024
1000bf98:	88a2703a 	and	r17,r17,r2
1000bf9c:	0081ff84 	movi	r2,2046
1000bfa0:	123eb616 	blt	r2,r8,1000ba7c <__alt_data_end+0xf800ba7c>
1000bfa4:	9826d0fa 	srli	r19,r19,3
1000bfa8:	8804977a 	slli	r2,r17,29
1000bfac:	8820927a 	slli	r16,r17,9
1000bfb0:	4201ffcc 	andi	r8,r8,2047
1000bfb4:	14e6b03a 	or	r19,r2,r19
1000bfb8:	800ad33a 	srli	r5,r16,12
1000bfbc:	a180004c 	andi	r6,r20,1
1000bfc0:	003eb206 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000bfc4:	008000c4 	movi	r2,3
1000bfc8:	4080ac26 	beq	r8,r2,1000c27c <__divdf3+0x968>
1000bfcc:	00800044 	movi	r2,1
1000bfd0:	4080591e 	bne	r8,r2,1000c138 <__divdf3+0x824>
1000bfd4:	e00d883a 	mov	r6,fp
1000bfd8:	0011883a 	mov	r8,zero
1000bfdc:	000b883a 	mov	r5,zero
1000bfe0:	0027883a 	mov	r19,zero
1000bfe4:	003ea906 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000bfe8:	00800434 	movhi	r2,16
1000bfec:	89400234 	orhi	r5,r17,8
1000bff0:	10bfffc4 	addi	r2,r2,-1
1000bff4:	b00d883a 	mov	r6,r22
1000bff8:	288a703a 	and	r5,r5,r2
1000bffc:	003efd06 	br	1000bbf4 <__alt_data_end+0xf800bbf4>
1000c000:	adcf883a 	add	r7,r21,r23
1000c004:	997fffc4 	addi	r5,r19,-1
1000c008:	3dc0412e 	bgeu	r7,r23,1000c110 <__divdf3+0x7fc>
1000c00c:	2827883a 	mov	r19,r5
1000c010:	38bfd01e 	bne	r7,r2,1000bf54 <__alt_data_end+0xf800bf54>
1000c014:	d8c00117 	ldw	r3,4(sp)
1000c018:	193fce1e 	bne	r3,r4,1000bf54 <__alt_data_end+0xf800bf54>
1000c01c:	003fce06 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c020:	d9800215 	stw	r6,8(sp)
1000c024:	d9c00515 	stw	r7,20(sp)
1000c028:	000d8100 	call	1000d810 <__clzsi2>
1000c02c:	10c00804 	addi	r3,r2,32
1000c030:	010009c4 	movi	r4,39
1000c034:	d9800217 	ldw	r6,8(sp)
1000c038:	d9c00517 	ldw	r7,20(sp)
1000c03c:	20feb20e 	bge	r4,r3,1000bb08 <__alt_data_end+0xf800bb08>
1000c040:	117ffe04 	addi	r5,r2,-8
1000c044:	a162983a 	sll	r17,r20,r5
1000c048:	0027883a 	mov	r19,zero
1000c04c:	003eb506 	br	1000bb24 <__alt_data_end+0xf800bb24>
1000c050:	3009883a 	mov	r4,r6
1000c054:	d9800215 	stw	r6,8(sp)
1000c058:	da000315 	stw	r8,12(sp)
1000c05c:	da400415 	stw	r9,16(sp)
1000c060:	000d8100 	call	1000d810 <__clzsi2>
1000c064:	10c00804 	addi	r3,r2,32
1000c068:	010009c4 	movi	r4,39
1000c06c:	d9800217 	ldw	r6,8(sp)
1000c070:	da000317 	ldw	r8,12(sp)
1000c074:	da400417 	ldw	r9,16(sp)
1000c078:	20fec10e 	bge	r4,r3,1000bb80 <__alt_data_end+0xf800bb80>
1000c07c:	10bffe04 	addi	r2,r2,-8
1000c080:	a8a0983a 	sll	r16,r21,r2
1000c084:	002b883a 	mov	r21,zero
1000c088:	003ec406 	br	1000bb9c <__alt_data_end+0xf800bb9c>
1000c08c:	d8c00117 	ldw	r3,4(sp)
1000c090:	b0ed883a 	add	r22,r22,r3
1000c094:	b0c5803a 	cmpltu	r2,r22,r3
1000c098:	15c5883a 	add	r2,r2,r23
1000c09c:	11cf883a 	add	r7,r2,r7
1000c0a0:	88bfffc4 	addi	r2,r17,-1
1000c0a4:	b9c00d2e 	bgeu	r23,r7,1000c0dc <__divdf3+0x7c8>
1000c0a8:	39003f36 	bltu	r7,r4,1000c1a8 <__divdf3+0x894>
1000c0ac:	21c06a26 	beq	r4,r7,1000c258 <__divdf3+0x944>
1000c0b0:	3909c83a 	sub	r4,r7,r4
1000c0b4:	1023883a 	mov	r17,r2
1000c0b8:	003f4f06 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000c0bc:	9d7ee536 	bltu	r19,r21,1000bc54 <__alt_data_end+0xf800bc54>
1000c0c0:	982ed07a 	srli	r23,r19,1
1000c0c4:	880497fa 	slli	r2,r17,31
1000c0c8:	8810d07a 	srli	r8,r17,1
1000c0cc:	982c97fa 	slli	r22,r19,31
1000c0d0:	b884b03a 	or	r2,r23,r2
1000c0d4:	d8800015 	stw	r2,0(sp)
1000c0d8:	003ee206 	br	1000bc64 <__alt_data_end+0xf800bc64>
1000c0dc:	3dfff41e 	bne	r7,r23,1000c0b0 <__alt_data_end+0xf800c0b0>
1000c0e0:	d8c00117 	ldw	r3,4(sp)
1000c0e4:	b0fff02e 	bgeu	r22,r3,1000c0a8 <__alt_data_end+0xf800c0a8>
1000c0e8:	b909c83a 	sub	r4,r23,r4
1000c0ec:	1023883a 	mov	r17,r2
1000c0f0:	003f4106 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000c0f4:	1021883a 	mov	r16,r2
1000c0f8:	003f1106 	br	1000bd40 <__alt_data_end+0xf800bd40>
1000c0fc:	1023883a 	mov	r17,r2
1000c100:	003ef706 	br	1000bce0 <__alt_data_end+0xf800bce0>
1000c104:	b23fe136 	bltu	r22,r8,1000c08c <__alt_data_end+0xf800c08c>
1000c108:	0009883a 	mov	r4,zero
1000c10c:	003f3a06 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000c110:	38802c36 	bltu	r7,r2,1000c1c4 <__divdf3+0x8b0>
1000c114:	11c05326 	beq	r2,r7,1000c264 <__divdf3+0x950>
1000c118:	2827883a 	mov	r19,r5
1000c11c:	003f8d06 	br	1000bf54 <__alt_data_end+0xf800bf54>
1000c120:	04ffffc4 	movi	r19,-1
1000c124:	003f8c06 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c128:	1011883a 	mov	r8,r2
1000c12c:	003f4d06 	br	1000be64 <__alt_data_end+0xf800be64>
1000c130:	1013883a 	mov	r9,r2
1000c134:	003f6406 	br	1000bec8 <__alt_data_end+0xf800bec8>
1000c138:	e029883a 	mov	r20,fp
1000c13c:	003f8606 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c140:	008007c4 	movi	r2,31
1000c144:	14002a16 	blt	r2,r16,1000c1f0 <__divdf3+0x8dc>
1000c148:	91410784 	addi	r5,r18,1054
1000c14c:	9c0cd83a 	srl	r6,r19,r16
1000c150:	8948983a 	sll	r4,r17,r5
1000c154:	9944983a 	sll	r2,r19,r5
1000c158:	8c20d83a 	srl	r16,r17,r16
1000c15c:	3108b03a 	or	r4,r6,r4
1000c160:	1004c03a 	cmpne	r2,r2,zero
1000c164:	2084b03a 	or	r2,r4,r2
1000c168:	110001cc 	andi	r4,r2,7
1000c16c:	20000726 	beq	r4,zero,1000c18c <__divdf3+0x878>
1000c170:	114003cc 	andi	r5,r2,15
1000c174:	01000104 	movi	r4,4
1000c178:	29000426 	beq	r5,r4,1000c18c <__divdf3+0x878>
1000c17c:	11000104 	addi	r4,r2,4
1000c180:	2085803a 	cmpltu	r2,r4,r2
1000c184:	80a1883a 	add	r16,r16,r2
1000c188:	2005883a 	mov	r2,r4
1000c18c:	8100202c 	andhi	r4,r16,128
1000c190:	20002d26 	beq	r4,zero,1000c248 <__divdf3+0x934>
1000c194:	a180004c 	andi	r6,r20,1
1000c198:	02000044 	movi	r8,1
1000c19c:	000b883a 	mov	r5,zero
1000c1a0:	0027883a 	mov	r19,zero
1000c1a4:	003e3906 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000c1a8:	d8c00117 	ldw	r3,4(sp)
1000c1ac:	8c7fff84 	addi	r17,r17,-2
1000c1b0:	b0ed883a 	add	r22,r22,r3
1000c1b4:	b0c5803a 	cmpltu	r2,r22,r3
1000c1b8:	15c5883a 	add	r2,r2,r23
1000c1bc:	11cf883a 	add	r7,r2,r7
1000c1c0:	003f0c06 	br	1000bdf4 <__alt_data_end+0xf800bdf4>
1000c1c4:	d8c00117 	ldw	r3,4(sp)
1000c1c8:	997fff84 	addi	r5,r19,-2
1000c1cc:	18d1883a 	add	r8,r3,r3
1000c1d0:	40c7803a 	cmpltu	r3,r8,r3
1000c1d4:	1dcd883a 	add	r6,r3,r23
1000c1d8:	398f883a 	add	r7,r7,r6
1000c1dc:	da000115 	stw	r8,4(sp)
1000c1e0:	003f8a06 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c1e4:	203f861e 	bne	r4,zero,1000c000 <__alt_data_end+0xf800c000>
1000c1e8:	d8000115 	stw	zero,4(sp)
1000c1ec:	003f8906 	br	1000c014 <__alt_data_end+0xf800c014>
1000c1f0:	00bef884 	movi	r2,-1054
1000c1f4:	1485c83a 	sub	r2,r2,r18
1000c1f8:	01000804 	movi	r4,32
1000c1fc:	8884d83a 	srl	r2,r17,r2
1000c200:	81001c26 	beq	r16,r4,1000c274 <__divdf3+0x960>
1000c204:	91010f84 	addi	r4,r18,1086
1000c208:	8908983a 	sll	r4,r17,r4
1000c20c:	24c8b03a 	or	r4,r4,r19
1000c210:	2008c03a 	cmpne	r4,r4,zero
1000c214:	2084b03a 	or	r2,r4,r2
1000c218:	140001cc 	andi	r16,r2,7
1000c21c:	8000061e 	bne	r16,zero,1000c238 <__divdf3+0x924>
1000c220:	000b883a 	mov	r5,zero
1000c224:	1004d0fa 	srli	r2,r2,3
1000c228:	a180004c 	andi	r6,r20,1
1000c22c:	0011883a 	mov	r8,zero
1000c230:	1426b03a 	or	r19,r2,r16
1000c234:	003e1506 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000c238:	114003cc 	andi	r5,r2,15
1000c23c:	01000104 	movi	r4,4
1000c240:	0021883a 	mov	r16,zero
1000c244:	293fcd1e 	bne	r5,r4,1000c17c <__alt_data_end+0xf800c17c>
1000c248:	800a927a 	slli	r5,r16,9
1000c24c:	8020977a 	slli	r16,r16,29
1000c250:	280ad33a 	srli	r5,r5,12
1000c254:	003ff306 	br	1000c224 <__alt_data_end+0xf800c224>
1000c258:	b23fd336 	bltu	r22,r8,1000c1a8 <__alt_data_end+0xf800c1a8>
1000c25c:	1023883a 	mov	r17,r2
1000c260:	003fa906 	br	1000c108 <__alt_data_end+0xf800c108>
1000c264:	d8c00117 	ldw	r3,4(sp)
1000c268:	193fd636 	bltu	r3,r4,1000c1c4 <__alt_data_end+0xf800c1c4>
1000c26c:	2827883a 	mov	r19,r5
1000c270:	003f6806 	br	1000c014 <__alt_data_end+0xf800c014>
1000c274:	0009883a 	mov	r4,zero
1000c278:	003fe406 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c27c:	00800434 	movhi	r2,16
1000c280:	89400234 	orhi	r5,r17,8
1000c284:	10bfffc4 	addi	r2,r2,-1
1000c288:	e00d883a 	mov	r6,fp
1000c28c:	288a703a 	and	r5,r5,r2
1000c290:	003e5806 	br	1000bbf4 <__alt_data_end+0xf800bbf4>

1000c294 <__eqdf2>:
1000c294:	2804d53a 	srli	r2,r5,20
1000c298:	3806d53a 	srli	r3,r7,20
1000c29c:	02000434 	movhi	r8,16
1000c2a0:	423fffc4 	addi	r8,r8,-1
1000c2a4:	1081ffcc 	andi	r2,r2,2047
1000c2a8:	0241ffc4 	movi	r9,2047
1000c2ac:	2a14703a 	and	r10,r5,r8
1000c2b0:	18c1ffcc 	andi	r3,r3,2047
1000c2b4:	3a10703a 	and	r8,r7,r8
1000c2b8:	280ad7fa 	srli	r5,r5,31
1000c2bc:	380ed7fa 	srli	r7,r7,31
1000c2c0:	12400f26 	beq	r2,r9,1000c300 <__eqdf2+0x6c>
1000c2c4:	0241ffc4 	movi	r9,2047
1000c2c8:	1a400326 	beq	r3,r9,1000c2d8 <__eqdf2+0x44>
1000c2cc:	10c00526 	beq	r2,r3,1000c2e4 <__eqdf2+0x50>
1000c2d0:	00800044 	movi	r2,1
1000c2d4:	f800283a 	ret
1000c2d8:	4192b03a 	or	r9,r8,r6
1000c2dc:	483ffc1e 	bne	r9,zero,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2e0:	10fffb1e 	bne	r2,r3,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2e4:	523ffa1e 	bne	r10,r8,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2e8:	21bff91e 	bne	r4,r6,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2ec:	29c00826 	beq	r5,r7,1000c310 <__eqdf2+0x7c>
1000c2f0:	103ff71e 	bne	r2,zero,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2f4:	5104b03a 	or	r2,r10,r4
1000c2f8:	1004c03a 	cmpne	r2,r2,zero
1000c2fc:	f800283a 	ret
1000c300:	5112b03a 	or	r9,r10,r4
1000c304:	483fef26 	beq	r9,zero,1000c2c4 <__alt_data_end+0xf800c2c4>
1000c308:	00800044 	movi	r2,1
1000c30c:	f800283a 	ret
1000c310:	0005883a 	mov	r2,zero
1000c314:	f800283a 	ret

1000c318 <__gedf2>:
1000c318:	2804d53a 	srli	r2,r5,20
1000c31c:	3806d53a 	srli	r3,r7,20
1000c320:	02000434 	movhi	r8,16
1000c324:	423fffc4 	addi	r8,r8,-1
1000c328:	0241ffc4 	movi	r9,2047
1000c32c:	1081ffcc 	andi	r2,r2,2047
1000c330:	2a14703a 	and	r10,r5,r8
1000c334:	1a46703a 	and	r3,r3,r9
1000c338:	3a10703a 	and	r8,r7,r8
1000c33c:	280ad7fa 	srli	r5,r5,31
1000c340:	380ed7fa 	srli	r7,r7,31
1000c344:	12400b26 	beq	r2,r9,1000c374 <__gedf2+0x5c>
1000c348:	1a401626 	beq	r3,r9,1000c3a4 <__gedf2+0x8c>
1000c34c:	10000c1e 	bne	r2,zero,1000c380 <__gedf2+0x68>
1000c350:	5112b03a 	or	r9,r10,r4
1000c354:	4813003a 	cmpeq	r9,r9,zero
1000c358:	4817883a 	mov	r11,r9
1000c35c:	18000c1e 	bne	r3,zero,1000c390 <__gedf2+0x78>
1000c360:	4198b03a 	or	r12,r8,r6
1000c364:	60000a1e 	bne	r12,zero,1000c390 <__gedf2+0x78>
1000c368:	48001326 	beq	r9,zero,1000c3b8 <__gedf2+0xa0>
1000c36c:	0005883a 	mov	r2,zero
1000c370:	f800283a 	ret
1000c374:	5112b03a 	or	r9,r10,r4
1000c378:	4800191e 	bne	r9,zero,1000c3e0 <__gedf2+0xc8>
1000c37c:	18800926 	beq	r3,r2,1000c3a4 <__gedf2+0x8c>
1000c380:	18000b1e 	bne	r3,zero,1000c3b0 <__gedf2+0x98>
1000c384:	4192b03a 	or	r9,r8,r6
1000c388:	0017883a 	mov	r11,zero
1000c38c:	48000a26 	beq	r9,zero,1000c3b8 <__gedf2+0xa0>
1000c390:	39c03fcc 	andi	r7,r7,255
1000c394:	58000726 	beq	r11,zero,1000c3b4 <__gedf2+0x9c>
1000c398:	3800081e 	bne	r7,zero,1000c3bc <__gedf2+0xa4>
1000c39c:	00bfffc4 	movi	r2,-1
1000c3a0:	f800283a 	ret
1000c3a4:	4192b03a 	or	r9,r8,r6
1000c3a8:	48000d1e 	bne	r9,zero,1000c3e0 <__gedf2+0xc8>
1000c3ac:	103fe826 	beq	r2,zero,1000c350 <__alt_data_end+0xf800c350>
1000c3b0:	39c03fcc 	andi	r7,r7,255
1000c3b4:	29c00326 	beq	r5,r7,1000c3c4 <__gedf2+0xac>
1000c3b8:	283ff81e 	bne	r5,zero,1000c39c <__alt_data_end+0xf800c39c>
1000c3bc:	00800044 	movi	r2,1
1000c3c0:	f800283a 	ret
1000c3c4:	18bffc16 	blt	r3,r2,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c3c8:	10c00316 	blt	r2,r3,1000c3d8 <__gedf2+0xc0>
1000c3cc:	42bffa36 	bltu	r8,r10,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c3d0:	52000526 	beq	r10,r8,1000c3e8 <__gedf2+0xd0>
1000c3d4:	523fe52e 	bgeu	r10,r8,1000c36c <__alt_data_end+0xf800c36c>
1000c3d8:	283ff026 	beq	r5,zero,1000c39c <__alt_data_end+0xf800c39c>
1000c3dc:	003ff706 	br	1000c3bc <__alt_data_end+0xf800c3bc>
1000c3e0:	00bfff84 	movi	r2,-2
1000c3e4:	f800283a 	ret
1000c3e8:	313ff336 	bltu	r6,r4,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c3ec:	21bfdf2e 	bgeu	r4,r6,1000c36c <__alt_data_end+0xf800c36c>
1000c3f0:	283fea26 	beq	r5,zero,1000c39c <__alt_data_end+0xf800c39c>
1000c3f4:	003ff106 	br	1000c3bc <__alt_data_end+0xf800c3bc>

1000c3f8 <__ledf2>:
1000c3f8:	2804d53a 	srli	r2,r5,20
1000c3fc:	3810d53a 	srli	r8,r7,20
1000c400:	00c00434 	movhi	r3,16
1000c404:	18ffffc4 	addi	r3,r3,-1
1000c408:	0241ffc4 	movi	r9,2047
1000c40c:	1081ffcc 	andi	r2,r2,2047
1000c410:	28d4703a 	and	r10,r5,r3
1000c414:	4250703a 	and	r8,r8,r9
1000c418:	38c6703a 	and	r3,r7,r3
1000c41c:	280ad7fa 	srli	r5,r5,31
1000c420:	380ed7fa 	srli	r7,r7,31
1000c424:	12400b26 	beq	r2,r9,1000c454 <__ledf2+0x5c>
1000c428:	42401926 	beq	r8,r9,1000c490 <__ledf2+0x98>
1000c42c:	10000c1e 	bne	r2,zero,1000c460 <__ledf2+0x68>
1000c430:	5112b03a 	or	r9,r10,r4
1000c434:	4813003a 	cmpeq	r9,r9,zero
1000c438:	4817883a 	mov	r11,r9
1000c43c:	40000f26 	beq	r8,zero,1000c47c <__ledf2+0x84>
1000c440:	39c03fcc 	andi	r7,r7,255
1000c444:	58001826 	beq	r11,zero,1000c4a8 <__ledf2+0xb0>
1000c448:	38000a1e 	bne	r7,zero,1000c474 <__ledf2+0x7c>
1000c44c:	00bfffc4 	movi	r2,-1
1000c450:	f800283a 	ret
1000c454:	5112b03a 	or	r9,r10,r4
1000c458:	48000f1e 	bne	r9,zero,1000c498 <__ledf2+0xa0>
1000c45c:	40800c26 	beq	r8,r2,1000c490 <__ledf2+0x98>
1000c460:	4000101e 	bne	r8,zero,1000c4a4 <__ledf2+0xac>
1000c464:	1992b03a 	or	r9,r3,r6
1000c468:	0017883a 	mov	r11,zero
1000c46c:	483ff41e 	bne	r9,zero,1000c440 <__alt_data_end+0xf800c440>
1000c470:	283ff61e 	bne	r5,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c474:	00800044 	movi	r2,1
1000c478:	f800283a 	ret
1000c47c:	1998b03a 	or	r12,r3,r6
1000c480:	603fef1e 	bne	r12,zero,1000c440 <__alt_data_end+0xf800c440>
1000c484:	483ffa26 	beq	r9,zero,1000c470 <__alt_data_end+0xf800c470>
1000c488:	0005883a 	mov	r2,zero
1000c48c:	f800283a 	ret
1000c490:	1992b03a 	or	r9,r3,r6
1000c494:	48000226 	beq	r9,zero,1000c4a0 <__ledf2+0xa8>
1000c498:	00800084 	movi	r2,2
1000c49c:	f800283a 	ret
1000c4a0:	103fe326 	beq	r2,zero,1000c430 <__alt_data_end+0xf800c430>
1000c4a4:	39c03fcc 	andi	r7,r7,255
1000c4a8:	29fff11e 	bne	r5,r7,1000c470 <__alt_data_end+0xf800c470>
1000c4ac:	40bff016 	blt	r8,r2,1000c470 <__alt_data_end+0xf800c470>
1000c4b0:	12000316 	blt	r2,r8,1000c4c0 <__ledf2+0xc8>
1000c4b4:	1abfee36 	bltu	r3,r10,1000c470 <__alt_data_end+0xf800c470>
1000c4b8:	50c00326 	beq	r10,r3,1000c4c8 <__ledf2+0xd0>
1000c4bc:	50fff22e 	bgeu	r10,r3,1000c488 <__alt_data_end+0xf800c488>
1000c4c0:	283fe226 	beq	r5,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c4c4:	003feb06 	br	1000c474 <__alt_data_end+0xf800c474>
1000c4c8:	313fe936 	bltu	r6,r4,1000c470 <__alt_data_end+0xf800c470>
1000c4cc:	21bfee2e 	bgeu	r4,r6,1000c488 <__alt_data_end+0xf800c488>
1000c4d0:	283fde26 	beq	r5,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c4d4:	003fe706 	br	1000c474 <__alt_data_end+0xf800c474>

1000c4d8 <__muldf3>:
1000c4d8:	deffee04 	addi	sp,sp,-72
1000c4dc:	dd000c15 	stw	r20,48(sp)
1000c4e0:	2828d53a 	srli	r20,r5,20
1000c4e4:	dd400d15 	stw	r21,52(sp)
1000c4e8:	282ad7fa 	srli	r21,r5,31
1000c4ec:	dc000815 	stw	r16,32(sp)
1000c4f0:	04000434 	movhi	r16,16
1000c4f4:	ddc00f15 	stw	r23,60(sp)
1000c4f8:	dcc00b15 	stw	r19,44(sp)
1000c4fc:	dc800a15 	stw	r18,40(sp)
1000c500:	843fffc4 	addi	r16,r16,-1
1000c504:	dfc01115 	stw	ra,68(sp)
1000c508:	df001015 	stw	fp,64(sp)
1000c50c:	dd800e15 	stw	r22,56(sp)
1000c510:	dc400915 	stw	r17,36(sp)
1000c514:	a501ffcc 	andi	r20,r20,2047
1000c518:	2025883a 	mov	r18,r4
1000c51c:	202f883a 	mov	r23,r4
1000c520:	2c20703a 	and	r16,r5,r16
1000c524:	a827883a 	mov	r19,r21
1000c528:	aa403fcc 	andi	r9,r21,255
1000c52c:	a0005926 	beq	r20,zero,1000c694 <__muldf3+0x1bc>
1000c530:	0081ffc4 	movi	r2,2047
1000c534:	a0803426 	beq	r20,r2,1000c608 <__muldf3+0x130>
1000c538:	84000434 	orhi	r16,r16,16
1000c53c:	2004d77a 	srli	r2,r4,29
1000c540:	802090fa 	slli	r16,r16,3
1000c544:	202e90fa 	slli	r23,r4,3
1000c548:	a53f0044 	addi	r20,r20,-1023
1000c54c:	80a0b03a 	or	r16,r16,r2
1000c550:	000b883a 	mov	r5,zero
1000c554:	0039883a 	mov	fp,zero
1000c558:	3806d53a 	srli	r3,r7,20
1000c55c:	382cd7fa 	srli	r22,r7,31
1000c560:	00800434 	movhi	r2,16
1000c564:	10bfffc4 	addi	r2,r2,-1
1000c568:	18c1ffcc 	andi	r3,r3,2047
1000c56c:	3025883a 	mov	r18,r6
1000c570:	38a2703a 	and	r17,r7,r2
1000c574:	b2803fcc 	andi	r10,r22,255
1000c578:	18006426 	beq	r3,zero,1000c70c <__muldf3+0x234>
1000c57c:	0081ffc4 	movi	r2,2047
1000c580:	18805c26 	beq	r3,r2,1000c6f4 <__muldf3+0x21c>
1000c584:	8c400434 	orhi	r17,r17,16
1000c588:	3004d77a 	srli	r2,r6,29
1000c58c:	882290fa 	slli	r17,r17,3
1000c590:	302490fa 	slli	r18,r6,3
1000c594:	18ff0044 	addi	r3,r3,-1023
1000c598:	88a2b03a 	or	r17,r17,r2
1000c59c:	000f883a 	mov	r7,zero
1000c5a0:	394ab03a 	or	r5,r7,r5
1000c5a4:	280a90ba 	slli	r5,r5,2
1000c5a8:	00840074 	movhi	r2,4097
1000c5ac:	10b17204 	addi	r2,r2,-14904
1000c5b0:	288b883a 	add	r5,r5,r2
1000c5b4:	28800017 	ldw	r2,0(r5)
1000c5b8:	a0c7883a 	add	r3,r20,r3
1000c5bc:	b54cf03a 	xor	r6,r22,r21
1000c5c0:	1a000044 	addi	r8,r3,1
1000c5c4:	1000683a 	jmp	r2
1000c5c8:	1000c80c 	andi	zero,r2,800
1000c5cc:	1000c7f8 	rdprs	zero,r2,799
1000c5d0:	1000c7f8 	rdprs	zero,r2,799
1000c5d4:	1000c7e4 	muli	zero,r2,799
1000c5d8:	1000c624 	muli	zero,r2,792
1000c5dc:	1000c624 	muli	zero,r2,792
1000c5e0:	1000c7cc 	andi	zero,r2,799
1000c5e4:	1000c7e4 	muli	zero,r2,799
1000c5e8:	1000c624 	muli	zero,r2,792
1000c5ec:	1000c7cc 	andi	zero,r2,799
1000c5f0:	1000c624 	muli	zero,r2,792
1000c5f4:	1000c7e4 	muli	zero,r2,799
1000c5f8:	1000c628 	cmpgeui	zero,r2,792
1000c5fc:	1000c628 	cmpgeui	zero,r2,792
1000c600:	1000c628 	cmpgeui	zero,r2,792
1000c604:	1000cb48 	cmpgei	zero,r2,813
1000c608:	8104b03a 	or	r2,r16,r4
1000c60c:	10006c1e 	bne	r2,zero,1000c7c0 <__muldf3+0x2e8>
1000c610:	01400204 	movi	r5,8
1000c614:	0021883a 	mov	r16,zero
1000c618:	002f883a 	mov	r23,zero
1000c61c:	07000084 	movi	fp,2
1000c620:	003fcd06 	br	1000c558 <__alt_data_end+0xf800c558>
1000c624:	3013883a 	mov	r9,r6
1000c628:	00800084 	movi	r2,2
1000c62c:	e080501e 	bne	fp,r2,1000c770 <__muldf3+0x298>
1000c630:	4cc0004c 	andi	r19,r9,1
1000c634:	0101ffc4 	movi	r4,2047
1000c638:	0021883a 	mov	r16,zero
1000c63c:	002f883a 	mov	r23,zero
1000c640:	2008953a 	slli	r4,r4,20
1000c644:	98c03fcc 	andi	r3,r19,255
1000c648:	04400434 	movhi	r17,16
1000c64c:	8c7fffc4 	addi	r17,r17,-1
1000c650:	180697fa 	slli	r3,r3,31
1000c654:	8460703a 	and	r16,r16,r17
1000c658:	8120b03a 	or	r16,r16,r4
1000c65c:	80c6b03a 	or	r3,r16,r3
1000c660:	b805883a 	mov	r2,r23
1000c664:	dfc01117 	ldw	ra,68(sp)
1000c668:	df001017 	ldw	fp,64(sp)
1000c66c:	ddc00f17 	ldw	r23,60(sp)
1000c670:	dd800e17 	ldw	r22,56(sp)
1000c674:	dd400d17 	ldw	r21,52(sp)
1000c678:	dd000c17 	ldw	r20,48(sp)
1000c67c:	dcc00b17 	ldw	r19,44(sp)
1000c680:	dc800a17 	ldw	r18,40(sp)
1000c684:	dc400917 	ldw	r17,36(sp)
1000c688:	dc000817 	ldw	r16,32(sp)
1000c68c:	dec01204 	addi	sp,sp,72
1000c690:	f800283a 	ret
1000c694:	8104b03a 	or	r2,r16,r4
1000c698:	10004426 	beq	r2,zero,1000c7ac <__muldf3+0x2d4>
1000c69c:	80014b26 	beq	r16,zero,1000cbcc <__muldf3+0x6f4>
1000c6a0:	8009883a 	mov	r4,r16
1000c6a4:	d9800715 	stw	r6,28(sp)
1000c6a8:	d9c00215 	stw	r7,8(sp)
1000c6ac:	da400415 	stw	r9,16(sp)
1000c6b0:	000d8100 	call	1000d810 <__clzsi2>
1000c6b4:	d9800717 	ldw	r6,28(sp)
1000c6b8:	d9c00217 	ldw	r7,8(sp)
1000c6bc:	da400417 	ldw	r9,16(sp)
1000c6c0:	1007883a 	mov	r3,r2
1000c6c4:	01000a04 	movi	r4,40
1000c6c8:	1dfffe04 	addi	r23,r3,-8
1000c6cc:	20c9c83a 	sub	r4,r4,r3
1000c6d0:	85e0983a 	sll	r16,r16,r23
1000c6d4:	9108d83a 	srl	r4,r18,r4
1000c6d8:	95ee983a 	sll	r23,r18,r23
1000c6dc:	2420b03a 	or	r16,r4,r16
1000c6e0:	053f0344 	movi	r20,-1011
1000c6e4:	a0e9c83a 	sub	r20,r20,r3
1000c6e8:	000b883a 	mov	r5,zero
1000c6ec:	0039883a 	mov	fp,zero
1000c6f0:	003f9906 	br	1000c558 <__alt_data_end+0xf800c558>
1000c6f4:	8984b03a 	or	r2,r17,r6
1000c6f8:	10002a1e 	bne	r2,zero,1000c7a4 <__muldf3+0x2cc>
1000c6fc:	0023883a 	mov	r17,zero
1000c700:	0025883a 	mov	r18,zero
1000c704:	01c00084 	movi	r7,2
1000c708:	003fa506 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c70c:	8984b03a 	or	r2,r17,r6
1000c710:	10002026 	beq	r2,zero,1000c794 <__muldf3+0x2bc>
1000c714:	88011c26 	beq	r17,zero,1000cb88 <__muldf3+0x6b0>
1000c718:	8809883a 	mov	r4,r17
1000c71c:	d9400215 	stw	r5,8(sp)
1000c720:	d9800715 	stw	r6,28(sp)
1000c724:	da400415 	stw	r9,16(sp)
1000c728:	da800315 	stw	r10,12(sp)
1000c72c:	000d8100 	call	1000d810 <__clzsi2>
1000c730:	d9400217 	ldw	r5,8(sp)
1000c734:	d9800717 	ldw	r6,28(sp)
1000c738:	da400417 	ldw	r9,16(sp)
1000c73c:	da800317 	ldw	r10,12(sp)
1000c740:	1007883a 	mov	r3,r2
1000c744:	01000a04 	movi	r4,40
1000c748:	1cbffe04 	addi	r18,r3,-8
1000c74c:	20c9c83a 	sub	r4,r4,r3
1000c750:	8ca2983a 	sll	r17,r17,r18
1000c754:	3108d83a 	srl	r4,r6,r4
1000c758:	34a4983a 	sll	r18,r6,r18
1000c75c:	2462b03a 	or	r17,r4,r17
1000c760:	00bf0344 	movi	r2,-1011
1000c764:	10c7c83a 	sub	r3,r2,r3
1000c768:	000f883a 	mov	r7,zero
1000c76c:	003f8c06 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c770:	008000c4 	movi	r2,3
1000c774:	e0816d26 	beq	fp,r2,1000cd2c <__muldf3+0x854>
1000c778:	00800044 	movi	r2,1
1000c77c:	e081321e 	bne	fp,r2,1000cc48 <__muldf3+0x770>
1000c780:	48a6703a 	and	r19,r9,r2
1000c784:	0009883a 	mov	r4,zero
1000c788:	0021883a 	mov	r16,zero
1000c78c:	002f883a 	mov	r23,zero
1000c790:	003fab06 	br	1000c640 <__alt_data_end+0xf800c640>
1000c794:	0023883a 	mov	r17,zero
1000c798:	0025883a 	mov	r18,zero
1000c79c:	01c00044 	movi	r7,1
1000c7a0:	003f7f06 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c7a4:	01c000c4 	movi	r7,3
1000c7a8:	003f7d06 	br	1000c5a0 <__alt_data_end+0xf800c5a0>
1000c7ac:	01400104 	movi	r5,4
1000c7b0:	0021883a 	mov	r16,zero
1000c7b4:	002f883a 	mov	r23,zero
1000c7b8:	07000044 	movi	fp,1
1000c7bc:	003f6606 	br	1000c558 <__alt_data_end+0xf800c558>
1000c7c0:	01400304 	movi	r5,12
1000c7c4:	070000c4 	movi	fp,3
1000c7c8:	003f6306 	br	1000c558 <__alt_data_end+0xf800c558>
1000c7cc:	04000434 	movhi	r16,16
1000c7d0:	0027883a 	mov	r19,zero
1000c7d4:	843fffc4 	addi	r16,r16,-1
1000c7d8:	05ffffc4 	movi	r23,-1
1000c7dc:	0101ffc4 	movi	r4,2047
1000c7e0:	003f9706 	br	1000c640 <__alt_data_end+0xf800c640>
1000c7e4:	8821883a 	mov	r16,r17
1000c7e8:	902f883a 	mov	r23,r18
1000c7ec:	5013883a 	mov	r9,r10
1000c7f0:	3839883a 	mov	fp,r7
1000c7f4:	003f8c06 	br	1000c628 <__alt_data_end+0xf800c628>
1000c7f8:	8821883a 	mov	r16,r17
1000c7fc:	902f883a 	mov	r23,r18
1000c800:	3013883a 	mov	r9,r6
1000c804:	3839883a 	mov	fp,r7
1000c808:	003f8706 	br	1000c628 <__alt_data_end+0xf800c628>
1000c80c:	b82ad43a 	srli	r21,r23,16
1000c810:	9038d43a 	srli	fp,r18,16
1000c814:	bdffffcc 	andi	r23,r23,65535
1000c818:	94bfffcc 	andi	r18,r18,65535
1000c81c:	9009883a 	mov	r4,r18
1000c820:	b80b883a 	mov	r5,r23
1000c824:	d8c00515 	stw	r3,20(sp)
1000c828:	d9800715 	stw	r6,28(sp)
1000c82c:	da000615 	stw	r8,24(sp)
1000c830:	000103c0 	call	1000103c <__mulsi3>
1000c834:	9009883a 	mov	r4,r18
1000c838:	a80b883a 	mov	r5,r21
1000c83c:	1029883a 	mov	r20,r2
1000c840:	000103c0 	call	1000103c <__mulsi3>
1000c844:	e009883a 	mov	r4,fp
1000c848:	a80b883a 	mov	r5,r21
1000c84c:	102d883a 	mov	r22,r2
1000c850:	000103c0 	call	1000103c <__mulsi3>
1000c854:	e009883a 	mov	r4,fp
1000c858:	b80b883a 	mov	r5,r23
1000c85c:	1027883a 	mov	r19,r2
1000c860:	000103c0 	call	1000103c <__mulsi3>
1000c864:	a008d43a 	srli	r4,r20,16
1000c868:	b085883a 	add	r2,r22,r2
1000c86c:	d8c00517 	ldw	r3,20(sp)
1000c870:	110f883a 	add	r7,r2,r4
1000c874:	d9800717 	ldw	r6,28(sp)
1000c878:	da000617 	ldw	r8,24(sp)
1000c87c:	3d80022e 	bgeu	r7,r22,1000c888 <__muldf3+0x3b0>
1000c880:	00800074 	movhi	r2,1
1000c884:	98a7883a 	add	r19,r19,r2
1000c888:	3804943a 	slli	r2,r7,16
1000c88c:	380ed43a 	srli	r7,r7,16
1000c890:	882cd43a 	srli	r22,r17,16
1000c894:	a53fffcc 	andi	r20,r20,65535
1000c898:	8c7fffcc 	andi	r17,r17,65535
1000c89c:	1529883a 	add	r20,r2,r20
1000c8a0:	8809883a 	mov	r4,r17
1000c8a4:	b80b883a 	mov	r5,r23
1000c8a8:	d8c00515 	stw	r3,20(sp)
1000c8ac:	d9800715 	stw	r6,28(sp)
1000c8b0:	da000615 	stw	r8,24(sp)
1000c8b4:	d9c00015 	stw	r7,0(sp)
1000c8b8:	dd000115 	stw	r20,4(sp)
1000c8bc:	000103c0 	call	1000103c <__mulsi3>
1000c8c0:	a80b883a 	mov	r5,r21
1000c8c4:	8809883a 	mov	r4,r17
1000c8c8:	d8800415 	stw	r2,16(sp)
1000c8cc:	000103c0 	call	1000103c <__mulsi3>
1000c8d0:	a80b883a 	mov	r5,r21
1000c8d4:	b009883a 	mov	r4,r22
1000c8d8:	1029883a 	mov	r20,r2
1000c8dc:	000103c0 	call	1000103c <__mulsi3>
1000c8e0:	b009883a 	mov	r4,r22
1000c8e4:	b80b883a 	mov	r5,r23
1000c8e8:	102b883a 	mov	r21,r2
1000c8ec:	000103c0 	call	1000103c <__mulsi3>
1000c8f0:	da400417 	ldw	r9,16(sp)
1000c8f4:	a085883a 	add	r2,r20,r2
1000c8f8:	d8c00517 	ldw	r3,20(sp)
1000c8fc:	4808d43a 	srli	r4,r9,16
1000c900:	d9800717 	ldw	r6,28(sp)
1000c904:	da000617 	ldw	r8,24(sp)
1000c908:	1109883a 	add	r4,r2,r4
1000c90c:	2500022e 	bgeu	r4,r20,1000c918 <__muldf3+0x440>
1000c910:	00800074 	movhi	r2,1
1000c914:	a8ab883a 	add	r21,r21,r2
1000c918:	200e943a 	slli	r7,r4,16
1000c91c:	2004d43a 	srli	r2,r4,16
1000c920:	802ed43a 	srli	r23,r16,16
1000c924:	843fffcc 	andi	r16,r16,65535
1000c928:	4d3fffcc 	andi	r20,r9,65535
1000c92c:	9009883a 	mov	r4,r18
1000c930:	800b883a 	mov	r5,r16
1000c934:	3d29883a 	add	r20,r7,r20
1000c938:	d8c00515 	stw	r3,20(sp)
1000c93c:	d9800715 	stw	r6,28(sp)
1000c940:	da000615 	stw	r8,24(sp)
1000c944:	a8ab883a 	add	r21,r21,r2
1000c948:	000103c0 	call	1000103c <__mulsi3>
1000c94c:	9009883a 	mov	r4,r18
1000c950:	b80b883a 	mov	r5,r23
1000c954:	d8800315 	stw	r2,12(sp)
1000c958:	000103c0 	call	1000103c <__mulsi3>
1000c95c:	e009883a 	mov	r4,fp
1000c960:	b80b883a 	mov	r5,r23
1000c964:	1025883a 	mov	r18,r2
1000c968:	000103c0 	call	1000103c <__mulsi3>
1000c96c:	e009883a 	mov	r4,fp
1000c970:	800b883a 	mov	r5,r16
1000c974:	d8800215 	stw	r2,8(sp)
1000c978:	000103c0 	call	1000103c <__mulsi3>
1000c97c:	da800317 	ldw	r10,12(sp)
1000c980:	d9400017 	ldw	r5,0(sp)
1000c984:	9085883a 	add	r2,r18,r2
1000c988:	5008d43a 	srli	r4,r10,16
1000c98c:	a153883a 	add	r9,r20,r5
1000c990:	d8c00517 	ldw	r3,20(sp)
1000c994:	1109883a 	add	r4,r2,r4
1000c998:	d9800717 	ldw	r6,28(sp)
1000c99c:	da000617 	ldw	r8,24(sp)
1000c9a0:	dac00217 	ldw	r11,8(sp)
1000c9a4:	2480022e 	bgeu	r4,r18,1000c9b0 <__muldf3+0x4d8>
1000c9a8:	00800074 	movhi	r2,1
1000c9ac:	5897883a 	add	r11,r11,r2
1000c9b0:	200e943a 	slli	r7,r4,16
1000c9b4:	2038d43a 	srli	fp,r4,16
1000c9b8:	52bfffcc 	andi	r10,r10,65535
1000c9bc:	3a8f883a 	add	r7,r7,r10
1000c9c0:	8809883a 	mov	r4,r17
1000c9c4:	800b883a 	mov	r5,r16
1000c9c8:	d8c00515 	stw	r3,20(sp)
1000c9cc:	d9800715 	stw	r6,28(sp)
1000c9d0:	d9c00215 	stw	r7,8(sp)
1000c9d4:	da000615 	stw	r8,24(sp)
1000c9d8:	da400415 	stw	r9,16(sp)
1000c9dc:	5f39883a 	add	fp,r11,fp
1000c9e0:	000103c0 	call	1000103c <__mulsi3>
1000c9e4:	8809883a 	mov	r4,r17
1000c9e8:	b80b883a 	mov	r5,r23
1000c9ec:	1025883a 	mov	r18,r2
1000c9f0:	000103c0 	call	1000103c <__mulsi3>
1000c9f4:	b009883a 	mov	r4,r22
1000c9f8:	b80b883a 	mov	r5,r23
1000c9fc:	d8800315 	stw	r2,12(sp)
1000ca00:	000103c0 	call	1000103c <__mulsi3>
1000ca04:	b009883a 	mov	r4,r22
1000ca08:	800b883a 	mov	r5,r16
1000ca0c:	1023883a 	mov	r17,r2
1000ca10:	000103c0 	call	1000103c <__mulsi3>
1000ca14:	da800317 	ldw	r10,12(sp)
1000ca18:	9008d43a 	srli	r4,r18,16
1000ca1c:	d8c00517 	ldw	r3,20(sp)
1000ca20:	5085883a 	add	r2,r10,r2
1000ca24:	1109883a 	add	r4,r2,r4
1000ca28:	d9800717 	ldw	r6,28(sp)
1000ca2c:	d9c00217 	ldw	r7,8(sp)
1000ca30:	da000617 	ldw	r8,24(sp)
1000ca34:	da400417 	ldw	r9,16(sp)
1000ca38:	2280022e 	bgeu	r4,r10,1000ca44 <__muldf3+0x56c>
1000ca3c:	00800074 	movhi	r2,1
1000ca40:	88a3883a 	add	r17,r17,r2
1000ca44:	2004943a 	slli	r2,r4,16
1000ca48:	94bfffcc 	andi	r18,r18,65535
1000ca4c:	4ce7883a 	add	r19,r9,r19
1000ca50:	14a5883a 	add	r18,r2,r18
1000ca54:	9d29803a 	cmpltu	r20,r19,r20
1000ca58:	9565883a 	add	r18,r18,r21
1000ca5c:	9505883a 	add	r2,r18,r20
1000ca60:	99e7883a 	add	r19,r19,r7
1000ca64:	99cf803a 	cmpltu	r7,r19,r7
1000ca68:	e08b883a 	add	r5,fp,r2
1000ca6c:	2008d43a 	srli	r4,r4,16
1000ca70:	29ef883a 	add	r23,r5,r7
1000ca74:	1529803a 	cmpltu	r20,r2,r20
1000ca78:	956b803a 	cmpltu	r21,r18,r21
1000ca7c:	b9cf803a 	cmpltu	r7,r23,r7
1000ca80:	a564b03a 	or	r18,r20,r21
1000ca84:	2f39803a 	cmpltu	fp,r5,fp
1000ca88:	9125883a 	add	r18,r18,r4
1000ca8c:	3f38b03a 	or	fp,r7,fp
1000ca90:	9725883a 	add	r18,r18,fp
1000ca94:	9804927a 	slli	r2,r19,9
1000ca98:	9463883a 	add	r17,r18,r17
1000ca9c:	d9000117 	ldw	r4,4(sp)
1000caa0:	b820d5fa 	srli	r16,r23,23
1000caa4:	8822927a 	slli	r17,r17,9
1000caa8:	9826d5fa 	srli	r19,r19,23
1000caac:	1104b03a 	or	r2,r2,r4
1000cab0:	b82e927a 	slli	r23,r23,9
1000cab4:	1004c03a 	cmpne	r2,r2,zero
1000cab8:	8c20b03a 	or	r16,r17,r16
1000cabc:	14e6b03a 	or	r19,r2,r19
1000cac0:	8080402c 	andhi	r2,r16,256
1000cac4:	9deeb03a 	or	r23,r19,r23
1000cac8:	10000726 	beq	r2,zero,1000cae8 <__muldf3+0x610>
1000cacc:	b804d07a 	srli	r2,r23,1
1000cad0:	800697fa 	slli	r3,r16,31
1000cad4:	bdc0004c 	andi	r23,r23,1
1000cad8:	8020d07a 	srli	r16,r16,1
1000cadc:	b8aeb03a 	or	r23,r23,r2
1000cae0:	b8eeb03a 	or	r23,r23,r3
1000cae4:	4007883a 	mov	r3,r8
1000cae8:	1900ffc4 	addi	r4,r3,1023
1000caec:	01004d0e 	bge	zero,r4,1000cc24 <__muldf3+0x74c>
1000caf0:	b88001cc 	andi	r2,r23,7
1000caf4:	10000726 	beq	r2,zero,1000cb14 <__muldf3+0x63c>
1000caf8:	b94003cc 	andi	r5,r23,15
1000cafc:	00800104 	movi	r2,4
1000cb00:	28800426 	beq	r5,r2,1000cb14 <__muldf3+0x63c>
1000cb04:	b885883a 	add	r2,r23,r2
1000cb08:	15ef803a 	cmpltu	r23,r2,r23
1000cb0c:	85e1883a 	add	r16,r16,r23
1000cb10:	102f883a 	mov	r23,r2
1000cb14:	8080402c 	andhi	r2,r16,256
1000cb18:	10000426 	beq	r2,zero,1000cb2c <__muldf3+0x654>
1000cb1c:	00bfc034 	movhi	r2,65280
1000cb20:	10bfffc4 	addi	r2,r2,-1
1000cb24:	19010004 	addi	r4,r3,1024
1000cb28:	80a0703a 	and	r16,r16,r2
1000cb2c:	0081ff84 	movi	r2,2046
1000cb30:	1100340e 	bge	r2,r4,1000cc04 <__muldf3+0x72c>
1000cb34:	34c0004c 	andi	r19,r6,1
1000cb38:	0101ffc4 	movi	r4,2047
1000cb3c:	0021883a 	mov	r16,zero
1000cb40:	002f883a 	mov	r23,zero
1000cb44:	003ebe06 	br	1000c640 <__alt_data_end+0xf800c640>
1000cb48:	8080022c 	andhi	r2,r16,8
1000cb4c:	10000926 	beq	r2,zero,1000cb74 <__muldf3+0x69c>
1000cb50:	8880022c 	andhi	r2,r17,8
1000cb54:	1000071e 	bne	r2,zero,1000cb74 <__muldf3+0x69c>
1000cb58:	00800434 	movhi	r2,16
1000cb5c:	8c000234 	orhi	r16,r17,8
1000cb60:	10bfffc4 	addi	r2,r2,-1
1000cb64:	b027883a 	mov	r19,r22
1000cb68:	80a0703a 	and	r16,r16,r2
1000cb6c:	902f883a 	mov	r23,r18
1000cb70:	003f1a06 	br	1000c7dc <__alt_data_end+0xf800c7dc>
1000cb74:	00800434 	movhi	r2,16
1000cb78:	84000234 	orhi	r16,r16,8
1000cb7c:	10bfffc4 	addi	r2,r2,-1
1000cb80:	80a0703a 	and	r16,r16,r2
1000cb84:	003f1506 	br	1000c7dc <__alt_data_end+0xf800c7dc>
1000cb88:	3009883a 	mov	r4,r6
1000cb8c:	d9400215 	stw	r5,8(sp)
1000cb90:	d9800715 	stw	r6,28(sp)
1000cb94:	da400415 	stw	r9,16(sp)
1000cb98:	da800315 	stw	r10,12(sp)
1000cb9c:	000d8100 	call	1000d810 <__clzsi2>
1000cba0:	10c00804 	addi	r3,r2,32
1000cba4:	010009c4 	movi	r4,39
1000cba8:	d9400217 	ldw	r5,8(sp)
1000cbac:	d9800717 	ldw	r6,28(sp)
1000cbb0:	da400417 	ldw	r9,16(sp)
1000cbb4:	da800317 	ldw	r10,12(sp)
1000cbb8:	20fee20e 	bge	r4,r3,1000c744 <__alt_data_end+0xf800c744>
1000cbbc:	147ffe04 	addi	r17,r2,-8
1000cbc0:	9462983a 	sll	r17,r18,r17
1000cbc4:	0025883a 	mov	r18,zero
1000cbc8:	003ee506 	br	1000c760 <__alt_data_end+0xf800c760>
1000cbcc:	d9800715 	stw	r6,28(sp)
1000cbd0:	d9c00215 	stw	r7,8(sp)
1000cbd4:	da400415 	stw	r9,16(sp)
1000cbd8:	000d8100 	call	1000d810 <__clzsi2>
1000cbdc:	10c00804 	addi	r3,r2,32
1000cbe0:	010009c4 	movi	r4,39
1000cbe4:	d9800717 	ldw	r6,28(sp)
1000cbe8:	d9c00217 	ldw	r7,8(sp)
1000cbec:	da400417 	ldw	r9,16(sp)
1000cbf0:	20feb40e 	bge	r4,r3,1000c6c4 <__alt_data_end+0xf800c6c4>
1000cbf4:	143ffe04 	addi	r16,r2,-8
1000cbf8:	9420983a 	sll	r16,r18,r16
1000cbfc:	002f883a 	mov	r23,zero
1000cc00:	003eb706 	br	1000c6e0 <__alt_data_end+0xf800c6e0>
1000cc04:	8004977a 	slli	r2,r16,29
1000cc08:	b82ed0fa 	srli	r23,r23,3
1000cc0c:	8020927a 	slli	r16,r16,9
1000cc10:	2101ffcc 	andi	r4,r4,2047
1000cc14:	15eeb03a 	or	r23,r2,r23
1000cc18:	8020d33a 	srli	r16,r16,12
1000cc1c:	34c0004c 	andi	r19,r6,1
1000cc20:	003e8706 	br	1000c640 <__alt_data_end+0xf800c640>
1000cc24:	00bf0084 	movi	r2,-1022
1000cc28:	10c5c83a 	sub	r2,r2,r3
1000cc2c:	01000e04 	movi	r4,56
1000cc30:	2080080e 	bge	r4,r2,1000cc54 <__muldf3+0x77c>
1000cc34:	34c0004c 	andi	r19,r6,1
1000cc38:	0009883a 	mov	r4,zero
1000cc3c:	0021883a 	mov	r16,zero
1000cc40:	002f883a 	mov	r23,zero
1000cc44:	003e7e06 	br	1000c640 <__alt_data_end+0xf800c640>
1000cc48:	4007883a 	mov	r3,r8
1000cc4c:	480d883a 	mov	r6,r9
1000cc50:	003fa506 	br	1000cae8 <__alt_data_end+0xf800cae8>
1000cc54:	010007c4 	movi	r4,31
1000cc58:	20801816 	blt	r4,r2,1000ccbc <__muldf3+0x7e4>
1000cc5c:	18c10784 	addi	r3,r3,1054
1000cc60:	80c8983a 	sll	r4,r16,r3
1000cc64:	b88ad83a 	srl	r5,r23,r2
1000cc68:	b8c6983a 	sll	r3,r23,r3
1000cc6c:	80a0d83a 	srl	r16,r16,r2
1000cc70:	2908b03a 	or	r4,r5,r4
1000cc74:	1804c03a 	cmpne	r2,r3,zero
1000cc78:	2088b03a 	or	r4,r4,r2
1000cc7c:	208001cc 	andi	r2,r4,7
1000cc80:	10000726 	beq	r2,zero,1000cca0 <__muldf3+0x7c8>
1000cc84:	20c003cc 	andi	r3,r4,15
1000cc88:	00800104 	movi	r2,4
1000cc8c:	18800426 	beq	r3,r2,1000cca0 <__muldf3+0x7c8>
1000cc90:	20c00104 	addi	r3,r4,4
1000cc94:	1905803a 	cmpltu	r2,r3,r4
1000cc98:	80a1883a 	add	r16,r16,r2
1000cc9c:	1809883a 	mov	r4,r3
1000cca0:	8080202c 	andhi	r2,r16,128
1000cca4:	10001b26 	beq	r2,zero,1000cd14 <__muldf3+0x83c>
1000cca8:	34c0004c 	andi	r19,r6,1
1000ccac:	01000044 	movi	r4,1
1000ccb0:	0021883a 	mov	r16,zero
1000ccb4:	002f883a 	mov	r23,zero
1000ccb8:	003e6106 	br	1000c640 <__alt_data_end+0xf800c640>
1000ccbc:	013ef884 	movi	r4,-1054
1000ccc0:	20c9c83a 	sub	r4,r4,r3
1000ccc4:	01400804 	movi	r5,32
1000ccc8:	8108d83a 	srl	r4,r16,r4
1000cccc:	11401526 	beq	r2,r5,1000cd24 <__muldf3+0x84c>
1000ccd0:	18c10f84 	addi	r3,r3,1086
1000ccd4:	80e0983a 	sll	r16,r16,r3
1000ccd8:	85eeb03a 	or	r23,r16,r23
1000ccdc:	b804c03a 	cmpne	r2,r23,zero
1000cce0:	1108b03a 	or	r4,r2,r4
1000cce4:	20c001cc 	andi	r3,r4,7
1000cce8:	1800061e 	bne	r3,zero,1000cd04 <__muldf3+0x82c>
1000ccec:	0021883a 	mov	r16,zero
1000ccf0:	202ed0fa 	srli	r23,r4,3
1000ccf4:	34c0004c 	andi	r19,r6,1
1000ccf8:	0009883a 	mov	r4,zero
1000ccfc:	b8eeb03a 	or	r23,r23,r3
1000cd00:	003e4f06 	br	1000c640 <__alt_data_end+0xf800c640>
1000cd04:	20c003cc 	andi	r3,r4,15
1000cd08:	00800104 	movi	r2,4
1000cd0c:	0021883a 	mov	r16,zero
1000cd10:	18bfdf1e 	bne	r3,r2,1000cc90 <__alt_data_end+0xf800cc90>
1000cd14:	8004927a 	slli	r2,r16,9
1000cd18:	8006977a 	slli	r3,r16,29
1000cd1c:	1020d33a 	srli	r16,r2,12
1000cd20:	003ff306 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cd24:	0021883a 	mov	r16,zero
1000cd28:	003feb06 	br	1000ccd8 <__alt_data_end+0xf800ccd8>
1000cd2c:	00800434 	movhi	r2,16
1000cd30:	84000234 	orhi	r16,r16,8
1000cd34:	10bfffc4 	addi	r2,r2,-1
1000cd38:	4cc0004c 	andi	r19,r9,1
1000cd3c:	80a0703a 	and	r16,r16,r2
1000cd40:	003ea606 	br	1000c7dc <__alt_data_end+0xf800c7dc>

1000cd44 <__subdf3>:
1000cd44:	00c00434 	movhi	r3,16
1000cd48:	18ffffc4 	addi	r3,r3,-1
1000cd4c:	defffb04 	addi	sp,sp,-20
1000cd50:	28d2703a 	and	r9,r5,r3
1000cd54:	3814d53a 	srli	r10,r7,20
1000cd58:	38c6703a 	and	r3,r7,r3
1000cd5c:	3004d77a 	srli	r2,r6,29
1000cd60:	dc800215 	stw	r18,8(sp)
1000cd64:	dc000015 	stw	r16,0(sp)
1000cd68:	2824d7fa 	srli	r18,r5,31
1000cd6c:	2820d53a 	srli	r16,r5,20
1000cd70:	481290fa 	slli	r9,r9,3
1000cd74:	200ad77a 	srli	r5,r4,29
1000cd78:	180690fa 	slli	r3,r3,3
1000cd7c:	dc400115 	stw	r17,4(sp)
1000cd80:	dfc00415 	stw	ra,16(sp)
1000cd84:	202290fa 	slli	r17,r4,3
1000cd88:	dcc00315 	stw	r19,12(sp)
1000cd8c:	5281ffcc 	andi	r10,r10,2047
1000cd90:	0101ffc4 	movi	r4,2047
1000cd94:	9011883a 	mov	r8,r18
1000cd98:	8401ffcc 	andi	r16,r16,2047
1000cd9c:	94803fcc 	andi	r18,r18,255
1000cda0:	494ab03a 	or	r5,r9,r5
1000cda4:	380ed7fa 	srli	r7,r7,31
1000cda8:	1886b03a 	or	r3,r3,r2
1000cdac:	300c90fa 	slli	r6,r6,3
1000cdb0:	51009026 	beq	r10,r4,1000cff4 <__subdf3+0x2b0>
1000cdb4:	39c0005c 	xori	r7,r7,1
1000cdb8:	8285c83a 	sub	r2,r16,r10
1000cdbc:	91c06f26 	beq	r18,r7,1000cf7c <__subdf3+0x238>
1000cdc0:	0080b10e 	bge	zero,r2,1000d088 <__subdf3+0x344>
1000cdc4:	50002a1e 	bne	r10,zero,1000ce70 <__subdf3+0x12c>
1000cdc8:	1988b03a 	or	r4,r3,r6
1000cdcc:	2000941e 	bne	r4,zero,1000d020 <__subdf3+0x2dc>
1000cdd0:	888001cc 	andi	r2,r17,7
1000cdd4:	10005b26 	beq	r2,zero,1000cf44 <__subdf3+0x200>
1000cdd8:	88c003cc 	andi	r3,r17,15
1000cddc:	00800104 	movi	r2,4
1000cde0:	18805826 	beq	r3,r2,1000cf44 <__subdf3+0x200>
1000cde4:	88c00104 	addi	r3,r17,4
1000cde8:	1c63803a 	cmpltu	r17,r3,r17
1000cdec:	2c4b883a 	add	r5,r5,r17
1000cdf0:	2880202c 	andhi	r2,r5,128
1000cdf4:	9200004c 	andi	r8,r18,1
1000cdf8:	1823883a 	mov	r17,r3
1000cdfc:	10005426 	beq	r2,zero,1000cf50 <__subdf3+0x20c>
1000ce00:	84000044 	addi	r16,r16,1
1000ce04:	0081ffc4 	movi	r2,2047
1000ce08:	8080bf26 	beq	r16,r2,1000d108 <__subdf3+0x3c4>
1000ce0c:	013fe034 	movhi	r4,65408
1000ce10:	213fffc4 	addi	r4,r4,-1
1000ce14:	290a703a 	and	r5,r5,r4
1000ce18:	2804977a 	slli	r2,r5,29
1000ce1c:	280a927a 	slli	r5,r5,9
1000ce20:	8822d0fa 	srli	r17,r17,3
1000ce24:	8401ffcc 	andi	r16,r16,2047
1000ce28:	2808d33a 	srli	r4,r5,12
1000ce2c:	1444b03a 	or	r2,r2,r17
1000ce30:	8401ffcc 	andi	r16,r16,2047
1000ce34:	800a953a 	slli	r5,r16,20
1000ce38:	40c03fcc 	andi	r3,r8,255
1000ce3c:	04000434 	movhi	r16,16
1000ce40:	180697fa 	slli	r3,r3,31
1000ce44:	843fffc4 	addi	r16,r16,-1
1000ce48:	2420703a 	and	r16,r4,r16
1000ce4c:	8160b03a 	or	r16,r16,r5
1000ce50:	80c6b03a 	or	r3,r16,r3
1000ce54:	dfc00417 	ldw	ra,16(sp)
1000ce58:	dcc00317 	ldw	r19,12(sp)
1000ce5c:	dc800217 	ldw	r18,8(sp)
1000ce60:	dc400117 	ldw	r17,4(sp)
1000ce64:	dc000017 	ldw	r16,0(sp)
1000ce68:	dec00504 	addi	sp,sp,20
1000ce6c:	f800283a 	ret
1000ce70:	0101ffc4 	movi	r4,2047
1000ce74:	813fd626 	beq	r16,r4,1000cdd0 <__alt_data_end+0xf800cdd0>
1000ce78:	18c02034 	orhi	r3,r3,128
1000ce7c:	01000e04 	movi	r4,56
1000ce80:	2080a416 	blt	r4,r2,1000d114 <__subdf3+0x3d0>
1000ce84:	010007c4 	movi	r4,31
1000ce88:	2080c716 	blt	r4,r2,1000d1a8 <__subdf3+0x464>
1000ce8c:	01000804 	movi	r4,32
1000ce90:	2089c83a 	sub	r4,r4,r2
1000ce94:	1910983a 	sll	r8,r3,r4
1000ce98:	308ed83a 	srl	r7,r6,r2
1000ce9c:	3108983a 	sll	r4,r6,r4
1000cea0:	1884d83a 	srl	r2,r3,r2
1000cea4:	41ccb03a 	or	r6,r8,r7
1000cea8:	2008c03a 	cmpne	r4,r4,zero
1000ceac:	310cb03a 	or	r6,r6,r4
1000ceb0:	898dc83a 	sub	r6,r17,r6
1000ceb4:	89a3803a 	cmpltu	r17,r17,r6
1000ceb8:	288bc83a 	sub	r5,r5,r2
1000cebc:	2c4bc83a 	sub	r5,r5,r17
1000cec0:	3023883a 	mov	r17,r6
1000cec4:	2880202c 	andhi	r2,r5,128
1000cec8:	10006b26 	beq	r2,zero,1000d078 <__subdf3+0x334>
1000cecc:	04c02034 	movhi	r19,128
1000ced0:	9cffffc4 	addi	r19,r19,-1
1000ced4:	2ce6703a 	and	r19,r5,r19
1000ced8:	98007c26 	beq	r19,zero,1000d0cc <__subdf3+0x388>
1000cedc:	9809883a 	mov	r4,r19
1000cee0:	000d8100 	call	1000d810 <__clzsi2>
1000cee4:	10fffe04 	addi	r3,r2,-8
1000cee8:	010007c4 	movi	r4,31
1000ceec:	20c07d16 	blt	r4,r3,1000d0e4 <__subdf3+0x3a0>
1000cef0:	01400a04 	movi	r5,40
1000cef4:	2885c83a 	sub	r2,r5,r2
1000cef8:	888ad83a 	srl	r5,r17,r2
1000cefc:	98e6983a 	sll	r19,r19,r3
1000cf00:	88e2983a 	sll	r17,r17,r3
1000cf04:	2ce6b03a 	or	r19,r5,r19
1000cf08:	1c007a16 	blt	r3,r16,1000d0f4 <__subdf3+0x3b0>
1000cf0c:	1c21c83a 	sub	r16,r3,r16
1000cf10:	81400044 	addi	r5,r16,1
1000cf14:	00c007c4 	movi	r3,31
1000cf18:	19409616 	blt	r3,r5,1000d174 <__subdf3+0x430>
1000cf1c:	1c21c83a 	sub	r16,r3,r16
1000cf20:	8c08983a 	sll	r4,r17,r16
1000cf24:	8946d83a 	srl	r3,r17,r5
1000cf28:	9c20983a 	sll	r16,r19,r16
1000cf2c:	2008c03a 	cmpne	r4,r4,zero
1000cf30:	994ad83a 	srl	r5,r19,r5
1000cf34:	1c06b03a 	or	r3,r3,r16
1000cf38:	1922b03a 	or	r17,r3,r4
1000cf3c:	0021883a 	mov	r16,zero
1000cf40:	003fa306 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000cf44:	2880202c 	andhi	r2,r5,128
1000cf48:	9200004c 	andi	r8,r18,1
1000cf4c:	103fac1e 	bne	r2,zero,1000ce00 <__alt_data_end+0xf800ce00>
1000cf50:	2804977a 	slli	r2,r5,29
1000cf54:	8822d0fa 	srli	r17,r17,3
1000cf58:	00c1ffc4 	movi	r3,2047
1000cf5c:	280ad0fa 	srli	r5,r5,3
1000cf60:	1444b03a 	or	r2,r2,r17
1000cf64:	80c02726 	beq	r16,r3,1000d004 <__subdf3+0x2c0>
1000cf68:	01000434 	movhi	r4,16
1000cf6c:	213fffc4 	addi	r4,r4,-1
1000cf70:	80e0703a 	and	r16,r16,r3
1000cf74:	2908703a 	and	r4,r5,r4
1000cf78:	003fad06 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000cf7c:	0080690e 	bge	zero,r2,1000d124 <__subdf3+0x3e0>
1000cf80:	50002f26 	beq	r10,zero,1000d040 <__subdf3+0x2fc>
1000cf84:	0101ffc4 	movi	r4,2047
1000cf88:	813f9126 	beq	r16,r4,1000cdd0 <__alt_data_end+0xf800cdd0>
1000cf8c:	18c02034 	orhi	r3,r3,128
1000cf90:	01000e04 	movi	r4,56
1000cf94:	2080b00e 	bge	r4,r2,1000d258 <__subdf3+0x514>
1000cf98:	198cb03a 	or	r6,r3,r6
1000cf9c:	300ec03a 	cmpne	r7,r6,zero
1000cfa0:	0005883a 	mov	r2,zero
1000cfa4:	3c4f883a 	add	r7,r7,r17
1000cfa8:	3c63803a 	cmpltu	r17,r7,r17
1000cfac:	114b883a 	add	r5,r2,r5
1000cfb0:	2c4b883a 	add	r5,r5,r17
1000cfb4:	3823883a 	mov	r17,r7
1000cfb8:	2880202c 	andhi	r2,r5,128
1000cfbc:	10002e26 	beq	r2,zero,1000d078 <__subdf3+0x334>
1000cfc0:	84000044 	addi	r16,r16,1
1000cfc4:	0081ffc4 	movi	r2,2047
1000cfc8:	8080de26 	beq	r16,r2,1000d344 <__subdf3+0x600>
1000cfcc:	00bfe034 	movhi	r2,65408
1000cfd0:	10bfffc4 	addi	r2,r2,-1
1000cfd4:	288a703a 	and	r5,r5,r2
1000cfd8:	880cd07a 	srli	r6,r17,1
1000cfdc:	280897fa 	slli	r4,r5,31
1000cfe0:	88c0004c 	andi	r3,r17,1
1000cfe4:	30e2b03a 	or	r17,r6,r3
1000cfe8:	280ad07a 	srli	r5,r5,1
1000cfec:	8922b03a 	or	r17,r17,r4
1000cff0:	003f7706 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000cff4:	1984b03a 	or	r2,r3,r6
1000cff8:	103f6e26 	beq	r2,zero,1000cdb4 <__alt_data_end+0xf800cdb4>
1000cffc:	39c03fcc 	andi	r7,r7,255
1000d000:	003f6d06 	br	1000cdb8 <__alt_data_end+0xf800cdb8>
1000d004:	1146b03a 	or	r3,r2,r5
1000d008:	18003f26 	beq	r3,zero,1000d108 <__subdf3+0x3c4>
1000d00c:	00c00434 	movhi	r3,16
1000d010:	29000234 	orhi	r4,r5,8
1000d014:	18ffffc4 	addi	r3,r3,-1
1000d018:	20c8703a 	and	r4,r4,r3
1000d01c:	003f8406 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000d020:	10bfffc4 	addi	r2,r2,-1
1000d024:	1000501e 	bne	r2,zero,1000d168 <__subdf3+0x424>
1000d028:	898fc83a 	sub	r7,r17,r6
1000d02c:	89e3803a 	cmpltu	r17,r17,r7
1000d030:	28cbc83a 	sub	r5,r5,r3
1000d034:	2c4bc83a 	sub	r5,r5,r17
1000d038:	3823883a 	mov	r17,r7
1000d03c:	003fa106 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d040:	1988b03a 	or	r4,r3,r6
1000d044:	203f6226 	beq	r4,zero,1000cdd0 <__alt_data_end+0xf800cdd0>
1000d048:	10bfffc4 	addi	r2,r2,-1
1000d04c:	10009b1e 	bne	r2,zero,1000d2bc <__subdf3+0x578>
1000d050:	344d883a 	add	r6,r6,r17
1000d054:	3463803a 	cmpltu	r17,r6,r17
1000d058:	194b883a 	add	r5,r3,r5
1000d05c:	2c4b883a 	add	r5,r5,r17
1000d060:	3023883a 	mov	r17,r6
1000d064:	003fd406 	br	1000cfb8 <__alt_data_end+0xf800cfb8>
1000d068:	1106b03a 	or	r3,r2,r4
1000d06c:	1800b426 	beq	r3,zero,1000d340 <__subdf3+0x5fc>
1000d070:	100b883a 	mov	r5,r2
1000d074:	2023883a 	mov	r17,r4
1000d078:	888001cc 	andi	r2,r17,7
1000d07c:	103f561e 	bne	r2,zero,1000cdd8 <__alt_data_end+0xf800cdd8>
1000d080:	9200004c 	andi	r8,r18,1
1000d084:	003fb206 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d088:	1000531e 	bne	r2,zero,1000d1d8 <__subdf3+0x494>
1000d08c:	80800044 	addi	r2,r16,1
1000d090:	1081ffcc 	andi	r2,r2,2047
1000d094:	01000044 	movi	r4,1
1000d098:	2080a00e 	bge	r4,r2,1000d31c <__subdf3+0x5d8>
1000d09c:	8985c83a 	sub	r2,r17,r6
1000d0a0:	8889803a 	cmpltu	r4,r17,r2
1000d0a4:	28e7c83a 	sub	r19,r5,r3
1000d0a8:	9927c83a 	sub	r19,r19,r4
1000d0ac:	9900202c 	andhi	r4,r19,128
1000d0b0:	20006226 	beq	r4,zero,1000d23c <__subdf3+0x4f8>
1000d0b4:	3463c83a 	sub	r17,r6,r17
1000d0b8:	194bc83a 	sub	r5,r3,r5
1000d0bc:	344d803a 	cmpltu	r6,r6,r17
1000d0c0:	29a7c83a 	sub	r19,r5,r6
1000d0c4:	3825883a 	mov	r18,r7
1000d0c8:	983f841e 	bne	r19,zero,1000cedc <__alt_data_end+0xf800cedc>
1000d0cc:	8809883a 	mov	r4,r17
1000d0d0:	000d8100 	call	1000d810 <__clzsi2>
1000d0d4:	10800804 	addi	r2,r2,32
1000d0d8:	10fffe04 	addi	r3,r2,-8
1000d0dc:	010007c4 	movi	r4,31
1000d0e0:	20ff830e 	bge	r4,r3,1000cef0 <__alt_data_end+0xf800cef0>
1000d0e4:	14fff604 	addi	r19,r2,-40
1000d0e8:	8ce6983a 	sll	r19,r17,r19
1000d0ec:	0023883a 	mov	r17,zero
1000d0f0:	1c3f860e 	bge	r3,r16,1000cf0c <__alt_data_end+0xf800cf0c>
1000d0f4:	017fe034 	movhi	r5,65408
1000d0f8:	297fffc4 	addi	r5,r5,-1
1000d0fc:	80e1c83a 	sub	r16,r16,r3
1000d100:	994a703a 	and	r5,r19,r5
1000d104:	003f3206 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d108:	0009883a 	mov	r4,zero
1000d10c:	0005883a 	mov	r2,zero
1000d110:	003f4706 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000d114:	198cb03a 	or	r6,r3,r6
1000d118:	300cc03a 	cmpne	r6,r6,zero
1000d11c:	0005883a 	mov	r2,zero
1000d120:	003f6306 	br	1000ceb0 <__alt_data_end+0xf800ceb0>
1000d124:	10009d1e 	bne	r2,zero,1000d39c <__subdf3+0x658>
1000d128:	81c00044 	addi	r7,r16,1
1000d12c:	3881ffcc 	andi	r2,r7,2047
1000d130:	02400044 	movi	r9,1
1000d134:	4880680e 	bge	r9,r2,1000d2d8 <__subdf3+0x594>
1000d138:	0081ffc4 	movi	r2,2047
1000d13c:	3880ae26 	beq	r7,r2,1000d3f8 <__subdf3+0x6b4>
1000d140:	344d883a 	add	r6,r6,r17
1000d144:	3463803a 	cmpltu	r17,r6,r17
1000d148:	194b883a 	add	r5,r3,r5
1000d14c:	2c4b883a 	add	r5,r5,r17
1000d150:	282297fa 	slli	r17,r5,31
1000d154:	300cd07a 	srli	r6,r6,1
1000d158:	280ad07a 	srli	r5,r5,1
1000d15c:	3821883a 	mov	r16,r7
1000d160:	89a2b03a 	or	r17,r17,r6
1000d164:	003f1a06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d168:	0101ffc4 	movi	r4,2047
1000d16c:	813f431e 	bne	r16,r4,1000ce7c <__alt_data_end+0xf800ce7c>
1000d170:	003f1706 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d174:	80bff844 	addi	r2,r16,-31
1000d178:	00c00804 	movi	r3,32
1000d17c:	9884d83a 	srl	r2,r19,r2
1000d180:	28c05126 	beq	r5,r3,1000d2c8 <__subdf3+0x584>
1000d184:	00c00fc4 	movi	r3,63
1000d188:	1c21c83a 	sub	r16,r3,r16
1000d18c:	9c26983a 	sll	r19,r19,r16
1000d190:	9c62b03a 	or	r17,r19,r17
1000d194:	8822c03a 	cmpne	r17,r17,zero
1000d198:	88a2b03a 	or	r17,r17,r2
1000d19c:	000b883a 	mov	r5,zero
1000d1a0:	0021883a 	mov	r16,zero
1000d1a4:	003fb406 	br	1000d078 <__alt_data_end+0xf800d078>
1000d1a8:	113ff804 	addi	r4,r2,-32
1000d1ac:	01c00804 	movi	r7,32
1000d1b0:	1908d83a 	srl	r4,r3,r4
1000d1b4:	11c04626 	beq	r2,r7,1000d2d0 <__subdf3+0x58c>
1000d1b8:	01c01004 	movi	r7,64
1000d1bc:	3885c83a 	sub	r2,r7,r2
1000d1c0:	1884983a 	sll	r2,r3,r2
1000d1c4:	118cb03a 	or	r6,r2,r6
1000d1c8:	300cc03a 	cmpne	r6,r6,zero
1000d1cc:	310cb03a 	or	r6,r6,r4
1000d1d0:	0005883a 	mov	r2,zero
1000d1d4:	003f3606 	br	1000ceb0 <__alt_data_end+0xf800ceb0>
1000d1d8:	80002b26 	beq	r16,zero,1000d288 <__subdf3+0x544>
1000d1dc:	0101ffc4 	movi	r4,2047
1000d1e0:	51006926 	beq	r10,r4,1000d388 <__subdf3+0x644>
1000d1e4:	0085c83a 	sub	r2,zero,r2
1000d1e8:	29402034 	orhi	r5,r5,128
1000d1ec:	01000e04 	movi	r4,56
1000d1f0:	20807d16 	blt	r4,r2,1000d3e8 <__subdf3+0x6a4>
1000d1f4:	010007c4 	movi	r4,31
1000d1f8:	2080d916 	blt	r4,r2,1000d560 <__subdf3+0x81c>
1000d1fc:	01000804 	movi	r4,32
1000d200:	2089c83a 	sub	r4,r4,r2
1000d204:	2912983a 	sll	r9,r5,r4
1000d208:	8890d83a 	srl	r8,r17,r2
1000d20c:	8908983a 	sll	r4,r17,r4
1000d210:	2884d83a 	srl	r2,r5,r2
1000d214:	4a22b03a 	or	r17,r9,r8
1000d218:	2008c03a 	cmpne	r4,r4,zero
1000d21c:	8922b03a 	or	r17,r17,r4
1000d220:	3463c83a 	sub	r17,r6,r17
1000d224:	1885c83a 	sub	r2,r3,r2
1000d228:	344d803a 	cmpltu	r6,r6,r17
1000d22c:	118bc83a 	sub	r5,r2,r6
1000d230:	5021883a 	mov	r16,r10
1000d234:	3825883a 	mov	r18,r7
1000d238:	003f2206 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d23c:	9886b03a 	or	r3,r19,r2
1000d240:	18001c1e 	bne	r3,zero,1000d2b4 <__subdf3+0x570>
1000d244:	0011883a 	mov	r8,zero
1000d248:	000b883a 	mov	r5,zero
1000d24c:	0023883a 	mov	r17,zero
1000d250:	0021883a 	mov	r16,zero
1000d254:	003f3e06 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d258:	010007c4 	movi	r4,31
1000d25c:	20803c16 	blt	r4,r2,1000d350 <__subdf3+0x60c>
1000d260:	01000804 	movi	r4,32
1000d264:	2089c83a 	sub	r4,r4,r2
1000d268:	1912983a 	sll	r9,r3,r4
1000d26c:	308ed83a 	srl	r7,r6,r2
1000d270:	3108983a 	sll	r4,r6,r4
1000d274:	1884d83a 	srl	r2,r3,r2
1000d278:	49ceb03a 	or	r7,r9,r7
1000d27c:	2008c03a 	cmpne	r4,r4,zero
1000d280:	390eb03a 	or	r7,r7,r4
1000d284:	003f4706 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d288:	2c48b03a 	or	r4,r5,r17
1000d28c:	20003e26 	beq	r4,zero,1000d388 <__subdf3+0x644>
1000d290:	0084303a 	nor	r2,zero,r2
1000d294:	10003a1e 	bne	r2,zero,1000d380 <__subdf3+0x63c>
1000d298:	3463c83a 	sub	r17,r6,r17
1000d29c:	194bc83a 	sub	r5,r3,r5
1000d2a0:	344d803a 	cmpltu	r6,r6,r17
1000d2a4:	298bc83a 	sub	r5,r5,r6
1000d2a8:	5021883a 	mov	r16,r10
1000d2ac:	3825883a 	mov	r18,r7
1000d2b0:	003f0406 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d2b4:	1023883a 	mov	r17,r2
1000d2b8:	003f0706 	br	1000ced8 <__alt_data_end+0xf800ced8>
1000d2bc:	0101ffc4 	movi	r4,2047
1000d2c0:	813f331e 	bne	r16,r4,1000cf90 <__alt_data_end+0xf800cf90>
1000d2c4:	003ec206 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d2c8:	0027883a 	mov	r19,zero
1000d2cc:	003fb006 	br	1000d190 <__alt_data_end+0xf800d190>
1000d2d0:	0005883a 	mov	r2,zero
1000d2d4:	003fbb06 	br	1000d1c4 <__alt_data_end+0xf800d1c4>
1000d2d8:	2c44b03a 	or	r2,r5,r17
1000d2dc:	80008b1e 	bne	r16,zero,1000d50c <__subdf3+0x7c8>
1000d2e0:	1000b526 	beq	r2,zero,1000d5b8 <__subdf3+0x874>
1000d2e4:	1984b03a 	or	r2,r3,r6
1000d2e8:	103eb926 	beq	r2,zero,1000cdd0 <__alt_data_end+0xf800cdd0>
1000d2ec:	3449883a 	add	r4,r6,r17
1000d2f0:	2463803a 	cmpltu	r17,r4,r17
1000d2f4:	194b883a 	add	r5,r3,r5
1000d2f8:	2c4b883a 	add	r5,r5,r17
1000d2fc:	2880202c 	andhi	r2,r5,128
1000d300:	2023883a 	mov	r17,r4
1000d304:	103f5c26 	beq	r2,zero,1000d078 <__alt_data_end+0xf800d078>
1000d308:	00bfe034 	movhi	r2,65408
1000d30c:	10bfffc4 	addi	r2,r2,-1
1000d310:	4821883a 	mov	r16,r9
1000d314:	288a703a 	and	r5,r5,r2
1000d318:	003ead06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d31c:	2c44b03a 	or	r2,r5,r17
1000d320:	8000291e 	bne	r16,zero,1000d3c8 <__subdf3+0x684>
1000d324:	10004f1e 	bne	r2,zero,1000d464 <__subdf3+0x720>
1000d328:	1984b03a 	or	r2,r3,r6
1000d32c:	10000426 	beq	r2,zero,1000d340 <__subdf3+0x5fc>
1000d330:	180b883a 	mov	r5,r3
1000d334:	3023883a 	mov	r17,r6
1000d338:	3825883a 	mov	r18,r7
1000d33c:	003ea406 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d340:	0011883a 	mov	r8,zero
1000d344:	000b883a 	mov	r5,zero
1000d348:	0023883a 	mov	r17,zero
1000d34c:	003f0006 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d350:	11fff804 	addi	r7,r2,-32
1000d354:	19c8d83a 	srl	r4,r3,r7
1000d358:	01c00804 	movi	r7,32
1000d35c:	11c07e26 	beq	r2,r7,1000d558 <__subdf3+0x814>
1000d360:	01c01004 	movi	r7,64
1000d364:	3885c83a 	sub	r2,r7,r2
1000d368:	1884983a 	sll	r2,r3,r2
1000d36c:	118cb03a 	or	r6,r2,r6
1000d370:	300ec03a 	cmpne	r7,r6,zero
1000d374:	390eb03a 	or	r7,r7,r4
1000d378:	0005883a 	mov	r2,zero
1000d37c:	003f0906 	br	1000cfa4 <__alt_data_end+0xf800cfa4>
1000d380:	0101ffc4 	movi	r4,2047
1000d384:	513f991e 	bne	r10,r4,1000d1ec <__alt_data_end+0xf800d1ec>
1000d388:	180b883a 	mov	r5,r3
1000d38c:	3023883a 	mov	r17,r6
1000d390:	5021883a 	mov	r16,r10
1000d394:	3825883a 	mov	r18,r7
1000d398:	003e8d06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d39c:	80001a1e 	bne	r16,zero,1000d408 <__subdf3+0x6c4>
1000d3a0:	2c48b03a 	or	r4,r5,r17
1000d3a4:	20005526 	beq	r4,zero,1000d4fc <__subdf3+0x7b8>
1000d3a8:	0084303a 	nor	r2,zero,r2
1000d3ac:	1000511e 	bne	r2,zero,1000d4f4 <__subdf3+0x7b0>
1000d3b0:	89a3883a 	add	r17,r17,r6
1000d3b4:	194b883a 	add	r5,r3,r5
1000d3b8:	898d803a 	cmpltu	r6,r17,r6
1000d3bc:	298b883a 	add	r5,r5,r6
1000d3c0:	5021883a 	mov	r16,r10
1000d3c4:	003efc06 	br	1000cfb8 <__alt_data_end+0xf800cfb8>
1000d3c8:	1000341e 	bne	r2,zero,1000d49c <__subdf3+0x758>
1000d3cc:	1984b03a 	or	r2,r3,r6
1000d3d0:	10006f26 	beq	r2,zero,1000d590 <__subdf3+0x84c>
1000d3d4:	180b883a 	mov	r5,r3
1000d3d8:	3023883a 	mov	r17,r6
1000d3dc:	3825883a 	mov	r18,r7
1000d3e0:	0401ffc4 	movi	r16,2047
1000d3e4:	003e7a06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d3e8:	2c62b03a 	or	r17,r5,r17
1000d3ec:	8822c03a 	cmpne	r17,r17,zero
1000d3f0:	0005883a 	mov	r2,zero
1000d3f4:	003f8a06 	br	1000d220 <__alt_data_end+0xf800d220>
1000d3f8:	3821883a 	mov	r16,r7
1000d3fc:	000b883a 	mov	r5,zero
1000d400:	0023883a 	mov	r17,zero
1000d404:	003ed206 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d408:	0101ffc4 	movi	r4,2047
1000d40c:	51003b26 	beq	r10,r4,1000d4fc <__subdf3+0x7b8>
1000d410:	0085c83a 	sub	r2,zero,r2
1000d414:	29402034 	orhi	r5,r5,128
1000d418:	01000e04 	movi	r4,56
1000d41c:	20806216 	blt	r4,r2,1000d5a8 <__subdf3+0x864>
1000d420:	010007c4 	movi	r4,31
1000d424:	20806b16 	blt	r4,r2,1000d5d4 <__subdf3+0x890>
1000d428:	01000804 	movi	r4,32
1000d42c:	2089c83a 	sub	r4,r4,r2
1000d430:	2912983a 	sll	r9,r5,r4
1000d434:	888ed83a 	srl	r7,r17,r2
1000d438:	8908983a 	sll	r4,r17,r4
1000d43c:	2884d83a 	srl	r2,r5,r2
1000d440:	49e2b03a 	or	r17,r9,r7
1000d444:	2008c03a 	cmpne	r4,r4,zero
1000d448:	8922b03a 	or	r17,r17,r4
1000d44c:	89a3883a 	add	r17,r17,r6
1000d450:	10c5883a 	add	r2,r2,r3
1000d454:	898d803a 	cmpltu	r6,r17,r6
1000d458:	118b883a 	add	r5,r2,r6
1000d45c:	5021883a 	mov	r16,r10
1000d460:	003ed506 	br	1000cfb8 <__alt_data_end+0xf800cfb8>
1000d464:	1984b03a 	or	r2,r3,r6
1000d468:	103e5926 	beq	r2,zero,1000cdd0 <__alt_data_end+0xf800cdd0>
1000d46c:	8989c83a 	sub	r4,r17,r6
1000d470:	8911803a 	cmpltu	r8,r17,r4
1000d474:	28c5c83a 	sub	r2,r5,r3
1000d478:	1205c83a 	sub	r2,r2,r8
1000d47c:	1200202c 	andhi	r8,r2,128
1000d480:	403ef926 	beq	r8,zero,1000d068 <__alt_data_end+0xf800d068>
1000d484:	3463c83a 	sub	r17,r6,r17
1000d488:	194bc83a 	sub	r5,r3,r5
1000d48c:	344d803a 	cmpltu	r6,r6,r17
1000d490:	298bc83a 	sub	r5,r5,r6
1000d494:	3825883a 	mov	r18,r7
1000d498:	003e4d06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d49c:	1984b03a 	or	r2,r3,r6
1000d4a0:	10002b26 	beq	r2,zero,1000d550 <__subdf3+0x80c>
1000d4a4:	2808d0fa 	srli	r4,r5,3
1000d4a8:	8822d0fa 	srli	r17,r17,3
1000d4ac:	280a977a 	slli	r5,r5,29
1000d4b0:	2080022c 	andhi	r2,r4,8
1000d4b4:	2c62b03a 	or	r17,r5,r17
1000d4b8:	10000826 	beq	r2,zero,1000d4dc <__subdf3+0x798>
1000d4bc:	1810d0fa 	srli	r8,r3,3
1000d4c0:	4080022c 	andhi	r2,r8,8
1000d4c4:	1000051e 	bne	r2,zero,1000d4dc <__subdf3+0x798>
1000d4c8:	300cd0fa 	srli	r6,r6,3
1000d4cc:	1804977a 	slli	r2,r3,29
1000d4d0:	4009883a 	mov	r4,r8
1000d4d4:	3825883a 	mov	r18,r7
1000d4d8:	11a2b03a 	or	r17,r2,r6
1000d4dc:	880ad77a 	srli	r5,r17,29
1000d4e0:	200890fa 	slli	r4,r4,3
1000d4e4:	882290fa 	slli	r17,r17,3
1000d4e8:	0401ffc4 	movi	r16,2047
1000d4ec:	290ab03a 	or	r5,r5,r4
1000d4f0:	003e3706 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d4f4:	0101ffc4 	movi	r4,2047
1000d4f8:	513fc71e 	bne	r10,r4,1000d418 <__alt_data_end+0xf800d418>
1000d4fc:	180b883a 	mov	r5,r3
1000d500:	3023883a 	mov	r17,r6
1000d504:	5021883a 	mov	r16,r10
1000d508:	003e3106 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d50c:	10002d26 	beq	r2,zero,1000d5c4 <__subdf3+0x880>
1000d510:	1984b03a 	or	r2,r3,r6
1000d514:	10000e26 	beq	r2,zero,1000d550 <__subdf3+0x80c>
1000d518:	2808d0fa 	srli	r4,r5,3
1000d51c:	8822d0fa 	srli	r17,r17,3
1000d520:	280a977a 	slli	r5,r5,29
1000d524:	2080022c 	andhi	r2,r4,8
1000d528:	2c62b03a 	or	r17,r5,r17
1000d52c:	103feb26 	beq	r2,zero,1000d4dc <__alt_data_end+0xf800d4dc>
1000d530:	180ed0fa 	srli	r7,r3,3
1000d534:	3880022c 	andhi	r2,r7,8
1000d538:	103fe81e 	bne	r2,zero,1000d4dc <__alt_data_end+0xf800d4dc>
1000d53c:	300cd0fa 	srli	r6,r6,3
1000d540:	1804977a 	slli	r2,r3,29
1000d544:	3809883a 	mov	r4,r7
1000d548:	11a2b03a 	or	r17,r2,r6
1000d54c:	003fe306 	br	1000d4dc <__alt_data_end+0xf800d4dc>
1000d550:	0401ffc4 	movi	r16,2047
1000d554:	003e1e06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d558:	0005883a 	mov	r2,zero
1000d55c:	003f8306 	br	1000d36c <__alt_data_end+0xf800d36c>
1000d560:	113ff804 	addi	r4,r2,-32
1000d564:	02000804 	movi	r8,32
1000d568:	2908d83a 	srl	r4,r5,r4
1000d56c:	12002526 	beq	r2,r8,1000d604 <__subdf3+0x8c0>
1000d570:	02001004 	movi	r8,64
1000d574:	4085c83a 	sub	r2,r8,r2
1000d578:	288a983a 	sll	r5,r5,r2
1000d57c:	2c62b03a 	or	r17,r5,r17
1000d580:	8822c03a 	cmpne	r17,r17,zero
1000d584:	8922b03a 	or	r17,r17,r4
1000d588:	0005883a 	mov	r2,zero
1000d58c:	003f2406 	br	1000d220 <__alt_data_end+0xf800d220>
1000d590:	01402034 	movhi	r5,128
1000d594:	0011883a 	mov	r8,zero
1000d598:	297fffc4 	addi	r5,r5,-1
1000d59c:	047ffe04 	movi	r17,-8
1000d5a0:	0401ffc4 	movi	r16,2047
1000d5a4:	003e6a06 	br	1000cf50 <__alt_data_end+0xf800cf50>
1000d5a8:	2c62b03a 	or	r17,r5,r17
1000d5ac:	8822c03a 	cmpne	r17,r17,zero
1000d5b0:	0005883a 	mov	r2,zero
1000d5b4:	003fa506 	br	1000d44c <__alt_data_end+0xf800d44c>
1000d5b8:	180b883a 	mov	r5,r3
1000d5bc:	3023883a 	mov	r17,r6
1000d5c0:	003e0306 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d5c4:	180b883a 	mov	r5,r3
1000d5c8:	3023883a 	mov	r17,r6
1000d5cc:	0401ffc4 	movi	r16,2047
1000d5d0:	003dff06 	br	1000cdd0 <__alt_data_end+0xf800cdd0>
1000d5d4:	113ff804 	addi	r4,r2,-32
1000d5d8:	01c00804 	movi	r7,32
1000d5dc:	2908d83a 	srl	r4,r5,r4
1000d5e0:	11c00a26 	beq	r2,r7,1000d60c <__subdf3+0x8c8>
1000d5e4:	01c01004 	movi	r7,64
1000d5e8:	3885c83a 	sub	r2,r7,r2
1000d5ec:	288a983a 	sll	r5,r5,r2
1000d5f0:	2c62b03a 	or	r17,r5,r17
1000d5f4:	8822c03a 	cmpne	r17,r17,zero
1000d5f8:	8922b03a 	or	r17,r17,r4
1000d5fc:	0005883a 	mov	r2,zero
1000d600:	003f9206 	br	1000d44c <__alt_data_end+0xf800d44c>
1000d604:	000b883a 	mov	r5,zero
1000d608:	003fdc06 	br	1000d57c <__alt_data_end+0xf800d57c>
1000d60c:	000b883a 	mov	r5,zero
1000d610:	003ff706 	br	1000d5f0 <__alt_data_end+0xf800d5f0>

1000d614 <__fixdfsi>:
1000d614:	2806d53a 	srli	r3,r5,20
1000d618:	00800434 	movhi	r2,16
1000d61c:	10bfffc4 	addi	r2,r2,-1
1000d620:	18c1ffcc 	andi	r3,r3,2047
1000d624:	0180ff84 	movi	r6,1022
1000d628:	2884703a 	and	r2,r5,r2
1000d62c:	280ad7fa 	srli	r5,r5,31
1000d630:	30c0130e 	bge	r6,r3,1000d680 <__fixdfsi+0x6c>
1000d634:	01810744 	movi	r6,1053
1000d638:	30c00d16 	blt	r6,r3,1000d670 <__fixdfsi+0x5c>
1000d63c:	01810cc4 	movi	r6,1075
1000d640:	30cdc83a 	sub	r6,r6,r3
1000d644:	01c007c4 	movi	r7,31
1000d648:	10800434 	orhi	r2,r2,16
1000d64c:	39800e0e 	bge	r7,r6,1000d688 <__fixdfsi+0x74>
1000d650:	010104c4 	movi	r4,1043
1000d654:	20c7c83a 	sub	r3,r4,r3
1000d658:	10c6d83a 	srl	r3,r2,r3
1000d65c:	29403fcc 	andi	r5,r5,255
1000d660:	0145c83a 	sub	r2,zero,r5
1000d664:	1884f03a 	xor	r2,r3,r2
1000d668:	1145883a 	add	r2,r2,r5
1000d66c:	f800283a 	ret
1000d670:	00a00034 	movhi	r2,32768
1000d674:	10bfffc4 	addi	r2,r2,-1
1000d678:	2885883a 	add	r2,r5,r2
1000d67c:	f800283a 	ret
1000d680:	0005883a 	mov	r2,zero
1000d684:	f800283a 	ret
1000d688:	18fefb44 	addi	r3,r3,-1043
1000d68c:	2188d83a 	srl	r4,r4,r6
1000d690:	10c6983a 	sll	r3,r2,r3
1000d694:	20c6b03a 	or	r3,r4,r3
1000d698:	003ff006 	br	1000d65c <__alt_data_end+0xf800d65c>

1000d69c <__floatsidf>:
1000d69c:	defffd04 	addi	sp,sp,-12
1000d6a0:	dc400115 	stw	r17,4(sp)
1000d6a4:	dfc00215 	stw	ra,8(sp)
1000d6a8:	dc000015 	stw	r16,0(sp)
1000d6ac:	2023883a 	mov	r17,r4
1000d6b0:	20001426 	beq	r4,zero,1000d704 <__floatsidf+0x68>
1000d6b4:	2020d7fa 	srli	r16,r4,31
1000d6b8:	80000126 	beq	r16,zero,1000d6c0 <__floatsidf+0x24>
1000d6bc:	0123c83a 	sub	r17,zero,r4
1000d6c0:	8809883a 	mov	r4,r17
1000d6c4:	000d8100 	call	1000d810 <__clzsi2>
1000d6c8:	01410784 	movi	r5,1054
1000d6cc:	00c00284 	movi	r3,10
1000d6d0:	288bc83a 	sub	r5,r5,r2
1000d6d4:	18801c16 	blt	r3,r2,1000d748 <__floatsidf+0xac>
1000d6d8:	00c002c4 	movi	r3,11
1000d6dc:	1887c83a 	sub	r3,r3,r2
1000d6e0:	88c8d83a 	srl	r4,r17,r3
1000d6e4:	00c00434 	movhi	r3,16
1000d6e8:	18ffffc4 	addi	r3,r3,-1
1000d6ec:	10800544 	addi	r2,r2,21
1000d6f0:	20c8703a 	and	r4,r4,r3
1000d6f4:	8884983a 	sll	r2,r17,r2
1000d6f8:	28c1ffcc 	andi	r3,r5,2047
1000d6fc:	800d883a 	mov	r6,r16
1000d700:	00000406 	br	1000d714 <__floatsidf+0x78>
1000d704:	000d883a 	mov	r6,zero
1000d708:	0007883a 	mov	r3,zero
1000d70c:	0009883a 	mov	r4,zero
1000d710:	0005883a 	mov	r2,zero
1000d714:	180a953a 	slli	r5,r3,20
1000d718:	31803fcc 	andi	r6,r6,255
1000d71c:	00c00434 	movhi	r3,16
1000d720:	300c97fa 	slli	r6,r6,31
1000d724:	18ffffc4 	addi	r3,r3,-1
1000d728:	20c6703a 	and	r3,r4,r3
1000d72c:	1946b03a 	or	r3,r3,r5
1000d730:	1986b03a 	or	r3,r3,r6
1000d734:	dfc00217 	ldw	ra,8(sp)
1000d738:	dc400117 	ldw	r17,4(sp)
1000d73c:	dc000017 	ldw	r16,0(sp)
1000d740:	dec00304 	addi	sp,sp,12
1000d744:	f800283a 	ret
1000d748:	10fffd44 	addi	r3,r2,-11
1000d74c:	88c8983a 	sll	r4,r17,r3
1000d750:	00800434 	movhi	r2,16
1000d754:	10bfffc4 	addi	r2,r2,-1
1000d758:	2088703a 	and	r4,r4,r2
1000d75c:	28c1ffcc 	andi	r3,r5,2047
1000d760:	800d883a 	mov	r6,r16
1000d764:	0005883a 	mov	r2,zero
1000d768:	003fea06 	br	1000d714 <__alt_data_end+0xf800d714>

1000d76c <__floatunsidf>:
1000d76c:	defffe04 	addi	sp,sp,-8
1000d770:	dc000015 	stw	r16,0(sp)
1000d774:	dfc00115 	stw	ra,4(sp)
1000d778:	2021883a 	mov	r16,r4
1000d77c:	20001026 	beq	r4,zero,1000d7c0 <__floatunsidf+0x54>
1000d780:	000d8100 	call	1000d810 <__clzsi2>
1000d784:	01410784 	movi	r5,1054
1000d788:	100d883a 	mov	r6,r2
1000d78c:	288bc83a 	sub	r5,r5,r2
1000d790:	00800284 	movi	r2,10
1000d794:	11801616 	blt	r2,r6,1000d7f0 <__floatunsidf+0x84>
1000d798:	008002c4 	movi	r2,11
1000d79c:	1185c83a 	sub	r2,r2,r6
1000d7a0:	8084d83a 	srl	r2,r16,r2
1000d7a4:	00c00434 	movhi	r3,16
1000d7a8:	31c00544 	addi	r7,r6,21
1000d7ac:	18ffffc4 	addi	r3,r3,-1
1000d7b0:	81e0983a 	sll	r16,r16,r7
1000d7b4:	10cc703a 	and	r6,r2,r3
1000d7b8:	2941ffcc 	andi	r5,r5,2047
1000d7bc:	00000206 	br	1000d7c8 <__floatunsidf+0x5c>
1000d7c0:	000b883a 	mov	r5,zero
1000d7c4:	000d883a 	mov	r6,zero
1000d7c8:	280a953a 	slli	r5,r5,20
1000d7cc:	00c00434 	movhi	r3,16
1000d7d0:	18ffffc4 	addi	r3,r3,-1
1000d7d4:	30c6703a 	and	r3,r6,r3
1000d7d8:	8005883a 	mov	r2,r16
1000d7dc:	1946b03a 	or	r3,r3,r5
1000d7e0:	dfc00117 	ldw	ra,4(sp)
1000d7e4:	dc000017 	ldw	r16,0(sp)
1000d7e8:	dec00204 	addi	sp,sp,8
1000d7ec:	f800283a 	ret
1000d7f0:	31bffd44 	addi	r6,r6,-11
1000d7f4:	818c983a 	sll	r6,r16,r6
1000d7f8:	00800434 	movhi	r2,16
1000d7fc:	10bfffc4 	addi	r2,r2,-1
1000d800:	2941ffcc 	andi	r5,r5,2047
1000d804:	0021883a 	mov	r16,zero
1000d808:	308c703a 	and	r6,r6,r2
1000d80c:	003fee06 	br	1000d7c8 <__alt_data_end+0xf800d7c8>

1000d810 <__clzsi2>:
1000d810:	00bfffd4 	movui	r2,65535
1000d814:	11000b36 	bltu	r2,r4,1000d844 <__clzsi2+0x34>
1000d818:	00803fc4 	movi	r2,255
1000d81c:	1100122e 	bgeu	r2,r4,1000d868 <__clzsi2+0x58>
1000d820:	00c00204 	movi	r3,8
1000d824:	01400604 	movi	r5,24
1000d828:	20c8d83a 	srl	r4,r4,r3
1000d82c:	00840074 	movhi	r2,4097
1000d830:	1080d504 	addi	r2,r2,852
1000d834:	1109883a 	add	r4,r2,r4
1000d838:	20800003 	ldbu	r2,0(r4)
1000d83c:	2885c83a 	sub	r2,r5,r2
1000d840:	f800283a 	ret
1000d844:	00804034 	movhi	r2,256
1000d848:	10bfffc4 	addi	r2,r2,-1
1000d84c:	11000336 	bltu	r2,r4,1000d85c <__clzsi2+0x4c>
1000d850:	00c00404 	movi	r3,16
1000d854:	180b883a 	mov	r5,r3
1000d858:	003ff306 	br	1000d828 <__alt_data_end+0xf800d828>
1000d85c:	00c00604 	movi	r3,24
1000d860:	01400204 	movi	r5,8
1000d864:	003ff006 	br	1000d828 <__alt_data_end+0xf800d828>
1000d868:	0007883a 	mov	r3,zero
1000d86c:	01400804 	movi	r5,32
1000d870:	003fed06 	br	1000d828 <__alt_data_end+0xf800d828>

1000d874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d874:	defffe04 	addi	sp,sp,-8
1000d878:	dfc00115 	stw	ra,4(sp)
1000d87c:	df000015 	stw	fp,0(sp)
1000d880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d884:	00840074 	movhi	r2,4097
1000d888:	10896704 	addi	r2,r2,9628
1000d88c:	10800017 	ldw	r2,0(r2)
1000d890:	10000526 	beq	r2,zero,1000d8a8 <alt_get_errno+0x34>
1000d894:	00840074 	movhi	r2,4097
1000d898:	10896704 	addi	r2,r2,9628
1000d89c:	10800017 	ldw	r2,0(r2)
1000d8a0:	103ee83a 	callr	r2
1000d8a4:	00000206 	br	1000d8b0 <alt_get_errno+0x3c>
1000d8a8:	00840074 	movhi	r2,4097
1000d8ac:	1091bc04 	addi	r2,r2,18160
}
1000d8b0:	e037883a 	mov	sp,fp
1000d8b4:	dfc00117 	ldw	ra,4(sp)
1000d8b8:	df000017 	ldw	fp,0(sp)
1000d8bc:	dec00204 	addi	sp,sp,8
1000d8c0:	f800283a 	ret

1000d8c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d8c4:	defffb04 	addi	sp,sp,-20
1000d8c8:	dfc00415 	stw	ra,16(sp)
1000d8cc:	df000315 	stw	fp,12(sp)
1000d8d0:	df000304 	addi	fp,sp,12
1000d8d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d8d8:	e0bfff17 	ldw	r2,-4(fp)
1000d8dc:	10000816 	blt	r2,zero,1000d900 <close+0x3c>
1000d8e0:	e13fff17 	ldw	r4,-4(fp)
1000d8e4:	01400304 	movi	r5,12
1000d8e8:	000103c0 	call	1000103c <__mulsi3>
1000d8ec:	1007883a 	mov	r3,r2
1000d8f0:	00840074 	movhi	r2,4097
1000d8f4:	1084e404 	addi	r2,r2,5008
1000d8f8:	1885883a 	add	r2,r3,r2
1000d8fc:	00000106 	br	1000d904 <close+0x40>
1000d900:	0005883a 	mov	r2,zero
1000d904:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d908:	e0bffd17 	ldw	r2,-12(fp)
1000d90c:	10001926 	beq	r2,zero,1000d974 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d910:	e0bffd17 	ldw	r2,-12(fp)
1000d914:	10800017 	ldw	r2,0(r2)
1000d918:	10800417 	ldw	r2,16(r2)
1000d91c:	10000626 	beq	r2,zero,1000d938 <close+0x74>
1000d920:	e0bffd17 	ldw	r2,-12(fp)
1000d924:	10800017 	ldw	r2,0(r2)
1000d928:	10800417 	ldw	r2,16(r2)
1000d92c:	e13ffd17 	ldw	r4,-12(fp)
1000d930:	103ee83a 	callr	r2
1000d934:	00000106 	br	1000d93c <close+0x78>
1000d938:	0005883a 	mov	r2,zero
1000d93c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d940:	e13fff17 	ldw	r4,-4(fp)
1000d944:	000dfe80 	call	1000dfe8 <alt_release_fd>
    if (rval < 0)
1000d948:	e0bffe17 	ldw	r2,-8(fp)
1000d94c:	1000070e 	bge	r2,zero,1000d96c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000d950:	000d8740 	call	1000d874 <alt_get_errno>
1000d954:	1007883a 	mov	r3,r2
1000d958:	e0bffe17 	ldw	r2,-8(fp)
1000d95c:	0085c83a 	sub	r2,zero,r2
1000d960:	18800015 	stw	r2,0(r3)
      return -1;
1000d964:	00bfffc4 	movi	r2,-1
1000d968:	00000706 	br	1000d988 <close+0xc4>
    }
    return 0;
1000d96c:	0005883a 	mov	r2,zero
1000d970:	00000506 	br	1000d988 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d974:	000d8740 	call	1000d874 <alt_get_errno>
1000d978:	1007883a 	mov	r3,r2
1000d97c:	00801444 	movi	r2,81
1000d980:	18800015 	stw	r2,0(r3)
    return -1;
1000d984:	00bfffc4 	movi	r2,-1
  }
}
1000d988:	e037883a 	mov	sp,fp
1000d98c:	dfc00117 	ldw	ra,4(sp)
1000d990:	df000017 	ldw	fp,0(sp)
1000d994:	dec00204 	addi	sp,sp,8
1000d998:	f800283a 	ret

1000d99c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d99c:	defffc04 	addi	sp,sp,-16
1000d9a0:	df000315 	stw	fp,12(sp)
1000d9a4:	df000304 	addi	fp,sp,12
1000d9a8:	e13ffd15 	stw	r4,-12(fp)
1000d9ac:	e17ffe15 	stw	r5,-8(fp)
1000d9b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d9b4:	e0bfff17 	ldw	r2,-4(fp)
}
1000d9b8:	e037883a 	mov	sp,fp
1000d9bc:	df000017 	ldw	fp,0(sp)
1000d9c0:	dec00104 	addi	sp,sp,4
1000d9c4:	f800283a 	ret

1000d9c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d9c8:	defffe04 	addi	sp,sp,-8
1000d9cc:	dfc00115 	stw	ra,4(sp)
1000d9d0:	df000015 	stw	fp,0(sp)
1000d9d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d9d8:	00840074 	movhi	r2,4097
1000d9dc:	10896704 	addi	r2,r2,9628
1000d9e0:	10800017 	ldw	r2,0(r2)
1000d9e4:	10000526 	beq	r2,zero,1000d9fc <alt_get_errno+0x34>
1000d9e8:	00840074 	movhi	r2,4097
1000d9ec:	10896704 	addi	r2,r2,9628
1000d9f0:	10800017 	ldw	r2,0(r2)
1000d9f4:	103ee83a 	callr	r2
1000d9f8:	00000206 	br	1000da04 <alt_get_errno+0x3c>
1000d9fc:	00840074 	movhi	r2,4097
1000da00:	1091bc04 	addi	r2,r2,18160
}
1000da04:	e037883a 	mov	sp,fp
1000da08:	dfc00117 	ldw	ra,4(sp)
1000da0c:	df000017 	ldw	fp,0(sp)
1000da10:	dec00204 	addi	sp,sp,8
1000da14:	f800283a 	ret

1000da18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000da18:	defffb04 	addi	sp,sp,-20
1000da1c:	dfc00415 	stw	ra,16(sp)
1000da20:	df000315 	stw	fp,12(sp)
1000da24:	df000304 	addi	fp,sp,12
1000da28:	e13ffe15 	stw	r4,-8(fp)
1000da2c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da30:	e0bffe17 	ldw	r2,-8(fp)
1000da34:	10000816 	blt	r2,zero,1000da58 <fstat+0x40>
1000da38:	e13ffe17 	ldw	r4,-8(fp)
1000da3c:	01400304 	movi	r5,12
1000da40:	000103c0 	call	1000103c <__mulsi3>
1000da44:	1007883a 	mov	r3,r2
1000da48:	00840074 	movhi	r2,4097
1000da4c:	1084e404 	addi	r2,r2,5008
1000da50:	1885883a 	add	r2,r3,r2
1000da54:	00000106 	br	1000da5c <fstat+0x44>
1000da58:	0005883a 	mov	r2,zero
1000da5c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000da60:	e0bffd17 	ldw	r2,-12(fp)
1000da64:	10001026 	beq	r2,zero,1000daa8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000da68:	e0bffd17 	ldw	r2,-12(fp)
1000da6c:	10800017 	ldw	r2,0(r2)
1000da70:	10800817 	ldw	r2,32(r2)
1000da74:	10000726 	beq	r2,zero,1000da94 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000da78:	e0bffd17 	ldw	r2,-12(fp)
1000da7c:	10800017 	ldw	r2,0(r2)
1000da80:	10800817 	ldw	r2,32(r2)
1000da84:	e13ffd17 	ldw	r4,-12(fp)
1000da88:	e17fff17 	ldw	r5,-4(fp)
1000da8c:	103ee83a 	callr	r2
1000da90:	00000a06 	br	1000dabc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000da94:	e0bfff17 	ldw	r2,-4(fp)
1000da98:	00c80004 	movi	r3,8192
1000da9c:	10c00115 	stw	r3,4(r2)
      return 0;
1000daa0:	0005883a 	mov	r2,zero
1000daa4:	00000506 	br	1000dabc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000daa8:	000d9c80 	call	1000d9c8 <alt_get_errno>
1000daac:	1007883a 	mov	r3,r2
1000dab0:	00801444 	movi	r2,81
1000dab4:	18800015 	stw	r2,0(r3)
    return -1;
1000dab8:	00bfffc4 	movi	r2,-1
  }
}
1000dabc:	e037883a 	mov	sp,fp
1000dac0:	dfc00117 	ldw	ra,4(sp)
1000dac4:	df000017 	ldw	fp,0(sp)
1000dac8:	dec00204 	addi	sp,sp,8
1000dacc:	f800283a 	ret

1000dad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dad0:	defffe04 	addi	sp,sp,-8
1000dad4:	dfc00115 	stw	ra,4(sp)
1000dad8:	df000015 	stw	fp,0(sp)
1000dadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dae0:	00840074 	movhi	r2,4097
1000dae4:	10896704 	addi	r2,r2,9628
1000dae8:	10800017 	ldw	r2,0(r2)
1000daec:	10000526 	beq	r2,zero,1000db04 <alt_get_errno+0x34>
1000daf0:	00840074 	movhi	r2,4097
1000daf4:	10896704 	addi	r2,r2,9628
1000daf8:	10800017 	ldw	r2,0(r2)
1000dafc:	103ee83a 	callr	r2
1000db00:	00000206 	br	1000db0c <alt_get_errno+0x3c>
1000db04:	00840074 	movhi	r2,4097
1000db08:	1091bc04 	addi	r2,r2,18160
}
1000db0c:	e037883a 	mov	sp,fp
1000db10:	dfc00117 	ldw	ra,4(sp)
1000db14:	df000017 	ldw	fp,0(sp)
1000db18:	dec00204 	addi	sp,sp,8
1000db1c:	f800283a 	ret

1000db20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000db20:	deffed04 	addi	sp,sp,-76
1000db24:	dfc01215 	stw	ra,72(sp)
1000db28:	df001115 	stw	fp,68(sp)
1000db2c:	df001104 	addi	fp,sp,68
1000db30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000db34:	e0bfff17 	ldw	r2,-4(fp)
1000db38:	10000816 	blt	r2,zero,1000db5c <isatty+0x3c>
1000db3c:	e13fff17 	ldw	r4,-4(fp)
1000db40:	01400304 	movi	r5,12
1000db44:	000103c0 	call	1000103c <__mulsi3>
1000db48:	1007883a 	mov	r3,r2
1000db4c:	00840074 	movhi	r2,4097
1000db50:	1084e404 	addi	r2,r2,5008
1000db54:	1885883a 	add	r2,r3,r2
1000db58:	00000106 	br	1000db60 <isatty+0x40>
1000db5c:	0005883a 	mov	r2,zero
1000db60:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000db64:	e0bfef17 	ldw	r2,-68(fp)
1000db68:	10000e26 	beq	r2,zero,1000dba4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000db6c:	e0bfef17 	ldw	r2,-68(fp)
1000db70:	10800017 	ldw	r2,0(r2)
1000db74:	10800817 	ldw	r2,32(r2)
1000db78:	1000021e 	bne	r2,zero,1000db84 <isatty+0x64>
    {
      return 1;
1000db7c:	00800044 	movi	r2,1
1000db80:	00000d06 	br	1000dbb8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000db84:	e0bff004 	addi	r2,fp,-64
1000db88:	e13fff17 	ldw	r4,-4(fp)
1000db8c:	100b883a 	mov	r5,r2
1000db90:	000da180 	call	1000da18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000db94:	e0bff117 	ldw	r2,-60(fp)
1000db98:	10880020 	cmpeqi	r2,r2,8192
1000db9c:	10803fcc 	andi	r2,r2,255
1000dba0:	00000506 	br	1000dbb8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dba4:	000dad00 	call	1000dad0 <alt_get_errno>
1000dba8:	1007883a 	mov	r3,r2
1000dbac:	00801444 	movi	r2,81
1000dbb0:	18800015 	stw	r2,0(r3)
    return 0;
1000dbb4:	0005883a 	mov	r2,zero
  }
}
1000dbb8:	e037883a 	mov	sp,fp
1000dbbc:	dfc00117 	ldw	ra,4(sp)
1000dbc0:	df000017 	ldw	fp,0(sp)
1000dbc4:	dec00204 	addi	sp,sp,8
1000dbc8:	f800283a 	ret

1000dbcc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000dbcc:	defffc04 	addi	sp,sp,-16
1000dbd0:	df000315 	stw	fp,12(sp)
1000dbd4:	df000304 	addi	fp,sp,12
1000dbd8:	e13ffd15 	stw	r4,-12(fp)
1000dbdc:	e17ffe15 	stw	r5,-8(fp)
1000dbe0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000dbe4:	e0fffe17 	ldw	r3,-8(fp)
1000dbe8:	e0bffd17 	ldw	r2,-12(fp)
1000dbec:	18800c26 	beq	r3,r2,1000dc20 <alt_load_section+0x54>
  {
    while( to != end )
1000dbf0:	00000806 	br	1000dc14 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000dbf4:	e0bffe17 	ldw	r2,-8(fp)
1000dbf8:	10c00104 	addi	r3,r2,4
1000dbfc:	e0fffe15 	stw	r3,-8(fp)
1000dc00:	e0fffd17 	ldw	r3,-12(fp)
1000dc04:	19000104 	addi	r4,r3,4
1000dc08:	e13ffd15 	stw	r4,-12(fp)
1000dc0c:	18c00017 	ldw	r3,0(r3)
1000dc10:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000dc14:	e0fffe17 	ldw	r3,-8(fp)
1000dc18:	e0bfff17 	ldw	r2,-4(fp)
1000dc1c:	18bff51e 	bne	r3,r2,1000dbf4 <__alt_data_end+0xf800dbf4>
    {
      *to++ = *from++;
    }
  }
}
1000dc20:	e037883a 	mov	sp,fp
1000dc24:	df000017 	ldw	fp,0(sp)
1000dc28:	dec00104 	addi	sp,sp,4
1000dc2c:	f800283a 	ret

1000dc30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000dc30:	defffe04 	addi	sp,sp,-8
1000dc34:	dfc00115 	stw	ra,4(sp)
1000dc38:	df000015 	stw	fp,0(sp)
1000dc3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000dc40:	01040074 	movhi	r4,4097
1000dc44:	21096c04 	addi	r4,r4,9648
1000dc48:	01440074 	movhi	r5,4097
1000dc4c:	29412204 	addi	r5,r5,1160
1000dc50:	01840074 	movhi	r6,4097
1000dc54:	31896c04 	addi	r6,r6,9648
1000dc58:	000dbcc0 	call	1000dbcc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000dc5c:	01040034 	movhi	r4,4096
1000dc60:	21000804 	addi	r4,r4,32
1000dc64:	01440034 	movhi	r5,4096
1000dc68:	29400804 	addi	r5,r5,32
1000dc6c:	01840034 	movhi	r6,4096
1000dc70:	31806f04 	addi	r6,r6,444
1000dc74:	000dbcc0 	call	1000dbcc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000dc78:	01040074 	movhi	r4,4097
1000dc7c:	213fcc04 	addi	r4,r4,-208
1000dc80:	01440074 	movhi	r5,4097
1000dc84:	297fcc04 	addi	r5,r5,-208
1000dc88:	01840074 	movhi	r6,4097
1000dc8c:	31812204 	addi	r6,r6,1160
1000dc90:	000dbcc0 	call	1000dbcc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000dc94:	000eea80 	call	1000eea8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000dc98:	000f0700 	call	1000f070 <alt_icache_flush_all>
}
1000dc9c:	e037883a 	mov	sp,fp
1000dca0:	dfc00117 	ldw	ra,4(sp)
1000dca4:	df000017 	ldw	fp,0(sp)
1000dca8:	dec00204 	addi	sp,sp,8
1000dcac:	f800283a 	ret

1000dcb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dcb0:	defffe04 	addi	sp,sp,-8
1000dcb4:	dfc00115 	stw	ra,4(sp)
1000dcb8:	df000015 	stw	fp,0(sp)
1000dcbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dcc0:	00840074 	movhi	r2,4097
1000dcc4:	10896704 	addi	r2,r2,9628
1000dcc8:	10800017 	ldw	r2,0(r2)
1000dccc:	10000526 	beq	r2,zero,1000dce4 <alt_get_errno+0x34>
1000dcd0:	00840074 	movhi	r2,4097
1000dcd4:	10896704 	addi	r2,r2,9628
1000dcd8:	10800017 	ldw	r2,0(r2)
1000dcdc:	103ee83a 	callr	r2
1000dce0:	00000206 	br	1000dcec <alt_get_errno+0x3c>
1000dce4:	00840074 	movhi	r2,4097
1000dce8:	1091bc04 	addi	r2,r2,18160
}
1000dcec:	e037883a 	mov	sp,fp
1000dcf0:	dfc00117 	ldw	ra,4(sp)
1000dcf4:	df000017 	ldw	fp,0(sp)
1000dcf8:	dec00204 	addi	sp,sp,8
1000dcfc:	f800283a 	ret

1000dd00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dd00:	defff904 	addi	sp,sp,-28
1000dd04:	dfc00615 	stw	ra,24(sp)
1000dd08:	df000515 	stw	fp,20(sp)
1000dd0c:	df000504 	addi	fp,sp,20
1000dd10:	e13ffd15 	stw	r4,-12(fp)
1000dd14:	e17ffe15 	stw	r5,-8(fp)
1000dd18:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dd1c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dd20:	e0bffd17 	ldw	r2,-12(fp)
1000dd24:	10000816 	blt	r2,zero,1000dd48 <lseek+0x48>
1000dd28:	e13ffd17 	ldw	r4,-12(fp)
1000dd2c:	01400304 	movi	r5,12
1000dd30:	000103c0 	call	1000103c <__mulsi3>
1000dd34:	1007883a 	mov	r3,r2
1000dd38:	00840074 	movhi	r2,4097
1000dd3c:	1084e404 	addi	r2,r2,5008
1000dd40:	1885883a 	add	r2,r3,r2
1000dd44:	00000106 	br	1000dd4c <lseek+0x4c>
1000dd48:	0005883a 	mov	r2,zero
1000dd4c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dd50:	e0bffc17 	ldw	r2,-16(fp)
1000dd54:	10001026 	beq	r2,zero,1000dd98 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dd58:	e0bffc17 	ldw	r2,-16(fp)
1000dd5c:	10800017 	ldw	r2,0(r2)
1000dd60:	10800717 	ldw	r2,28(r2)
1000dd64:	10000926 	beq	r2,zero,1000dd8c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dd68:	e0bffc17 	ldw	r2,-16(fp)
1000dd6c:	10800017 	ldw	r2,0(r2)
1000dd70:	10800717 	ldw	r2,28(r2)
1000dd74:	e13ffc17 	ldw	r4,-16(fp)
1000dd78:	e17ffe17 	ldw	r5,-8(fp)
1000dd7c:	e1bfff17 	ldw	r6,-4(fp)
1000dd80:	103ee83a 	callr	r2
1000dd84:	e0bffb15 	stw	r2,-20(fp)
1000dd88:	00000506 	br	1000dda0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dd8c:	00bfde84 	movi	r2,-134
1000dd90:	e0bffb15 	stw	r2,-20(fp)
1000dd94:	00000206 	br	1000dda0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dd98:	00bfebc4 	movi	r2,-81
1000dd9c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dda0:	e0bffb17 	ldw	r2,-20(fp)
1000dda4:	1000070e 	bge	r2,zero,1000ddc4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000dda8:	000dcb00 	call	1000dcb0 <alt_get_errno>
1000ddac:	1007883a 	mov	r3,r2
1000ddb0:	e0bffb17 	ldw	r2,-20(fp)
1000ddb4:	0085c83a 	sub	r2,zero,r2
1000ddb8:	18800015 	stw	r2,0(r3)
    rc = -1;
1000ddbc:	00bfffc4 	movi	r2,-1
1000ddc0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000ddc4:	e0bffb17 	ldw	r2,-20(fp)
}
1000ddc8:	e037883a 	mov	sp,fp
1000ddcc:	dfc00117 	ldw	ra,4(sp)
1000ddd0:	df000017 	ldw	fp,0(sp)
1000ddd4:	dec00204 	addi	sp,sp,8
1000ddd8:	f800283a 	ret

1000dddc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000dddc:	defffd04 	addi	sp,sp,-12
1000dde0:	dfc00215 	stw	ra,8(sp)
1000dde4:	df000115 	stw	fp,4(sp)
1000dde8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000ddec:	0009883a 	mov	r4,zero
1000ddf0:	000e2a00 	call	1000e2a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000ddf4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000ddf8:	000e2d40 	call	1000e2d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000ddfc:	01040074 	movhi	r4,4097
1000de00:	21011804 	addi	r4,r4,1120
1000de04:	01440074 	movhi	r5,4097
1000de08:	29411804 	addi	r5,r5,1120
1000de0c:	01840074 	movhi	r6,4097
1000de10:	31811804 	addi	r6,r6,1120
1000de14:	000f43c0 	call	1000f43c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000de18:	000efb80 	call	1000efb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000de1c:	01040074 	movhi	r4,4097
1000de20:	213c0504 	addi	r4,r4,-4076
1000de24:	000fb8c0 	call	1000fb8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000de28:	d1286117 	ldw	r4,-24188(gp)
1000de2c:	d0e86217 	ldw	r3,-24184(gp)
1000de30:	d0a86317 	ldw	r2,-24180(gp)
1000de34:	180b883a 	mov	r5,r3
1000de38:	100d883a 	mov	r6,r2
1000de3c:	0000cac0 	call	10000cac <main>
1000de40:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000de44:	01000044 	movi	r4,1
1000de48:	000d8c40 	call	1000d8c4 <close>
  exit (result);
1000de4c:	e13fff17 	ldw	r4,-4(fp)
1000de50:	000fba00 	call	1000fba0 <exit>

1000de54 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000de54:	defffe04 	addi	sp,sp,-8
1000de58:	df000115 	stw	fp,4(sp)
1000de5c:	df000104 	addi	fp,sp,4
1000de60:	e13fff15 	stw	r4,-4(fp)
}
1000de64:	e037883a 	mov	sp,fp
1000de68:	df000017 	ldw	fp,0(sp)
1000de6c:	dec00104 	addi	sp,sp,4
1000de70:	f800283a 	ret

1000de74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000de74:	defffe04 	addi	sp,sp,-8
1000de78:	df000115 	stw	fp,4(sp)
1000de7c:	df000104 	addi	fp,sp,4
1000de80:	e13fff15 	stw	r4,-4(fp)
}
1000de84:	e037883a 	mov	sp,fp
1000de88:	df000017 	ldw	fp,0(sp)
1000de8c:	dec00104 	addi	sp,sp,4
1000de90:	f800283a 	ret

1000de94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000de94:	defffe04 	addi	sp,sp,-8
1000de98:	dfc00115 	stw	ra,4(sp)
1000de9c:	df000015 	stw	fp,0(sp)
1000dea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dea4:	00840074 	movhi	r2,4097
1000dea8:	10896704 	addi	r2,r2,9628
1000deac:	10800017 	ldw	r2,0(r2)
1000deb0:	10000526 	beq	r2,zero,1000dec8 <alt_get_errno+0x34>
1000deb4:	00840074 	movhi	r2,4097
1000deb8:	10896704 	addi	r2,r2,9628
1000debc:	10800017 	ldw	r2,0(r2)
1000dec0:	103ee83a 	callr	r2
1000dec4:	00000206 	br	1000ded0 <alt_get_errno+0x3c>
1000dec8:	00840074 	movhi	r2,4097
1000decc:	1091bc04 	addi	r2,r2,18160
}
1000ded0:	e037883a 	mov	sp,fp
1000ded4:	dfc00117 	ldw	ra,4(sp)
1000ded8:	df000017 	ldw	fp,0(sp)
1000dedc:	dec00204 	addi	sp,sp,8
1000dee0:	f800283a 	ret

1000dee4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000dee4:	defff904 	addi	sp,sp,-28
1000dee8:	dfc00615 	stw	ra,24(sp)
1000deec:	df000515 	stw	fp,20(sp)
1000def0:	df000504 	addi	fp,sp,20
1000def4:	e13ffd15 	stw	r4,-12(fp)
1000def8:	e17ffe15 	stw	r5,-8(fp)
1000defc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000df00:	e0bffd17 	ldw	r2,-12(fp)
1000df04:	10000816 	blt	r2,zero,1000df28 <read+0x44>
1000df08:	e13ffd17 	ldw	r4,-12(fp)
1000df0c:	01400304 	movi	r5,12
1000df10:	000103c0 	call	1000103c <__mulsi3>
1000df14:	1007883a 	mov	r3,r2
1000df18:	00840074 	movhi	r2,4097
1000df1c:	1084e404 	addi	r2,r2,5008
1000df20:	1885883a 	add	r2,r3,r2
1000df24:	00000106 	br	1000df2c <read+0x48>
1000df28:	0005883a 	mov	r2,zero
1000df2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000df30:	e0bffb17 	ldw	r2,-20(fp)
1000df34:	10002226 	beq	r2,zero,1000dfc0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df38:	e0bffb17 	ldw	r2,-20(fp)
1000df3c:	10800217 	ldw	r2,8(r2)
1000df40:	108000cc 	andi	r2,r2,3
1000df44:	10800060 	cmpeqi	r2,r2,1
1000df48:	1000181e 	bne	r2,zero,1000dfac <read+0xc8>
        (fd->dev->read))
1000df4c:	e0bffb17 	ldw	r2,-20(fp)
1000df50:	10800017 	ldw	r2,0(r2)
1000df54:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000df58:	10001426 	beq	r2,zero,1000dfac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000df5c:	e0bffb17 	ldw	r2,-20(fp)
1000df60:	10800017 	ldw	r2,0(r2)
1000df64:	10800517 	ldw	r2,20(r2)
1000df68:	e0ffff17 	ldw	r3,-4(fp)
1000df6c:	e13ffb17 	ldw	r4,-20(fp)
1000df70:	e17ffe17 	ldw	r5,-8(fp)
1000df74:	180d883a 	mov	r6,r3
1000df78:	103ee83a 	callr	r2
1000df7c:	e0bffc15 	stw	r2,-16(fp)
1000df80:	e0bffc17 	ldw	r2,-16(fp)
1000df84:	1000070e 	bge	r2,zero,1000dfa4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000df88:	000de940 	call	1000de94 <alt_get_errno>
1000df8c:	1007883a 	mov	r3,r2
1000df90:	e0bffc17 	ldw	r2,-16(fp)
1000df94:	0085c83a 	sub	r2,zero,r2
1000df98:	18800015 	stw	r2,0(r3)
          return -1;
1000df9c:	00bfffc4 	movi	r2,-1
1000dfa0:	00000c06 	br	1000dfd4 <read+0xf0>
        }
        return rval;
1000dfa4:	e0bffc17 	ldw	r2,-16(fp)
1000dfa8:	00000a06 	br	1000dfd4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000dfac:	000de940 	call	1000de94 <alt_get_errno>
1000dfb0:	1007883a 	mov	r3,r2
1000dfb4:	00800344 	movi	r2,13
1000dfb8:	18800015 	stw	r2,0(r3)
1000dfbc:	00000406 	br	1000dfd0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000dfc0:	000de940 	call	1000de94 <alt_get_errno>
1000dfc4:	1007883a 	mov	r3,r2
1000dfc8:	00801444 	movi	r2,81
1000dfcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000dfd0:	00bfffc4 	movi	r2,-1
}
1000dfd4:	e037883a 	mov	sp,fp
1000dfd8:	dfc00117 	ldw	ra,4(sp)
1000dfdc:	df000017 	ldw	fp,0(sp)
1000dfe0:	dec00204 	addi	sp,sp,8
1000dfe4:	f800283a 	ret

1000dfe8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000dfe8:	defffc04 	addi	sp,sp,-16
1000dfec:	dfc00315 	stw	ra,12(sp)
1000dff0:	df000215 	stw	fp,8(sp)
1000dff4:	dc000115 	stw	r16,4(sp)
1000dff8:	df000204 	addi	fp,sp,8
1000dffc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000e000:	e0bffe17 	ldw	r2,-8(fp)
1000e004:	108000d0 	cmplti	r2,r2,3
1000e008:	1000111e 	bne	r2,zero,1000e050 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000e00c:	04040074 	movhi	r16,4097
1000e010:	8404e404 	addi	r16,r16,5008
1000e014:	e0bffe17 	ldw	r2,-8(fp)
1000e018:	1009883a 	mov	r4,r2
1000e01c:	01400304 	movi	r5,12
1000e020:	000103c0 	call	1000103c <__mulsi3>
1000e024:	8085883a 	add	r2,r16,r2
1000e028:	10800204 	addi	r2,r2,8
1000e02c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000e030:	04040074 	movhi	r16,4097
1000e034:	8404e404 	addi	r16,r16,5008
1000e038:	e0bffe17 	ldw	r2,-8(fp)
1000e03c:	1009883a 	mov	r4,r2
1000e040:	01400304 	movi	r5,12
1000e044:	000103c0 	call	1000103c <__mulsi3>
1000e048:	8085883a 	add	r2,r16,r2
1000e04c:	10000015 	stw	zero,0(r2)
  }
}
1000e050:	e6ffff04 	addi	sp,fp,-4
1000e054:	dfc00217 	ldw	ra,8(sp)
1000e058:	df000117 	ldw	fp,4(sp)
1000e05c:	dc000017 	ldw	r16,0(sp)
1000e060:	dec00304 	addi	sp,sp,12
1000e064:	f800283a 	ret

1000e068 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000e068:	defff904 	addi	sp,sp,-28
1000e06c:	df000615 	stw	fp,24(sp)
1000e070:	df000604 	addi	fp,sp,24
1000e074:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000e078:	0005303a 	rdctl	r2,status
1000e07c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000e080:	e0fffc17 	ldw	r3,-16(fp)
1000e084:	00bfff84 	movi	r2,-2
1000e088:	1884703a 	and	r2,r3,r2
1000e08c:	1001703a 	wrctl	status,r2
  
  return context;
1000e090:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000e094:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000e098:	d0a00c17 	ldw	r2,-32720(gp)
1000e09c:	10c000c4 	addi	r3,r2,3
1000e0a0:	00bfff04 	movi	r2,-4
1000e0a4:	1884703a 	and	r2,r3,r2
1000e0a8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000e0ac:	d0e00c17 	ldw	r3,-32720(gp)
1000e0b0:	e0bfff17 	ldw	r2,-4(fp)
1000e0b4:	1887883a 	add	r3,r3,r2
1000e0b8:	00860034 	movhi	r2,6144
1000e0bc:	10800004 	addi	r2,r2,0
1000e0c0:	10c0062e 	bgeu	r2,r3,1000e0dc <sbrk+0x74>
1000e0c4:	e0bffa17 	ldw	r2,-24(fp)
1000e0c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000e0cc:	e0bffd17 	ldw	r2,-12(fp)
1000e0d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000e0d4:	00bfffc4 	movi	r2,-1
1000e0d8:	00000b06 	br	1000e108 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e0dc:	d0a00c17 	ldw	r2,-32720(gp)
1000e0e0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000e0e4:	d0e00c17 	ldw	r3,-32720(gp)
1000e0e8:	e0bfff17 	ldw	r2,-4(fp)
1000e0ec:	1885883a 	add	r2,r3,r2
1000e0f0:	d0a00c15 	stw	r2,-32720(gp)
1000e0f4:	e0bffa17 	ldw	r2,-24(fp)
1000e0f8:	e0bffe15 	stw	r2,-8(fp)
1000e0fc:	e0bffe17 	ldw	r2,-8(fp)
1000e100:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e104:	e0bffb17 	ldw	r2,-20(fp)
} 
1000e108:	e037883a 	mov	sp,fp
1000e10c:	df000017 	ldw	fp,0(sp)
1000e110:	dec00104 	addi	sp,sp,4
1000e114:	f800283a 	ret

1000e118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e118:	defffe04 	addi	sp,sp,-8
1000e11c:	dfc00115 	stw	ra,4(sp)
1000e120:	df000015 	stw	fp,0(sp)
1000e124:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e128:	00840074 	movhi	r2,4097
1000e12c:	10896704 	addi	r2,r2,9628
1000e130:	10800017 	ldw	r2,0(r2)
1000e134:	10000526 	beq	r2,zero,1000e14c <alt_get_errno+0x34>
1000e138:	00840074 	movhi	r2,4097
1000e13c:	10896704 	addi	r2,r2,9628
1000e140:	10800017 	ldw	r2,0(r2)
1000e144:	103ee83a 	callr	r2
1000e148:	00000206 	br	1000e154 <alt_get_errno+0x3c>
1000e14c:	00840074 	movhi	r2,4097
1000e150:	1091bc04 	addi	r2,r2,18160
}
1000e154:	e037883a 	mov	sp,fp
1000e158:	dfc00117 	ldw	ra,4(sp)
1000e15c:	df000017 	ldw	fp,0(sp)
1000e160:	dec00204 	addi	sp,sp,8
1000e164:	f800283a 	ret

1000e168 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e168:	defff904 	addi	sp,sp,-28
1000e16c:	dfc00615 	stw	ra,24(sp)
1000e170:	df000515 	stw	fp,20(sp)
1000e174:	df000504 	addi	fp,sp,20
1000e178:	e13ffd15 	stw	r4,-12(fp)
1000e17c:	e17ffe15 	stw	r5,-8(fp)
1000e180:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e184:	e0bffd17 	ldw	r2,-12(fp)
1000e188:	10000816 	blt	r2,zero,1000e1ac <write+0x44>
1000e18c:	e13ffd17 	ldw	r4,-12(fp)
1000e190:	01400304 	movi	r5,12
1000e194:	000103c0 	call	1000103c <__mulsi3>
1000e198:	1007883a 	mov	r3,r2
1000e19c:	00840074 	movhi	r2,4097
1000e1a0:	1084e404 	addi	r2,r2,5008
1000e1a4:	1885883a 	add	r2,r3,r2
1000e1a8:	00000106 	br	1000e1b0 <write+0x48>
1000e1ac:	0005883a 	mov	r2,zero
1000e1b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e1b4:	e0bffb17 	ldw	r2,-20(fp)
1000e1b8:	10002126 	beq	r2,zero,1000e240 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e1bc:	e0bffb17 	ldw	r2,-20(fp)
1000e1c0:	10800217 	ldw	r2,8(r2)
1000e1c4:	108000cc 	andi	r2,r2,3
1000e1c8:	10001826 	beq	r2,zero,1000e22c <write+0xc4>
1000e1cc:	e0bffb17 	ldw	r2,-20(fp)
1000e1d0:	10800017 	ldw	r2,0(r2)
1000e1d4:	10800617 	ldw	r2,24(r2)
1000e1d8:	10001426 	beq	r2,zero,1000e22c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e1dc:	e0bffb17 	ldw	r2,-20(fp)
1000e1e0:	10800017 	ldw	r2,0(r2)
1000e1e4:	10800617 	ldw	r2,24(r2)
1000e1e8:	e0ffff17 	ldw	r3,-4(fp)
1000e1ec:	e13ffb17 	ldw	r4,-20(fp)
1000e1f0:	e17ffe17 	ldw	r5,-8(fp)
1000e1f4:	180d883a 	mov	r6,r3
1000e1f8:	103ee83a 	callr	r2
1000e1fc:	e0bffc15 	stw	r2,-16(fp)
1000e200:	e0bffc17 	ldw	r2,-16(fp)
1000e204:	1000070e 	bge	r2,zero,1000e224 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000e208:	000e1180 	call	1000e118 <alt_get_errno>
1000e20c:	1007883a 	mov	r3,r2
1000e210:	e0bffc17 	ldw	r2,-16(fp)
1000e214:	0085c83a 	sub	r2,zero,r2
1000e218:	18800015 	stw	r2,0(r3)
        return -1;
1000e21c:	00bfffc4 	movi	r2,-1
1000e220:	00000c06 	br	1000e254 <write+0xec>
      }
      return rval;
1000e224:	e0bffc17 	ldw	r2,-16(fp)
1000e228:	00000a06 	br	1000e254 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e22c:	000e1180 	call	1000e118 <alt_get_errno>
1000e230:	1007883a 	mov	r3,r2
1000e234:	00800344 	movi	r2,13
1000e238:	18800015 	stw	r2,0(r3)
1000e23c:	00000406 	br	1000e250 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e240:	000e1180 	call	1000e118 <alt_get_errno>
1000e244:	1007883a 	mov	r3,r2
1000e248:	00801444 	movi	r2,81
1000e24c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e250:	00bfffc4 	movi	r2,-1
}
1000e254:	e037883a 	mov	sp,fp
1000e258:	dfc00117 	ldw	ra,4(sp)
1000e25c:	df000017 	ldw	fp,0(sp)
1000e260:	dec00204 	addi	sp,sp,8
1000e264:	f800283a 	ret

1000e268 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e268:	defffd04 	addi	sp,sp,-12
1000e26c:	dfc00215 	stw	ra,8(sp)
1000e270:	df000115 	stw	fp,4(sp)
1000e274:	df000104 	addi	fp,sp,4
1000e278:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e27c:	e13fff17 	ldw	r4,-4(fp)
1000e280:	01440074 	movhi	r5,4097
1000e284:	29496404 	addi	r5,r5,9616
1000e288:	000ef140 	call	1000ef14 <alt_dev_llist_insert>
}
1000e28c:	e037883a 	mov	sp,fp
1000e290:	dfc00117 	ldw	ra,4(sp)
1000e294:	df000017 	ldw	fp,0(sp)
1000e298:	dec00204 	addi	sp,sp,8
1000e29c:	f800283a 	ret

1000e2a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e2a0:	defffd04 	addi	sp,sp,-12
1000e2a4:	dfc00215 	stw	ra,8(sp)
1000e2a8:	df000115 	stw	fp,4(sp)
1000e2ac:	df000104 	addi	fp,sp,4
1000e2b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000e2b4:	000f8f40 	call	1000f8f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e2b8:	00800044 	movi	r2,1
1000e2bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e2c0:	e037883a 	mov	sp,fp
1000e2c4:	dfc00117 	ldw	ra,4(sp)
1000e2c8:	df000017 	ldw	fp,0(sp)
1000e2cc:	dec00204 	addi	sp,sp,8
1000e2d0:	f800283a 	ret

1000e2d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e2d4:	defffe04 	addi	sp,sp,-8
1000e2d8:	dfc00115 	stw	ra,4(sp)
1000e2dc:	df000015 	stw	fp,0(sp)
1000e2e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e2e4:	01040074 	movhi	r4,4097
1000e2e8:	21054e04 	addi	r4,r4,5432
1000e2ec:	000b883a 	mov	r5,zero
1000e2f0:	01800144 	movi	r6,5
1000e2f4:	000e4800 	call	1000e480 <altera_avalon_jtag_uart_init>
1000e2f8:	01040074 	movhi	r4,4097
1000e2fc:	21054404 	addi	r4,r4,5392
1000e300:	000e2680 	call	1000e268 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e304:	0001883a 	nop
}
1000e308:	e037883a 	mov	sp,fp
1000e30c:	dfc00117 	ldw	ra,4(sp)
1000e310:	df000017 	ldw	fp,0(sp)
1000e314:	dec00204 	addi	sp,sp,8
1000e318:	f800283a 	ret

1000e31c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e31c:	defffa04 	addi	sp,sp,-24
1000e320:	dfc00515 	stw	ra,20(sp)
1000e324:	df000415 	stw	fp,16(sp)
1000e328:	df000404 	addi	fp,sp,16
1000e32c:	e13ffd15 	stw	r4,-12(fp)
1000e330:	e17ffe15 	stw	r5,-8(fp)
1000e334:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e338:	e0bffd17 	ldw	r2,-12(fp)
1000e33c:	10800017 	ldw	r2,0(r2)
1000e340:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e344:	e0bffc17 	ldw	r2,-16(fp)
1000e348:	10c00a04 	addi	r3,r2,40
1000e34c:	e0bffd17 	ldw	r2,-12(fp)
1000e350:	10800217 	ldw	r2,8(r2)
1000e354:	1809883a 	mov	r4,r3
1000e358:	e17ffe17 	ldw	r5,-8(fp)
1000e35c:	e1bfff17 	ldw	r6,-4(fp)
1000e360:	100f883a 	mov	r7,r2
1000e364:	000e9440 	call	1000e944 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e368:	e037883a 	mov	sp,fp
1000e36c:	dfc00117 	ldw	ra,4(sp)
1000e370:	df000017 	ldw	fp,0(sp)
1000e374:	dec00204 	addi	sp,sp,8
1000e378:	f800283a 	ret

1000e37c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e37c:	defffa04 	addi	sp,sp,-24
1000e380:	dfc00515 	stw	ra,20(sp)
1000e384:	df000415 	stw	fp,16(sp)
1000e388:	df000404 	addi	fp,sp,16
1000e38c:	e13ffd15 	stw	r4,-12(fp)
1000e390:	e17ffe15 	stw	r5,-8(fp)
1000e394:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e398:	e0bffd17 	ldw	r2,-12(fp)
1000e39c:	10800017 	ldw	r2,0(r2)
1000e3a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e3a4:	e0bffc17 	ldw	r2,-16(fp)
1000e3a8:	10c00a04 	addi	r3,r2,40
1000e3ac:	e0bffd17 	ldw	r2,-12(fp)
1000e3b0:	10800217 	ldw	r2,8(r2)
1000e3b4:	1809883a 	mov	r4,r3
1000e3b8:	e17ffe17 	ldw	r5,-8(fp)
1000e3bc:	e1bfff17 	ldw	r6,-4(fp)
1000e3c0:	100f883a 	mov	r7,r2
1000e3c4:	000eb500 	call	1000eb50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e3c8:	e037883a 	mov	sp,fp
1000e3cc:	dfc00117 	ldw	ra,4(sp)
1000e3d0:	df000017 	ldw	fp,0(sp)
1000e3d4:	dec00204 	addi	sp,sp,8
1000e3d8:	f800283a 	ret

1000e3dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e3dc:	defffc04 	addi	sp,sp,-16
1000e3e0:	dfc00315 	stw	ra,12(sp)
1000e3e4:	df000215 	stw	fp,8(sp)
1000e3e8:	df000204 	addi	fp,sp,8
1000e3ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e3f0:	e0bfff17 	ldw	r2,-4(fp)
1000e3f4:	10800017 	ldw	r2,0(r2)
1000e3f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e3fc:	e0bffe17 	ldw	r2,-8(fp)
1000e400:	10c00a04 	addi	r3,r2,40
1000e404:	e0bfff17 	ldw	r2,-4(fp)
1000e408:	10800217 	ldw	r2,8(r2)
1000e40c:	1809883a 	mov	r4,r3
1000e410:	100b883a 	mov	r5,r2
1000e414:	000e7f00 	call	1000e7f0 <altera_avalon_jtag_uart_close>
}
1000e418:	e037883a 	mov	sp,fp
1000e41c:	dfc00117 	ldw	ra,4(sp)
1000e420:	df000017 	ldw	fp,0(sp)
1000e424:	dec00204 	addi	sp,sp,8
1000e428:	f800283a 	ret

1000e42c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e42c:	defffa04 	addi	sp,sp,-24
1000e430:	dfc00515 	stw	ra,20(sp)
1000e434:	df000415 	stw	fp,16(sp)
1000e438:	df000404 	addi	fp,sp,16
1000e43c:	e13ffd15 	stw	r4,-12(fp)
1000e440:	e17ffe15 	stw	r5,-8(fp)
1000e444:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e448:	e0bffd17 	ldw	r2,-12(fp)
1000e44c:	10800017 	ldw	r2,0(r2)
1000e450:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e454:	e0bffc17 	ldw	r2,-16(fp)
1000e458:	10800a04 	addi	r2,r2,40
1000e45c:	1009883a 	mov	r4,r2
1000e460:	e17ffe17 	ldw	r5,-8(fp)
1000e464:	e1bfff17 	ldw	r6,-4(fp)
1000e468:	000e8580 	call	1000e858 <altera_avalon_jtag_uart_ioctl>
}
1000e46c:	e037883a 	mov	sp,fp
1000e470:	dfc00117 	ldw	ra,4(sp)
1000e474:	df000017 	ldw	fp,0(sp)
1000e478:	dec00204 	addi	sp,sp,8
1000e47c:	f800283a 	ret

1000e480 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e480:	defffa04 	addi	sp,sp,-24
1000e484:	dfc00515 	stw	ra,20(sp)
1000e488:	df000415 	stw	fp,16(sp)
1000e48c:	df000404 	addi	fp,sp,16
1000e490:	e13ffd15 	stw	r4,-12(fp)
1000e494:	e17ffe15 	stw	r5,-8(fp)
1000e498:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e49c:	e0bffd17 	ldw	r2,-12(fp)
1000e4a0:	00c00044 	movi	r3,1
1000e4a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e4a8:	e0bffd17 	ldw	r2,-12(fp)
1000e4ac:	10800017 	ldw	r2,0(r2)
1000e4b0:	10800104 	addi	r2,r2,4
1000e4b4:	1007883a 	mov	r3,r2
1000e4b8:	e0bffd17 	ldw	r2,-12(fp)
1000e4bc:	10800817 	ldw	r2,32(r2)
1000e4c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e4c4:	e0fffe17 	ldw	r3,-8(fp)
1000e4c8:	e0bfff17 	ldw	r2,-4(fp)
1000e4cc:	d8000015 	stw	zero,0(sp)
1000e4d0:	1809883a 	mov	r4,r3
1000e4d4:	100b883a 	mov	r5,r2
1000e4d8:	01840074 	movhi	r6,4097
1000e4dc:	31b95104 	addi	r6,r6,-6844
1000e4e0:	e1fffd17 	ldw	r7,-12(fp)
1000e4e4:	000f08c0 	call	1000f08c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e4e8:	e0bffd17 	ldw	r2,-12(fp)
1000e4ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e4f0:	e0bffd17 	ldw	r2,-12(fp)
1000e4f4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e4f8:	00840074 	movhi	r2,4097
1000e4fc:	1091c104 	addi	r2,r2,18180
1000e500:	10800017 	ldw	r2,0(r2)
1000e504:	1809883a 	mov	r4,r3
1000e508:	100b883a 	mov	r5,r2
1000e50c:	01840074 	movhi	r6,4097
1000e510:	31b9d204 	addi	r6,r6,-6328
1000e514:	e1fffd17 	ldw	r7,-12(fp)
1000e518:	000ed680 	call	1000ed68 <alt_alarm_start>
1000e51c:	1000040e 	bge	r2,zero,1000e530 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e520:	e0fffd17 	ldw	r3,-12(fp)
1000e524:	00a00034 	movhi	r2,32768
1000e528:	10bfffc4 	addi	r2,r2,-1
1000e52c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e530:	e037883a 	mov	sp,fp
1000e534:	dfc00117 	ldw	ra,4(sp)
1000e538:	df000017 	ldw	fp,0(sp)
1000e53c:	dec00204 	addi	sp,sp,8
1000e540:	f800283a 	ret

1000e544 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e544:	defff804 	addi	sp,sp,-32
1000e548:	df000715 	stw	fp,28(sp)
1000e54c:	df000704 	addi	fp,sp,28
1000e550:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e554:	e0bfff17 	ldw	r2,-4(fp)
1000e558:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e55c:	e0bffb17 	ldw	r2,-20(fp)
1000e560:	10800017 	ldw	r2,0(r2)
1000e564:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e568:	e0bffc17 	ldw	r2,-16(fp)
1000e56c:	10800104 	addi	r2,r2,4
1000e570:	10800037 	ldwio	r2,0(r2)
1000e574:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e578:	e0bffd17 	ldw	r2,-12(fp)
1000e57c:	1080c00c 	andi	r2,r2,768
1000e580:	1000011e 	bne	r2,zero,1000e588 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000e584:	00006c06 	br	1000e738 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e588:	e0bffd17 	ldw	r2,-12(fp)
1000e58c:	1080400c 	andi	r2,r2,256
1000e590:	10003426 	beq	r2,zero,1000e664 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e594:	00800074 	movhi	r2,1
1000e598:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e59c:	e0bffb17 	ldw	r2,-20(fp)
1000e5a0:	10800a17 	ldw	r2,40(r2)
1000e5a4:	10800044 	addi	r2,r2,1
1000e5a8:	1081ffcc 	andi	r2,r2,2047
1000e5ac:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e5b0:	e0bffb17 	ldw	r2,-20(fp)
1000e5b4:	10c00b17 	ldw	r3,44(r2)
1000e5b8:	e0bffe17 	ldw	r2,-8(fp)
1000e5bc:	1880011e 	bne	r3,r2,1000e5c4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000e5c0:	00001606 	br	1000e61c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e5c4:	e0bffc17 	ldw	r2,-16(fp)
1000e5c8:	10800037 	ldwio	r2,0(r2)
1000e5cc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e5d0:	e0bff917 	ldw	r2,-28(fp)
1000e5d4:	10a0000c 	andi	r2,r2,32768
1000e5d8:	1000011e 	bne	r2,zero,1000e5e0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000e5dc:	00000f06 	br	1000e61c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e5e0:	e0bffb17 	ldw	r2,-20(fp)
1000e5e4:	10800a17 	ldw	r2,40(r2)
1000e5e8:	e0fff917 	ldw	r3,-28(fp)
1000e5ec:	1809883a 	mov	r4,r3
1000e5f0:	e0fffb17 	ldw	r3,-20(fp)
1000e5f4:	1885883a 	add	r2,r3,r2
1000e5f8:	10800e04 	addi	r2,r2,56
1000e5fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e600:	e0bffb17 	ldw	r2,-20(fp)
1000e604:	10800a17 	ldw	r2,40(r2)
1000e608:	10800044 	addi	r2,r2,1
1000e60c:	10c1ffcc 	andi	r3,r2,2047
1000e610:	e0bffb17 	ldw	r2,-20(fp)
1000e614:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e618:	003fe006 	br	1000e59c <__alt_data_end+0xf800e59c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e61c:	e0bff917 	ldw	r2,-28(fp)
1000e620:	10bfffec 	andhi	r2,r2,65535
1000e624:	10000f26 	beq	r2,zero,1000e664 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e628:	e0bffb17 	ldw	r2,-20(fp)
1000e62c:	10c00817 	ldw	r3,32(r2)
1000e630:	00bfff84 	movi	r2,-2
1000e634:	1886703a 	and	r3,r3,r2
1000e638:	e0bffb17 	ldw	r2,-20(fp)
1000e63c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e640:	e0bffc17 	ldw	r2,-16(fp)
1000e644:	10800104 	addi	r2,r2,4
1000e648:	1007883a 	mov	r3,r2
1000e64c:	e0bffb17 	ldw	r2,-20(fp)
1000e650:	10800817 	ldw	r2,32(r2)
1000e654:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e658:	e0bffc17 	ldw	r2,-16(fp)
1000e65c:	10800104 	addi	r2,r2,4
1000e660:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e664:	e0bffd17 	ldw	r2,-12(fp)
1000e668:	1080800c 	andi	r2,r2,512
1000e66c:	10003126 	beq	r2,zero,1000e734 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e670:	e0bffd17 	ldw	r2,-12(fp)
1000e674:	1004d43a 	srli	r2,r2,16
1000e678:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e67c:	00001406 	br	1000e6d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e680:	e0bffc17 	ldw	r2,-16(fp)
1000e684:	e0fffb17 	ldw	r3,-20(fp)
1000e688:	18c00d17 	ldw	r3,52(r3)
1000e68c:	e13ffb17 	ldw	r4,-20(fp)
1000e690:	20c7883a 	add	r3,r4,r3
1000e694:	18c20e04 	addi	r3,r3,2104
1000e698:	18c00003 	ldbu	r3,0(r3)
1000e69c:	18c03fcc 	andi	r3,r3,255
1000e6a0:	18c0201c 	xori	r3,r3,128
1000e6a4:	18ffe004 	addi	r3,r3,-128
1000e6a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e6ac:	e0bffb17 	ldw	r2,-20(fp)
1000e6b0:	10800d17 	ldw	r2,52(r2)
1000e6b4:	10800044 	addi	r2,r2,1
1000e6b8:	10c1ffcc 	andi	r3,r2,2047
1000e6bc:	e0bffb17 	ldw	r2,-20(fp)
1000e6c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e6c4:	e0bffa17 	ldw	r2,-24(fp)
1000e6c8:	10bfffc4 	addi	r2,r2,-1
1000e6cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e6d0:	e0bffa17 	ldw	r2,-24(fp)
1000e6d4:	10000526 	beq	r2,zero,1000e6ec <altera_avalon_jtag_uart_irq+0x1a8>
1000e6d8:	e0bffb17 	ldw	r2,-20(fp)
1000e6dc:	10c00d17 	ldw	r3,52(r2)
1000e6e0:	e0bffb17 	ldw	r2,-20(fp)
1000e6e4:	10800c17 	ldw	r2,48(r2)
1000e6e8:	18bfe51e 	bne	r3,r2,1000e680 <__alt_data_end+0xf800e680>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e6ec:	e0bffa17 	ldw	r2,-24(fp)
1000e6f0:	10001026 	beq	r2,zero,1000e734 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e6f4:	e0bffb17 	ldw	r2,-20(fp)
1000e6f8:	10c00817 	ldw	r3,32(r2)
1000e6fc:	00bfff44 	movi	r2,-3
1000e700:	1886703a 	and	r3,r3,r2
1000e704:	e0bffb17 	ldw	r2,-20(fp)
1000e708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e70c:	e0bffb17 	ldw	r2,-20(fp)
1000e710:	10800017 	ldw	r2,0(r2)
1000e714:	10800104 	addi	r2,r2,4
1000e718:	1007883a 	mov	r3,r2
1000e71c:	e0bffb17 	ldw	r2,-20(fp)
1000e720:	10800817 	ldw	r2,32(r2)
1000e724:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e728:	e0bffc17 	ldw	r2,-16(fp)
1000e72c:	10800104 	addi	r2,r2,4
1000e730:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e734:	003f8c06 	br	1000e568 <__alt_data_end+0xf800e568>
}
1000e738:	e037883a 	mov	sp,fp
1000e73c:	df000017 	ldw	fp,0(sp)
1000e740:	dec00104 	addi	sp,sp,4
1000e744:	f800283a 	ret

1000e748 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e748:	defff804 	addi	sp,sp,-32
1000e74c:	df000715 	stw	fp,28(sp)
1000e750:	df000704 	addi	fp,sp,28
1000e754:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e758:	e0bffb17 	ldw	r2,-20(fp)
1000e75c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e760:	e0bff917 	ldw	r2,-28(fp)
1000e764:	10800017 	ldw	r2,0(r2)
1000e768:	10800104 	addi	r2,r2,4
1000e76c:	10800037 	ldwio	r2,0(r2)
1000e770:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e774:	e0bffa17 	ldw	r2,-24(fp)
1000e778:	1081000c 	andi	r2,r2,1024
1000e77c:	10000b26 	beq	r2,zero,1000e7ac <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e780:	e0bff917 	ldw	r2,-28(fp)
1000e784:	10800017 	ldw	r2,0(r2)
1000e788:	10800104 	addi	r2,r2,4
1000e78c:	1007883a 	mov	r3,r2
1000e790:	e0bff917 	ldw	r2,-28(fp)
1000e794:	10800817 	ldw	r2,32(r2)
1000e798:	10810014 	ori	r2,r2,1024
1000e79c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000e7a0:	e0bff917 	ldw	r2,-28(fp)
1000e7a4:	10000915 	stw	zero,36(r2)
1000e7a8:	00000a06 	br	1000e7d4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e7ac:	e0bff917 	ldw	r2,-28(fp)
1000e7b0:	10c00917 	ldw	r3,36(r2)
1000e7b4:	00a00034 	movhi	r2,32768
1000e7b8:	10bfff04 	addi	r2,r2,-4
1000e7bc:	10c00536 	bltu	r2,r3,1000e7d4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000e7c0:	e0bff917 	ldw	r2,-28(fp)
1000e7c4:	10800917 	ldw	r2,36(r2)
1000e7c8:	10c00044 	addi	r3,r2,1
1000e7cc:	e0bff917 	ldw	r2,-28(fp)
1000e7d0:	10c00915 	stw	r3,36(r2)
1000e7d4:	00840074 	movhi	r2,4097
1000e7d8:	1091c104 	addi	r2,r2,18180
1000e7dc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e7e0:	e037883a 	mov	sp,fp
1000e7e4:	df000017 	ldw	fp,0(sp)
1000e7e8:	dec00104 	addi	sp,sp,4
1000e7ec:	f800283a 	ret

1000e7f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e7f0:	defffd04 	addi	sp,sp,-12
1000e7f4:	df000215 	stw	fp,8(sp)
1000e7f8:	df000204 	addi	fp,sp,8
1000e7fc:	e13ffe15 	stw	r4,-8(fp)
1000e800:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e804:	00000506 	br	1000e81c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e808:	e0bfff17 	ldw	r2,-4(fp)
1000e80c:	1090000c 	andi	r2,r2,16384
1000e810:	10000226 	beq	r2,zero,1000e81c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e814:	00bffd44 	movi	r2,-11
1000e818:	00000b06 	br	1000e848 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e81c:	e0bffe17 	ldw	r2,-8(fp)
1000e820:	10c00d17 	ldw	r3,52(r2)
1000e824:	e0bffe17 	ldw	r2,-8(fp)
1000e828:	10800c17 	ldw	r2,48(r2)
1000e82c:	18800526 	beq	r3,r2,1000e844 <altera_avalon_jtag_uart_close+0x54>
1000e830:	e0bffe17 	ldw	r2,-8(fp)
1000e834:	10c00917 	ldw	r3,36(r2)
1000e838:	e0bffe17 	ldw	r2,-8(fp)
1000e83c:	10800117 	ldw	r2,4(r2)
1000e840:	18bff136 	bltu	r3,r2,1000e808 <__alt_data_end+0xf800e808>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e844:	0005883a 	mov	r2,zero
}
1000e848:	e037883a 	mov	sp,fp
1000e84c:	df000017 	ldw	fp,0(sp)
1000e850:	dec00104 	addi	sp,sp,4
1000e854:	f800283a 	ret

1000e858 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e858:	defffa04 	addi	sp,sp,-24
1000e85c:	df000515 	stw	fp,20(sp)
1000e860:	df000504 	addi	fp,sp,20
1000e864:	e13ffd15 	stw	r4,-12(fp)
1000e868:	e17ffe15 	stw	r5,-8(fp)
1000e86c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e870:	00bff9c4 	movi	r2,-25
1000e874:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e878:	e0bffe17 	ldw	r2,-8(fp)
1000e87c:	10da8060 	cmpeqi	r3,r2,27137
1000e880:	1800031e 	bne	r3,zero,1000e890 <altera_avalon_jtag_uart_ioctl+0x38>
1000e884:	109a80a0 	cmpeqi	r2,r2,27138
1000e888:	1000191e 	bne	r2,zero,1000e8f0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000e88c:	00002806 	br	1000e930 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e890:	e0bffd17 	ldw	r2,-12(fp)
1000e894:	10c00117 	ldw	r3,4(r2)
1000e898:	00a00034 	movhi	r2,32768
1000e89c:	10bfffc4 	addi	r2,r2,-1
1000e8a0:	18801226 	beq	r3,r2,1000e8ec <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000e8a4:	e0bfff17 	ldw	r2,-4(fp)
1000e8a8:	10800017 	ldw	r2,0(r2)
1000e8ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e8b0:	e0bffc17 	ldw	r2,-16(fp)
1000e8b4:	10800090 	cmplti	r2,r2,2
1000e8b8:	1000061e 	bne	r2,zero,1000e8d4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e8bc:	e0fffc17 	ldw	r3,-16(fp)
1000e8c0:	00a00034 	movhi	r2,32768
1000e8c4:	10bfffc4 	addi	r2,r2,-1
1000e8c8:	18800226 	beq	r3,r2,1000e8d4 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e8cc:	e0bffc17 	ldw	r2,-16(fp)
1000e8d0:	00000206 	br	1000e8dc <altera_avalon_jtag_uart_ioctl+0x84>
1000e8d4:	00a00034 	movhi	r2,32768
1000e8d8:	10bfff84 	addi	r2,r2,-2
1000e8dc:	e0fffd17 	ldw	r3,-12(fp)
1000e8e0:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e8e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e8e8:	00001106 	br	1000e930 <altera_avalon_jtag_uart_ioctl+0xd8>
1000e8ec:	00001006 	br	1000e930 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e8f0:	e0bffd17 	ldw	r2,-12(fp)
1000e8f4:	10c00117 	ldw	r3,4(r2)
1000e8f8:	00a00034 	movhi	r2,32768
1000e8fc:	10bfffc4 	addi	r2,r2,-1
1000e900:	18800a26 	beq	r3,r2,1000e92c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e904:	e0bffd17 	ldw	r2,-12(fp)
1000e908:	10c00917 	ldw	r3,36(r2)
1000e90c:	e0bffd17 	ldw	r2,-12(fp)
1000e910:	10800117 	ldw	r2,4(r2)
1000e914:	1885803a 	cmpltu	r2,r3,r2
1000e918:	10c03fcc 	andi	r3,r2,255
1000e91c:	e0bfff17 	ldw	r2,-4(fp)
1000e920:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e924:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e928:	00000006 	br	1000e92c <altera_avalon_jtag_uart_ioctl+0xd4>
1000e92c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e930:	e0bffb17 	ldw	r2,-20(fp)
}
1000e934:	e037883a 	mov	sp,fp
1000e938:	df000017 	ldw	fp,0(sp)
1000e93c:	dec00104 	addi	sp,sp,4
1000e940:	f800283a 	ret

1000e944 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e944:	defff304 	addi	sp,sp,-52
1000e948:	dfc00c15 	stw	ra,48(sp)
1000e94c:	df000b15 	stw	fp,44(sp)
1000e950:	df000b04 	addi	fp,sp,44
1000e954:	e13ffc15 	stw	r4,-16(fp)
1000e958:	e17ffd15 	stw	r5,-12(fp)
1000e95c:	e1bffe15 	stw	r6,-8(fp)
1000e960:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e964:	e0bffd17 	ldw	r2,-12(fp)
1000e968:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e96c:	00004906 	br	1000ea94 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e970:	e0bffc17 	ldw	r2,-16(fp)
1000e974:	10800a17 	ldw	r2,40(r2)
1000e978:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e97c:	e0bffc17 	ldw	r2,-16(fp)
1000e980:	10800b17 	ldw	r2,44(r2)
1000e984:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e988:	e0fff717 	ldw	r3,-36(fp)
1000e98c:	e0bff817 	ldw	r2,-32(fp)
1000e990:	18800536 	bltu	r3,r2,1000e9a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e994:	e0fff717 	ldw	r3,-36(fp)
1000e998:	e0bff817 	ldw	r2,-32(fp)
1000e99c:	1885c83a 	sub	r2,r3,r2
1000e9a0:	e0bff615 	stw	r2,-40(fp)
1000e9a4:	00000406 	br	1000e9b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e9a8:	00c20004 	movi	r3,2048
1000e9ac:	e0bff817 	ldw	r2,-32(fp)
1000e9b0:	1885c83a 	sub	r2,r3,r2
1000e9b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e9b8:	e0bff617 	ldw	r2,-40(fp)
1000e9bc:	1000011e 	bne	r2,zero,1000e9c4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000e9c0:	00001d06 	br	1000ea38 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000e9c4:	e0fffe17 	ldw	r3,-8(fp)
1000e9c8:	e0bff617 	ldw	r2,-40(fp)
1000e9cc:	1880022e 	bgeu	r3,r2,1000e9d8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000e9d0:	e0bffe17 	ldw	r2,-8(fp)
1000e9d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e9d8:	e0bff817 	ldw	r2,-32(fp)
1000e9dc:	10800e04 	addi	r2,r2,56
1000e9e0:	e0fffc17 	ldw	r3,-16(fp)
1000e9e4:	1885883a 	add	r2,r3,r2
1000e9e8:	e13ff517 	ldw	r4,-44(fp)
1000e9ec:	100b883a 	mov	r5,r2
1000e9f0:	e1bff617 	ldw	r6,-40(fp)
1000e9f4:	00010640 	call	10001064 <memcpy>
      ptr   += n;
1000e9f8:	e0fff517 	ldw	r3,-44(fp)
1000e9fc:	e0bff617 	ldw	r2,-40(fp)
1000ea00:	1885883a 	add	r2,r3,r2
1000ea04:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000ea08:	e0fffe17 	ldw	r3,-8(fp)
1000ea0c:	e0bff617 	ldw	r2,-40(fp)
1000ea10:	1885c83a 	sub	r2,r3,r2
1000ea14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ea18:	e0fff817 	ldw	r3,-32(fp)
1000ea1c:	e0bff617 	ldw	r2,-40(fp)
1000ea20:	1885883a 	add	r2,r3,r2
1000ea24:	10c1ffcc 	andi	r3,r2,2047
1000ea28:	e0bffc17 	ldw	r2,-16(fp)
1000ea2c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000ea30:	e0bffe17 	ldw	r2,-8(fp)
1000ea34:	00bfce16 	blt	zero,r2,1000e970 <__alt_data_end+0xf800e970>

    /* If we read any data then return it */
    if (ptr != buffer)
1000ea38:	e0fff517 	ldw	r3,-44(fp)
1000ea3c:	e0bffd17 	ldw	r2,-12(fp)
1000ea40:	18800126 	beq	r3,r2,1000ea48 <altera_avalon_jtag_uart_read+0x104>
      break;
1000ea44:	00001506 	br	1000ea9c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000ea48:	e0bfff17 	ldw	r2,-4(fp)
1000ea4c:	1090000c 	andi	r2,r2,16384
1000ea50:	10000126 	beq	r2,zero,1000ea58 <altera_avalon_jtag_uart_read+0x114>
      break;
1000ea54:	00001106 	br	1000ea9c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000ea58:	0001883a 	nop
1000ea5c:	e0bffc17 	ldw	r2,-16(fp)
1000ea60:	10c00a17 	ldw	r3,40(r2)
1000ea64:	e0bff717 	ldw	r2,-36(fp)
1000ea68:	1880051e 	bne	r3,r2,1000ea80 <altera_avalon_jtag_uart_read+0x13c>
1000ea6c:	e0bffc17 	ldw	r2,-16(fp)
1000ea70:	10c00917 	ldw	r3,36(r2)
1000ea74:	e0bffc17 	ldw	r2,-16(fp)
1000ea78:	10800117 	ldw	r2,4(r2)
1000ea7c:	18bff736 	bltu	r3,r2,1000ea5c <__alt_data_end+0xf800ea5c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000ea80:	e0bffc17 	ldw	r2,-16(fp)
1000ea84:	10c00a17 	ldw	r3,40(r2)
1000ea88:	e0bff717 	ldw	r2,-36(fp)
1000ea8c:	1880011e 	bne	r3,r2,1000ea94 <altera_avalon_jtag_uart_read+0x150>
      break;
1000ea90:	00000206 	br	1000ea9c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ea94:	e0bffe17 	ldw	r2,-8(fp)
1000ea98:	00bfb516 	blt	zero,r2,1000e970 <__alt_data_end+0xf800e970>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000ea9c:	e0fff517 	ldw	r3,-44(fp)
1000eaa0:	e0bffd17 	ldw	r2,-12(fp)
1000eaa4:	18801826 	beq	r3,r2,1000eb08 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000eaa8:	0005303a 	rdctl	r2,status
1000eaac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000eab0:	e0fffa17 	ldw	r3,-24(fp)
1000eab4:	00bfff84 	movi	r2,-2
1000eab8:	1884703a 	and	r2,r3,r2
1000eabc:	1001703a 	wrctl	status,r2
  
  return context;
1000eac0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000eac4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000eac8:	e0bffc17 	ldw	r2,-16(fp)
1000eacc:	10800817 	ldw	r2,32(r2)
1000ead0:	10c00054 	ori	r3,r2,1
1000ead4:	e0bffc17 	ldw	r2,-16(fp)
1000ead8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000eadc:	e0bffc17 	ldw	r2,-16(fp)
1000eae0:	10800017 	ldw	r2,0(r2)
1000eae4:	10800104 	addi	r2,r2,4
1000eae8:	1007883a 	mov	r3,r2
1000eaec:	e0bffc17 	ldw	r2,-16(fp)
1000eaf0:	10800817 	ldw	r2,32(r2)
1000eaf4:	18800035 	stwio	r2,0(r3)
1000eaf8:	e0bff917 	ldw	r2,-28(fp)
1000eafc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000eb00:	e0bffb17 	ldw	r2,-20(fp)
1000eb04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000eb08:	e0fff517 	ldw	r3,-44(fp)
1000eb0c:	e0bffd17 	ldw	r2,-12(fp)
1000eb10:	18800426 	beq	r3,r2,1000eb24 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000eb14:	e0fff517 	ldw	r3,-44(fp)
1000eb18:	e0bffd17 	ldw	r2,-12(fp)
1000eb1c:	1885c83a 	sub	r2,r3,r2
1000eb20:	00000606 	br	1000eb3c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000eb24:	e0bfff17 	ldw	r2,-4(fp)
1000eb28:	1090000c 	andi	r2,r2,16384
1000eb2c:	10000226 	beq	r2,zero,1000eb38 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000eb30:	00bffd44 	movi	r2,-11
1000eb34:	00000106 	br	1000eb3c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000eb38:	00bffec4 	movi	r2,-5
}
1000eb3c:	e037883a 	mov	sp,fp
1000eb40:	dfc00117 	ldw	ra,4(sp)
1000eb44:	df000017 	ldw	fp,0(sp)
1000eb48:	dec00204 	addi	sp,sp,8
1000eb4c:	f800283a 	ret

1000eb50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000eb50:	defff304 	addi	sp,sp,-52
1000eb54:	dfc00c15 	stw	ra,48(sp)
1000eb58:	df000b15 	stw	fp,44(sp)
1000eb5c:	df000b04 	addi	fp,sp,44
1000eb60:	e13ffc15 	stw	r4,-16(fp)
1000eb64:	e17ffd15 	stw	r5,-12(fp)
1000eb68:	e1bffe15 	stw	r6,-8(fp)
1000eb6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000eb70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000eb74:	e0bffd17 	ldw	r2,-12(fp)
1000eb78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000eb7c:	00003806 	br	1000ec60 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000eb80:	e0bffc17 	ldw	r2,-16(fp)
1000eb84:	10800c17 	ldw	r2,48(r2)
1000eb88:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000eb8c:	e0bffc17 	ldw	r2,-16(fp)
1000eb90:	10800d17 	ldw	r2,52(r2)
1000eb94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000eb98:	e0fff817 	ldw	r3,-32(fp)
1000eb9c:	e0bff517 	ldw	r2,-44(fp)
1000eba0:	1880062e 	bgeu	r3,r2,1000ebbc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000eba4:	e0fff517 	ldw	r3,-44(fp)
1000eba8:	e0bff817 	ldw	r2,-32(fp)
1000ebac:	1885c83a 	sub	r2,r3,r2
1000ebb0:	10bfffc4 	addi	r2,r2,-1
1000ebb4:	e0bff615 	stw	r2,-40(fp)
1000ebb8:	00000b06 	br	1000ebe8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000ebbc:	e0bff517 	ldw	r2,-44(fp)
1000ebc0:	10000526 	beq	r2,zero,1000ebd8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ebc4:	00c20004 	movi	r3,2048
1000ebc8:	e0bff817 	ldw	r2,-32(fp)
1000ebcc:	1885c83a 	sub	r2,r3,r2
1000ebd0:	e0bff615 	stw	r2,-40(fp)
1000ebd4:	00000406 	br	1000ebe8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ebd8:	00c1ffc4 	movi	r3,2047
1000ebdc:	e0bff817 	ldw	r2,-32(fp)
1000ebe0:	1885c83a 	sub	r2,r3,r2
1000ebe4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ebe8:	e0bff617 	ldw	r2,-40(fp)
1000ebec:	1000011e 	bne	r2,zero,1000ebf4 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000ebf0:	00001d06 	br	1000ec68 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000ebf4:	e0fffe17 	ldw	r3,-8(fp)
1000ebf8:	e0bff617 	ldw	r2,-40(fp)
1000ebfc:	1880022e 	bgeu	r3,r2,1000ec08 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000ec00:	e0bffe17 	ldw	r2,-8(fp)
1000ec04:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ec08:	e0bff817 	ldw	r2,-32(fp)
1000ec0c:	10820e04 	addi	r2,r2,2104
1000ec10:	e0fffc17 	ldw	r3,-16(fp)
1000ec14:	1885883a 	add	r2,r3,r2
1000ec18:	1009883a 	mov	r4,r2
1000ec1c:	e17ffd17 	ldw	r5,-12(fp)
1000ec20:	e1bff617 	ldw	r6,-40(fp)
1000ec24:	00010640 	call	10001064 <memcpy>
      ptr   += n;
1000ec28:	e0fffd17 	ldw	r3,-12(fp)
1000ec2c:	e0bff617 	ldw	r2,-40(fp)
1000ec30:	1885883a 	add	r2,r3,r2
1000ec34:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ec38:	e0fffe17 	ldw	r3,-8(fp)
1000ec3c:	e0bff617 	ldw	r2,-40(fp)
1000ec40:	1885c83a 	sub	r2,r3,r2
1000ec44:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ec48:	e0fff817 	ldw	r3,-32(fp)
1000ec4c:	e0bff617 	ldw	r2,-40(fp)
1000ec50:	1885883a 	add	r2,r3,r2
1000ec54:	10c1ffcc 	andi	r3,r2,2047
1000ec58:	e0bffc17 	ldw	r2,-16(fp)
1000ec5c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ec60:	e0bffe17 	ldw	r2,-8(fp)
1000ec64:	00bfc616 	blt	zero,r2,1000eb80 <__alt_data_end+0xf800eb80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ec68:	0005303a 	rdctl	r2,status
1000ec6c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ec70:	e0fffa17 	ldw	r3,-24(fp)
1000ec74:	00bfff84 	movi	r2,-2
1000ec78:	1884703a 	and	r2,r3,r2
1000ec7c:	1001703a 	wrctl	status,r2
  
  return context;
1000ec80:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ec84:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ec88:	e0bffc17 	ldw	r2,-16(fp)
1000ec8c:	10800817 	ldw	r2,32(r2)
1000ec90:	10c00094 	ori	r3,r2,2
1000ec94:	e0bffc17 	ldw	r2,-16(fp)
1000ec98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ec9c:	e0bffc17 	ldw	r2,-16(fp)
1000eca0:	10800017 	ldw	r2,0(r2)
1000eca4:	10800104 	addi	r2,r2,4
1000eca8:	1007883a 	mov	r3,r2
1000ecac:	e0bffc17 	ldw	r2,-16(fp)
1000ecb0:	10800817 	ldw	r2,32(r2)
1000ecb4:	18800035 	stwio	r2,0(r3)
1000ecb8:	e0bff917 	ldw	r2,-28(fp)
1000ecbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ecc0:	e0bffb17 	ldw	r2,-20(fp)
1000ecc4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ecc8:	e0bffe17 	ldw	r2,-8(fp)
1000eccc:	0080120e 	bge	zero,r2,1000ed18 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000ecd0:	e0bfff17 	ldw	r2,-4(fp)
1000ecd4:	1090000c 	andi	r2,r2,16384
1000ecd8:	10000126 	beq	r2,zero,1000ece0 <altera_avalon_jtag_uart_write+0x190>
        break;
1000ecdc:	00001006 	br	1000ed20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ece0:	0001883a 	nop
1000ece4:	e0bffc17 	ldw	r2,-16(fp)
1000ece8:	10c00d17 	ldw	r3,52(r2)
1000ecec:	e0bff517 	ldw	r2,-44(fp)
1000ecf0:	1880051e 	bne	r3,r2,1000ed08 <altera_avalon_jtag_uart_write+0x1b8>
1000ecf4:	e0bffc17 	ldw	r2,-16(fp)
1000ecf8:	10c00917 	ldw	r3,36(r2)
1000ecfc:	e0bffc17 	ldw	r2,-16(fp)
1000ed00:	10800117 	ldw	r2,4(r2)
1000ed04:	18bff736 	bltu	r3,r2,1000ece4 <__alt_data_end+0xf800ece4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ed08:	e0bffc17 	ldw	r2,-16(fp)
1000ed0c:	10800917 	ldw	r2,36(r2)
1000ed10:	10000126 	beq	r2,zero,1000ed18 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000ed14:	00000206 	br	1000ed20 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000ed18:	e0bffe17 	ldw	r2,-8(fp)
1000ed1c:	00bf9716 	blt	zero,r2,1000eb7c <__alt_data_end+0xf800eb7c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ed20:	e0fffd17 	ldw	r3,-12(fp)
1000ed24:	e0bff717 	ldw	r2,-36(fp)
1000ed28:	18800426 	beq	r3,r2,1000ed3c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000ed2c:	e0fffd17 	ldw	r3,-12(fp)
1000ed30:	e0bff717 	ldw	r2,-36(fp)
1000ed34:	1885c83a 	sub	r2,r3,r2
1000ed38:	00000606 	br	1000ed54 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1000ed3c:	e0bfff17 	ldw	r2,-4(fp)
1000ed40:	1090000c 	andi	r2,r2,16384
1000ed44:	10000226 	beq	r2,zero,1000ed50 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1000ed48:	00bffd44 	movi	r2,-11
1000ed4c:	00000106 	br	1000ed54 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ed50:	00bffec4 	movi	r2,-5
}
1000ed54:	e037883a 	mov	sp,fp
1000ed58:	dfc00117 	ldw	ra,4(sp)
1000ed5c:	df000017 	ldw	fp,0(sp)
1000ed60:	dec00204 	addi	sp,sp,8
1000ed64:	f800283a 	ret

1000ed68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000ed68:	defff504 	addi	sp,sp,-44
1000ed6c:	df000a15 	stw	fp,40(sp)
1000ed70:	df000a04 	addi	fp,sp,40
1000ed74:	e13ffc15 	stw	r4,-16(fp)
1000ed78:	e17ffd15 	stw	r5,-12(fp)
1000ed7c:	e1bffe15 	stw	r6,-8(fp)
1000ed80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ed84:	e03ff615 	stw	zero,-40(fp)
1000ed88:	00840074 	movhi	r2,4097
1000ed8c:	1091c104 	addi	r2,r2,18180
1000ed90:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1000ed94:	10003f26 	beq	r2,zero,1000ee94 <alt_alarm_start+0x12c>
  {
    if (alarm)
1000ed98:	e0bffc17 	ldw	r2,-16(fp)
1000ed9c:	10003b26 	beq	r2,zero,1000ee8c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1000eda0:	e0bffc17 	ldw	r2,-16(fp)
1000eda4:	e0fffe17 	ldw	r3,-8(fp)
1000eda8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000edac:	e0bffc17 	ldw	r2,-16(fp)
1000edb0:	e0ffff17 	ldw	r3,-4(fp)
1000edb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000edb8:	0005303a 	rdctl	r2,status
1000edbc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000edc0:	e0fff817 	ldw	r3,-32(fp)
1000edc4:	00bfff84 	movi	r2,-2
1000edc8:	1884703a 	and	r2,r3,r2
1000edcc:	1001703a 	wrctl	status,r2
  
  return context;
1000edd0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1000edd4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000edd8:	00840074 	movhi	r2,4097
1000eddc:	1091c204 	addi	r2,r2,18184
1000ede0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1000ede4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ede8:	e0fffd17 	ldw	r3,-12(fp)
1000edec:	e0bff617 	ldw	r2,-40(fp)
1000edf0:	1885883a 	add	r2,r3,r2
1000edf4:	10c00044 	addi	r3,r2,1
1000edf8:	e0bffc17 	ldw	r2,-16(fp)
1000edfc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ee00:	e0bffc17 	ldw	r2,-16(fp)
1000ee04:	10c00217 	ldw	r3,8(r2)
1000ee08:	e0bff617 	ldw	r2,-40(fp)
1000ee0c:	1880042e 	bgeu	r3,r2,1000ee20 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1000ee10:	e0bffc17 	ldw	r2,-16(fp)
1000ee14:	00c00044 	movi	r3,1
1000ee18:	10c00405 	stb	r3,16(r2)
1000ee1c:	00000206 	br	1000ee28 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1000ee20:	e0bffc17 	ldw	r2,-16(fp)
1000ee24:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ee28:	e0fffc17 	ldw	r3,-16(fp)
1000ee2c:	00840074 	movhi	r2,4097
1000ee30:	10896a04 	addi	r2,r2,9640
1000ee34:	e0bff915 	stw	r2,-28(fp)
1000ee38:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ee3c:	e0bffa17 	ldw	r2,-24(fp)
1000ee40:	e0fff917 	ldw	r3,-28(fp)
1000ee44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ee48:	e0bff917 	ldw	r2,-28(fp)
1000ee4c:	10c00017 	ldw	r3,0(r2)
1000ee50:	e0bffa17 	ldw	r2,-24(fp)
1000ee54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ee58:	e0bff917 	ldw	r2,-28(fp)
1000ee5c:	10800017 	ldw	r2,0(r2)
1000ee60:	e0fffa17 	ldw	r3,-24(fp)
1000ee64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ee68:	e0bff917 	ldw	r2,-28(fp)
1000ee6c:	e0fffa17 	ldw	r3,-24(fp)
1000ee70:	10c00015 	stw	r3,0(r2)
1000ee74:	e0bff717 	ldw	r2,-36(fp)
1000ee78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ee7c:	e0bffb17 	ldw	r2,-20(fp)
1000ee80:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000ee84:	0005883a 	mov	r2,zero
1000ee88:	00000306 	br	1000ee98 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1000ee8c:	00bffa84 	movi	r2,-22
1000ee90:	00000106 	br	1000ee98 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1000ee94:	00bfde84 	movi	r2,-134
  }
}
1000ee98:	e037883a 	mov	sp,fp
1000ee9c:	df000017 	ldw	fp,0(sp)
1000eea0:	dec00104 	addi	sp,sp,4
1000eea4:	f800283a 	ret

1000eea8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000eea8:	deffff04 	addi	sp,sp,-4
1000eeac:	df000015 	stw	fp,0(sp)
1000eeb0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000eeb4:	e037883a 	mov	sp,fp
1000eeb8:	df000017 	ldw	fp,0(sp)
1000eebc:	dec00104 	addi	sp,sp,4
1000eec0:	f800283a 	ret

1000eec4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eec4:	defffe04 	addi	sp,sp,-8
1000eec8:	dfc00115 	stw	ra,4(sp)
1000eecc:	df000015 	stw	fp,0(sp)
1000eed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eed4:	00840074 	movhi	r2,4097
1000eed8:	10896704 	addi	r2,r2,9628
1000eedc:	10800017 	ldw	r2,0(r2)
1000eee0:	10000526 	beq	r2,zero,1000eef8 <alt_get_errno+0x34>
1000eee4:	00840074 	movhi	r2,4097
1000eee8:	10896704 	addi	r2,r2,9628
1000eeec:	10800017 	ldw	r2,0(r2)
1000eef0:	103ee83a 	callr	r2
1000eef4:	00000206 	br	1000ef00 <alt_get_errno+0x3c>
1000eef8:	00840074 	movhi	r2,4097
1000eefc:	1091bc04 	addi	r2,r2,18160
}
1000ef00:	e037883a 	mov	sp,fp
1000ef04:	dfc00117 	ldw	ra,4(sp)
1000ef08:	df000017 	ldw	fp,0(sp)
1000ef0c:	dec00204 	addi	sp,sp,8
1000ef10:	f800283a 	ret

1000ef14 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000ef14:	defffa04 	addi	sp,sp,-24
1000ef18:	dfc00515 	stw	ra,20(sp)
1000ef1c:	df000415 	stw	fp,16(sp)
1000ef20:	df000404 	addi	fp,sp,16
1000ef24:	e13ffe15 	stw	r4,-8(fp)
1000ef28:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000ef2c:	e0bffe17 	ldw	r2,-8(fp)
1000ef30:	10000326 	beq	r2,zero,1000ef40 <alt_dev_llist_insert+0x2c>
1000ef34:	e0bffe17 	ldw	r2,-8(fp)
1000ef38:	10800217 	ldw	r2,8(r2)
1000ef3c:	1000061e 	bne	r2,zero,1000ef58 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000ef40:	000eec40 	call	1000eec4 <alt_get_errno>
1000ef44:	1007883a 	mov	r3,r2
1000ef48:	00800584 	movi	r2,22
1000ef4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000ef50:	00bffa84 	movi	r2,-22
1000ef54:	00001306 	br	1000efa4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000ef58:	e0bffe17 	ldw	r2,-8(fp)
1000ef5c:	e0ffff17 	ldw	r3,-4(fp)
1000ef60:	e0fffc15 	stw	r3,-16(fp)
1000ef64:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ef68:	e0bffd17 	ldw	r2,-12(fp)
1000ef6c:	e0fffc17 	ldw	r3,-16(fp)
1000ef70:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ef74:	e0bffc17 	ldw	r2,-16(fp)
1000ef78:	10c00017 	ldw	r3,0(r2)
1000ef7c:	e0bffd17 	ldw	r2,-12(fp)
1000ef80:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000ef84:	e0bffc17 	ldw	r2,-16(fp)
1000ef88:	10800017 	ldw	r2,0(r2)
1000ef8c:	e0fffd17 	ldw	r3,-12(fp)
1000ef90:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ef94:	e0bffc17 	ldw	r2,-16(fp)
1000ef98:	e0fffd17 	ldw	r3,-12(fp)
1000ef9c:	10c00015 	stw	r3,0(r2)

  return 0;  
1000efa0:	0005883a 	mov	r2,zero
}
1000efa4:	e037883a 	mov	sp,fp
1000efa8:	dfc00117 	ldw	ra,4(sp)
1000efac:	df000017 	ldw	fp,0(sp)
1000efb0:	dec00204 	addi	sp,sp,8
1000efb4:	f800283a 	ret

1000efb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000efb8:	defffd04 	addi	sp,sp,-12
1000efbc:	dfc00215 	stw	ra,8(sp)
1000efc0:	df000115 	stw	fp,4(sp)
1000efc4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000efc8:	00840074 	movhi	r2,4097
1000efcc:	10bfcb04 	addi	r2,r2,-212
1000efd0:	e0bfff15 	stw	r2,-4(fp)
1000efd4:	00000606 	br	1000eff0 <_do_ctors+0x38>
        (*ctor) (); 
1000efd8:	e0bfff17 	ldw	r2,-4(fp)
1000efdc:	10800017 	ldw	r2,0(r2)
1000efe0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000efe4:	e0bfff17 	ldw	r2,-4(fp)
1000efe8:	10bfff04 	addi	r2,r2,-4
1000efec:	e0bfff15 	stw	r2,-4(fp)
1000eff0:	e0ffff17 	ldw	r3,-4(fp)
1000eff4:	00840074 	movhi	r2,4097
1000eff8:	10bfcc04 	addi	r2,r2,-208
1000effc:	18bff62e 	bgeu	r3,r2,1000efd8 <__alt_data_end+0xf800efd8>
        (*ctor) (); 
}
1000f000:	e037883a 	mov	sp,fp
1000f004:	dfc00117 	ldw	ra,4(sp)
1000f008:	df000017 	ldw	fp,0(sp)
1000f00c:	dec00204 	addi	sp,sp,8
1000f010:	f800283a 	ret

1000f014 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f014:	defffd04 	addi	sp,sp,-12
1000f018:	dfc00215 	stw	ra,8(sp)
1000f01c:	df000115 	stw	fp,4(sp)
1000f020:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f024:	00840074 	movhi	r2,4097
1000f028:	10bfcb04 	addi	r2,r2,-212
1000f02c:	e0bfff15 	stw	r2,-4(fp)
1000f030:	00000606 	br	1000f04c <_do_dtors+0x38>
        (*dtor) (); 
1000f034:	e0bfff17 	ldw	r2,-4(fp)
1000f038:	10800017 	ldw	r2,0(r2)
1000f03c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f040:	e0bfff17 	ldw	r2,-4(fp)
1000f044:	10bfff04 	addi	r2,r2,-4
1000f048:	e0bfff15 	stw	r2,-4(fp)
1000f04c:	e0ffff17 	ldw	r3,-4(fp)
1000f050:	00840074 	movhi	r2,4097
1000f054:	10bfcc04 	addi	r2,r2,-208
1000f058:	18bff62e 	bgeu	r3,r2,1000f034 <__alt_data_end+0xf800f034>
        (*dtor) (); 
}
1000f05c:	e037883a 	mov	sp,fp
1000f060:	dfc00117 	ldw	ra,4(sp)
1000f064:	df000017 	ldw	fp,0(sp)
1000f068:	dec00204 	addi	sp,sp,8
1000f06c:	f800283a 	ret

1000f070 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f070:	deffff04 	addi	sp,sp,-4
1000f074:	df000015 	stw	fp,0(sp)
1000f078:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f07c:	e037883a 	mov	sp,fp
1000f080:	df000017 	ldw	fp,0(sp)
1000f084:	dec00104 	addi	sp,sp,4
1000f088:	f800283a 	ret

1000f08c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f08c:	defff904 	addi	sp,sp,-28
1000f090:	dfc00615 	stw	ra,24(sp)
1000f094:	df000515 	stw	fp,20(sp)
1000f098:	df000504 	addi	fp,sp,20
1000f09c:	e13ffc15 	stw	r4,-16(fp)
1000f0a0:	e17ffd15 	stw	r5,-12(fp)
1000f0a4:	e1bffe15 	stw	r6,-8(fp)
1000f0a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f0ac:	e0800217 	ldw	r2,8(fp)
1000f0b0:	d8800015 	stw	r2,0(sp)
1000f0b4:	e13ffc17 	ldw	r4,-16(fp)
1000f0b8:	e17ffd17 	ldw	r5,-12(fp)
1000f0bc:	e1bffe17 	ldw	r6,-8(fp)
1000f0c0:	e1ffff17 	ldw	r7,-4(fp)
1000f0c4:	000f26c0 	call	1000f26c <alt_iic_isr_register>
}  
1000f0c8:	e037883a 	mov	sp,fp
1000f0cc:	dfc00117 	ldw	ra,4(sp)
1000f0d0:	df000017 	ldw	fp,0(sp)
1000f0d4:	dec00204 	addi	sp,sp,8
1000f0d8:	f800283a 	ret

1000f0dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f0dc:	defff904 	addi	sp,sp,-28
1000f0e0:	df000615 	stw	fp,24(sp)
1000f0e4:	df000604 	addi	fp,sp,24
1000f0e8:	e13ffe15 	stw	r4,-8(fp)
1000f0ec:	e17fff15 	stw	r5,-4(fp)
1000f0f0:	e0bfff17 	ldw	r2,-4(fp)
1000f0f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f0f8:	0005303a 	rdctl	r2,status
1000f0fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f100:	e0fffb17 	ldw	r3,-20(fp)
1000f104:	00bfff84 	movi	r2,-2
1000f108:	1884703a 	and	r2,r3,r2
1000f10c:	1001703a 	wrctl	status,r2
  
  return context;
1000f110:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f114:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f118:	e0bffa17 	ldw	r2,-24(fp)
1000f11c:	00c00044 	movi	r3,1
1000f120:	1884983a 	sll	r2,r3,r2
1000f124:	1007883a 	mov	r3,r2
1000f128:	00840074 	movhi	r2,4097
1000f12c:	1091c004 	addi	r2,r2,18176
1000f130:	10800017 	ldw	r2,0(r2)
1000f134:	1886b03a 	or	r3,r3,r2
1000f138:	00840074 	movhi	r2,4097
1000f13c:	1091c004 	addi	r2,r2,18176
1000f140:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f144:	00840074 	movhi	r2,4097
1000f148:	1091c004 	addi	r2,r2,18176
1000f14c:	10800017 	ldw	r2,0(r2)
1000f150:	100170fa 	wrctl	ienable,r2
1000f154:	e0bffc17 	ldw	r2,-16(fp)
1000f158:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f15c:	e0bffd17 	ldw	r2,-12(fp)
1000f160:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f164:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000f168:	0001883a 	nop
}
1000f16c:	e037883a 	mov	sp,fp
1000f170:	df000017 	ldw	fp,0(sp)
1000f174:	dec00104 	addi	sp,sp,4
1000f178:	f800283a 	ret

1000f17c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f17c:	defff904 	addi	sp,sp,-28
1000f180:	df000615 	stw	fp,24(sp)
1000f184:	df000604 	addi	fp,sp,24
1000f188:	e13ffe15 	stw	r4,-8(fp)
1000f18c:	e17fff15 	stw	r5,-4(fp)
1000f190:	e0bfff17 	ldw	r2,-4(fp)
1000f194:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f198:	0005303a 	rdctl	r2,status
1000f19c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f1a0:	e0fffb17 	ldw	r3,-20(fp)
1000f1a4:	00bfff84 	movi	r2,-2
1000f1a8:	1884703a 	and	r2,r3,r2
1000f1ac:	1001703a 	wrctl	status,r2
  
  return context;
1000f1b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f1b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f1b8:	e0bffa17 	ldw	r2,-24(fp)
1000f1bc:	00c00044 	movi	r3,1
1000f1c0:	1884983a 	sll	r2,r3,r2
1000f1c4:	0084303a 	nor	r2,zero,r2
1000f1c8:	1007883a 	mov	r3,r2
1000f1cc:	00840074 	movhi	r2,4097
1000f1d0:	1091c004 	addi	r2,r2,18176
1000f1d4:	10800017 	ldw	r2,0(r2)
1000f1d8:	1886703a 	and	r3,r3,r2
1000f1dc:	00840074 	movhi	r2,4097
1000f1e0:	1091c004 	addi	r2,r2,18176
1000f1e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f1e8:	00840074 	movhi	r2,4097
1000f1ec:	1091c004 	addi	r2,r2,18176
1000f1f0:	10800017 	ldw	r2,0(r2)
1000f1f4:	100170fa 	wrctl	ienable,r2
1000f1f8:	e0bffc17 	ldw	r2,-16(fp)
1000f1fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f200:	e0bffd17 	ldw	r2,-12(fp)
1000f204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f208:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000f20c:	0001883a 	nop
}
1000f210:	e037883a 	mov	sp,fp
1000f214:	df000017 	ldw	fp,0(sp)
1000f218:	dec00104 	addi	sp,sp,4
1000f21c:	f800283a 	ret

1000f220 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f220:	defffc04 	addi	sp,sp,-16
1000f224:	df000315 	stw	fp,12(sp)
1000f228:	df000304 	addi	fp,sp,12
1000f22c:	e13ffe15 	stw	r4,-8(fp)
1000f230:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f234:	000530fa 	rdctl	r2,ienable
1000f238:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f23c:	e0bfff17 	ldw	r2,-4(fp)
1000f240:	00c00044 	movi	r3,1
1000f244:	1884983a 	sll	r2,r3,r2
1000f248:	1007883a 	mov	r3,r2
1000f24c:	e0bffd17 	ldw	r2,-12(fp)
1000f250:	1884703a 	and	r2,r3,r2
1000f254:	1004c03a 	cmpne	r2,r2,zero
1000f258:	10803fcc 	andi	r2,r2,255
}
1000f25c:	e037883a 	mov	sp,fp
1000f260:	df000017 	ldw	fp,0(sp)
1000f264:	dec00104 	addi	sp,sp,4
1000f268:	f800283a 	ret

1000f26c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f26c:	defff504 	addi	sp,sp,-44
1000f270:	dfc00a15 	stw	ra,40(sp)
1000f274:	df000915 	stw	fp,36(sp)
1000f278:	df000904 	addi	fp,sp,36
1000f27c:	e13ffc15 	stw	r4,-16(fp)
1000f280:	e17ffd15 	stw	r5,-12(fp)
1000f284:	e1bffe15 	stw	r6,-8(fp)
1000f288:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f28c:	00bffa84 	movi	r2,-22
1000f290:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f294:	e0bffd17 	ldw	r2,-12(fp)
1000f298:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f29c:	e0bff817 	ldw	r2,-32(fp)
1000f2a0:	10800808 	cmpgei	r2,r2,32
1000f2a4:	1000271e 	bne	r2,zero,1000f344 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f2a8:	0005303a 	rdctl	r2,status
1000f2ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f2b0:	e0fffa17 	ldw	r3,-24(fp)
1000f2b4:	00bfff84 	movi	r2,-2
1000f2b8:	1884703a 	and	r2,r3,r2
1000f2bc:	1001703a 	wrctl	status,r2
  
  return context;
1000f2c0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f2c4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
1000f2c8:	00840074 	movhi	r2,4097
1000f2cc:	1091cd04 	addi	r2,r2,18228
1000f2d0:	e0fff817 	ldw	r3,-32(fp)
1000f2d4:	180690fa 	slli	r3,r3,3
1000f2d8:	10c5883a 	add	r2,r2,r3
1000f2dc:	e0fffe17 	ldw	r3,-8(fp)
1000f2e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f2e4:	00840074 	movhi	r2,4097
1000f2e8:	1091cd04 	addi	r2,r2,18228
1000f2ec:	e0fff817 	ldw	r3,-32(fp)
1000f2f0:	180690fa 	slli	r3,r3,3
1000f2f4:	10c5883a 	add	r2,r2,r3
1000f2f8:	10800104 	addi	r2,r2,4
1000f2fc:	e0ffff17 	ldw	r3,-4(fp)
1000f300:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f304:	e0bffe17 	ldw	r2,-8(fp)
1000f308:	10000526 	beq	r2,zero,1000f320 <alt_iic_isr_register+0xb4>
1000f30c:	e0bff817 	ldw	r2,-32(fp)
1000f310:	e13ffc17 	ldw	r4,-16(fp)
1000f314:	100b883a 	mov	r5,r2
1000f318:	000f0dc0 	call	1000f0dc <alt_ic_irq_enable>
1000f31c:	00000406 	br	1000f330 <alt_iic_isr_register+0xc4>
1000f320:	e0bff817 	ldw	r2,-32(fp)
1000f324:	e13ffc17 	ldw	r4,-16(fp)
1000f328:	100b883a 	mov	r5,r2
1000f32c:	000f17c0 	call	1000f17c <alt_ic_irq_disable>
1000f330:	e0bff715 	stw	r2,-36(fp)
1000f334:	e0bff917 	ldw	r2,-28(fp)
1000f338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f33c:	e0bffb17 	ldw	r2,-20(fp)
1000f340:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f344:	e0bff717 	ldw	r2,-36(fp)
}
1000f348:	e037883a 	mov	sp,fp
1000f34c:	dfc00117 	ldw	ra,4(sp)
1000f350:	df000017 	ldw	fp,0(sp)
1000f354:	dec00204 	addi	sp,sp,8
1000f358:	f800283a 	ret

1000f35c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f35c:	defff804 	addi	sp,sp,-32
1000f360:	dfc00715 	stw	ra,28(sp)
1000f364:	df000615 	stw	fp,24(sp)
1000f368:	dc000515 	stw	r16,20(sp)
1000f36c:	df000604 	addi	fp,sp,24
1000f370:	e13ffb15 	stw	r4,-20(fp)
1000f374:	e17ffc15 	stw	r5,-16(fp)
1000f378:	e1bffd15 	stw	r6,-12(fp)
1000f37c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f380:	e13ffc17 	ldw	r4,-16(fp)
1000f384:	e17ffd17 	ldw	r5,-12(fp)
1000f388:	e1bffe17 	ldw	r6,-8(fp)
1000f38c:	000f5f80 	call	1000f5f8 <open>
1000f390:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f394:	e0bffa17 	ldw	r2,-24(fp)
1000f398:	10002216 	blt	r2,zero,1000f424 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f39c:	04040074 	movhi	r16,4097
1000f3a0:	8404e404 	addi	r16,r16,5008
1000f3a4:	e0bffa17 	ldw	r2,-24(fp)
1000f3a8:	1009883a 	mov	r4,r2
1000f3ac:	01400304 	movi	r5,12
1000f3b0:	000103c0 	call	1000103c <__mulsi3>
1000f3b4:	8085883a 	add	r2,r16,r2
1000f3b8:	10c00017 	ldw	r3,0(r2)
1000f3bc:	e0bffb17 	ldw	r2,-20(fp)
1000f3c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f3c4:	04040074 	movhi	r16,4097
1000f3c8:	8404e404 	addi	r16,r16,5008
1000f3cc:	e0bffa17 	ldw	r2,-24(fp)
1000f3d0:	1009883a 	mov	r4,r2
1000f3d4:	01400304 	movi	r5,12
1000f3d8:	000103c0 	call	1000103c <__mulsi3>
1000f3dc:	8085883a 	add	r2,r16,r2
1000f3e0:	10800104 	addi	r2,r2,4
1000f3e4:	10c00017 	ldw	r3,0(r2)
1000f3e8:	e0bffb17 	ldw	r2,-20(fp)
1000f3ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f3f0:	04040074 	movhi	r16,4097
1000f3f4:	8404e404 	addi	r16,r16,5008
1000f3f8:	e0bffa17 	ldw	r2,-24(fp)
1000f3fc:	1009883a 	mov	r4,r2
1000f400:	01400304 	movi	r5,12
1000f404:	000103c0 	call	1000103c <__mulsi3>
1000f408:	8085883a 	add	r2,r16,r2
1000f40c:	10800204 	addi	r2,r2,8
1000f410:	10c00017 	ldw	r3,0(r2)
1000f414:	e0bffb17 	ldw	r2,-20(fp)
1000f418:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f41c:	e13ffa17 	ldw	r4,-24(fp)
1000f420:	000dfe80 	call	1000dfe8 <alt_release_fd>
  }
} 
1000f424:	e6ffff04 	addi	sp,fp,-4
1000f428:	dfc00217 	ldw	ra,8(sp)
1000f42c:	df000117 	ldw	fp,4(sp)
1000f430:	dc000017 	ldw	r16,0(sp)
1000f434:	dec00304 	addi	sp,sp,12
1000f438:	f800283a 	ret

1000f43c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f43c:	defffb04 	addi	sp,sp,-20
1000f440:	dfc00415 	stw	ra,16(sp)
1000f444:	df000315 	stw	fp,12(sp)
1000f448:	df000304 	addi	fp,sp,12
1000f44c:	e13ffd15 	stw	r4,-12(fp)
1000f450:	e17ffe15 	stw	r5,-8(fp)
1000f454:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f458:	01040074 	movhi	r4,4097
1000f45c:	2104e704 	addi	r4,r4,5020
1000f460:	e17ffd17 	ldw	r5,-12(fp)
1000f464:	01800044 	movi	r6,1
1000f468:	01c07fc4 	movi	r7,511
1000f46c:	000f35c0 	call	1000f35c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f470:	01040074 	movhi	r4,4097
1000f474:	2104e404 	addi	r4,r4,5008
1000f478:	e17ffe17 	ldw	r5,-8(fp)
1000f47c:	000d883a 	mov	r6,zero
1000f480:	01c07fc4 	movi	r7,511
1000f484:	000f35c0 	call	1000f35c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f488:	01040074 	movhi	r4,4097
1000f48c:	2104ea04 	addi	r4,r4,5032
1000f490:	e17fff17 	ldw	r5,-4(fp)
1000f494:	01800044 	movi	r6,1
1000f498:	01c07fc4 	movi	r7,511
1000f49c:	000f35c0 	call	1000f35c <alt_open_fd>
}  
1000f4a0:	e037883a 	mov	sp,fp
1000f4a4:	dfc00117 	ldw	ra,4(sp)
1000f4a8:	df000017 	ldw	fp,0(sp)
1000f4ac:	dec00204 	addi	sp,sp,8
1000f4b0:	f800283a 	ret

1000f4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f4b4:	defffe04 	addi	sp,sp,-8
1000f4b8:	dfc00115 	stw	ra,4(sp)
1000f4bc:	df000015 	stw	fp,0(sp)
1000f4c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4c4:	00840074 	movhi	r2,4097
1000f4c8:	10896704 	addi	r2,r2,9628
1000f4cc:	10800017 	ldw	r2,0(r2)
1000f4d0:	10000526 	beq	r2,zero,1000f4e8 <alt_get_errno+0x34>
1000f4d4:	00840074 	movhi	r2,4097
1000f4d8:	10896704 	addi	r2,r2,9628
1000f4dc:	10800017 	ldw	r2,0(r2)
1000f4e0:	103ee83a 	callr	r2
1000f4e4:	00000206 	br	1000f4f0 <alt_get_errno+0x3c>
1000f4e8:	00840074 	movhi	r2,4097
1000f4ec:	1091bc04 	addi	r2,r2,18160
}
1000f4f0:	e037883a 	mov	sp,fp
1000f4f4:	dfc00117 	ldw	ra,4(sp)
1000f4f8:	df000017 	ldw	fp,0(sp)
1000f4fc:	dec00204 	addi	sp,sp,8
1000f500:	f800283a 	ret

1000f504 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f504:	defffb04 	addi	sp,sp,-20
1000f508:	dfc00415 	stw	ra,16(sp)
1000f50c:	df000315 	stw	fp,12(sp)
1000f510:	dc000215 	stw	r16,8(sp)
1000f514:	df000304 	addi	fp,sp,12
1000f518:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f51c:	e0bffe17 	ldw	r2,-8(fp)
1000f520:	10800217 	ldw	r2,8(r2)
1000f524:	10d00034 	orhi	r3,r2,16384
1000f528:	e0bffe17 	ldw	r2,-8(fp)
1000f52c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f530:	e03ffd15 	stw	zero,-12(fp)
1000f534:	00002306 	br	1000f5c4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f538:	04040074 	movhi	r16,4097
1000f53c:	8404e404 	addi	r16,r16,5008
1000f540:	e0bffd17 	ldw	r2,-12(fp)
1000f544:	1009883a 	mov	r4,r2
1000f548:	01400304 	movi	r5,12
1000f54c:	000103c0 	call	1000103c <__mulsi3>
1000f550:	8085883a 	add	r2,r16,r2
1000f554:	10c00017 	ldw	r3,0(r2)
1000f558:	e0bffe17 	ldw	r2,-8(fp)
1000f55c:	10800017 	ldw	r2,0(r2)
1000f560:	1880151e 	bne	r3,r2,1000f5b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f564:	04040074 	movhi	r16,4097
1000f568:	8404e404 	addi	r16,r16,5008
1000f56c:	e0bffd17 	ldw	r2,-12(fp)
1000f570:	1009883a 	mov	r4,r2
1000f574:	01400304 	movi	r5,12
1000f578:	000103c0 	call	1000103c <__mulsi3>
1000f57c:	8085883a 	add	r2,r16,r2
1000f580:	10800204 	addi	r2,r2,8
1000f584:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f588:	10000b0e 	bge	r2,zero,1000f5b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f58c:	e13ffd17 	ldw	r4,-12(fp)
1000f590:	01400304 	movi	r5,12
1000f594:	000103c0 	call	1000103c <__mulsi3>
1000f598:	1007883a 	mov	r3,r2
1000f59c:	00840074 	movhi	r2,4097
1000f5a0:	1084e404 	addi	r2,r2,5008
1000f5a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f5a8:	e0bffe17 	ldw	r2,-8(fp)
1000f5ac:	18800226 	beq	r3,r2,1000f5b8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f5b0:	00bffcc4 	movi	r2,-13
1000f5b4:	00000a06 	br	1000f5e0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f5b8:	e0bffd17 	ldw	r2,-12(fp)
1000f5bc:	10800044 	addi	r2,r2,1
1000f5c0:	e0bffd15 	stw	r2,-12(fp)
1000f5c4:	00840074 	movhi	r2,4097
1000f5c8:	10896604 	addi	r2,r2,9624
1000f5cc:	10800017 	ldw	r2,0(r2)
1000f5d0:	1007883a 	mov	r3,r2
1000f5d4:	e0bffd17 	ldw	r2,-12(fp)
1000f5d8:	18bfd72e 	bgeu	r3,r2,1000f538 <__alt_data_end+0xf800f538>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f5dc:	0005883a 	mov	r2,zero
}
1000f5e0:	e6ffff04 	addi	sp,fp,-4
1000f5e4:	dfc00217 	ldw	ra,8(sp)
1000f5e8:	df000117 	ldw	fp,4(sp)
1000f5ec:	dc000017 	ldw	r16,0(sp)
1000f5f0:	dec00304 	addi	sp,sp,12
1000f5f4:	f800283a 	ret

1000f5f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f5f8:	defff604 	addi	sp,sp,-40
1000f5fc:	dfc00915 	stw	ra,36(sp)
1000f600:	df000815 	stw	fp,32(sp)
1000f604:	df000804 	addi	fp,sp,32
1000f608:	e13ffd15 	stw	r4,-12(fp)
1000f60c:	e17ffe15 	stw	r5,-8(fp)
1000f610:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f614:	00bfffc4 	movi	r2,-1
1000f618:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f61c:	00bffb44 	movi	r2,-19
1000f620:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f624:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f628:	e13ffd17 	ldw	r4,-12(fp)
1000f62c:	01440074 	movhi	r5,4097
1000f630:	29496404 	addi	r5,r5,9616
1000f634:	000f9140 	call	1000f914 <alt_find_dev>
1000f638:	e0bff815 	stw	r2,-32(fp)
1000f63c:	e0bff817 	ldw	r2,-32(fp)
1000f640:	1000051e 	bne	r2,zero,1000f658 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f644:	e13ffd17 	ldw	r4,-12(fp)
1000f648:	000f9a40 	call	1000f9a4 <alt_find_file>
1000f64c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f650:	00800044 	movi	r2,1
1000f654:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f658:	e0bff817 	ldw	r2,-32(fp)
1000f65c:	10002b26 	beq	r2,zero,1000f70c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f660:	e13ff817 	ldw	r4,-32(fp)
1000f664:	000fab80 	call	1000fab8 <alt_get_fd>
1000f668:	e0bff915 	stw	r2,-28(fp)
1000f66c:	e0bff917 	ldw	r2,-28(fp)
1000f670:	1000030e 	bge	r2,zero,1000f680 <open+0x88>
    {
      status = index;
1000f674:	e0bff917 	ldw	r2,-28(fp)
1000f678:	e0bffa15 	stw	r2,-24(fp)
1000f67c:	00002506 	br	1000f714 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f680:	e13ff917 	ldw	r4,-28(fp)
1000f684:	01400304 	movi	r5,12
1000f688:	000103c0 	call	1000103c <__mulsi3>
1000f68c:	1007883a 	mov	r3,r2
1000f690:	00840074 	movhi	r2,4097
1000f694:	1084e404 	addi	r2,r2,5008
1000f698:	1885883a 	add	r2,r3,r2
1000f69c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f6a0:	e0fffe17 	ldw	r3,-8(fp)
1000f6a4:	00900034 	movhi	r2,16384
1000f6a8:	10bfffc4 	addi	r2,r2,-1
1000f6ac:	1886703a 	and	r3,r3,r2
1000f6b0:	e0bffc17 	ldw	r2,-16(fp)
1000f6b4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f6b8:	e0bffb17 	ldw	r2,-20(fp)
1000f6bc:	1000051e 	bne	r2,zero,1000f6d4 <open+0xdc>
1000f6c0:	e13ffc17 	ldw	r4,-16(fp)
1000f6c4:	000f5040 	call	1000f504 <alt_file_locked>
1000f6c8:	e0bffa15 	stw	r2,-24(fp)
1000f6cc:	e0bffa17 	ldw	r2,-24(fp)
1000f6d0:	10001016 	blt	r2,zero,1000f714 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f6d4:	e0bff817 	ldw	r2,-32(fp)
1000f6d8:	10800317 	ldw	r2,12(r2)
1000f6dc:	10000826 	beq	r2,zero,1000f700 <open+0x108>
1000f6e0:	e0bff817 	ldw	r2,-32(fp)
1000f6e4:	10800317 	ldw	r2,12(r2)
1000f6e8:	e13ffc17 	ldw	r4,-16(fp)
1000f6ec:	e17ffd17 	ldw	r5,-12(fp)
1000f6f0:	e1bffe17 	ldw	r6,-8(fp)
1000f6f4:	e1ffff17 	ldw	r7,-4(fp)
1000f6f8:	103ee83a 	callr	r2
1000f6fc:	00000106 	br	1000f704 <open+0x10c>
1000f700:	0005883a 	mov	r2,zero
1000f704:	e0bffa15 	stw	r2,-24(fp)
1000f708:	00000206 	br	1000f714 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f70c:	00bffb44 	movi	r2,-19
1000f710:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f714:	e0bffa17 	ldw	r2,-24(fp)
1000f718:	1000090e 	bge	r2,zero,1000f740 <open+0x148>
  {
    alt_release_fd (index);  
1000f71c:	e13ff917 	ldw	r4,-28(fp)
1000f720:	000dfe80 	call	1000dfe8 <alt_release_fd>
    ALT_ERRNO = -status;
1000f724:	000f4b40 	call	1000f4b4 <alt_get_errno>
1000f728:	1007883a 	mov	r3,r2
1000f72c:	e0bffa17 	ldw	r2,-24(fp)
1000f730:	0085c83a 	sub	r2,zero,r2
1000f734:	18800015 	stw	r2,0(r3)
    return -1;
1000f738:	00bfffc4 	movi	r2,-1
1000f73c:	00000106 	br	1000f744 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
1000f740:	e0bff917 	ldw	r2,-28(fp)
}
1000f744:	e037883a 	mov	sp,fp
1000f748:	dfc00117 	ldw	ra,4(sp)
1000f74c:	df000017 	ldw	fp,0(sp)
1000f750:	dec00204 	addi	sp,sp,8
1000f754:	f800283a 	ret

1000f758 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f758:	defffa04 	addi	sp,sp,-24
1000f75c:	df000515 	stw	fp,20(sp)
1000f760:	df000504 	addi	fp,sp,20
1000f764:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f768:	0005303a 	rdctl	r2,status
1000f76c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f770:	e0fffc17 	ldw	r3,-16(fp)
1000f774:	00bfff84 	movi	r2,-2
1000f778:	1884703a 	and	r2,r3,r2
1000f77c:	1001703a 	wrctl	status,r2
  
  return context;
1000f780:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f784:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f788:	e0bfff17 	ldw	r2,-4(fp)
1000f78c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f790:	e0bffd17 	ldw	r2,-12(fp)
1000f794:	10800017 	ldw	r2,0(r2)
1000f798:	e0fffd17 	ldw	r3,-12(fp)
1000f79c:	18c00117 	ldw	r3,4(r3)
1000f7a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f7a4:	e0bffd17 	ldw	r2,-12(fp)
1000f7a8:	10800117 	ldw	r2,4(r2)
1000f7ac:	e0fffd17 	ldw	r3,-12(fp)
1000f7b0:	18c00017 	ldw	r3,0(r3)
1000f7b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f7b8:	e0bffd17 	ldw	r2,-12(fp)
1000f7bc:	e0fffd17 	ldw	r3,-12(fp)
1000f7c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f7c4:	e0bffd17 	ldw	r2,-12(fp)
1000f7c8:	e0fffd17 	ldw	r3,-12(fp)
1000f7cc:	10c00015 	stw	r3,0(r2)
1000f7d0:	e0bffb17 	ldw	r2,-20(fp)
1000f7d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f7d8:	e0bffe17 	ldw	r2,-8(fp)
1000f7dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f7e0:	e037883a 	mov	sp,fp
1000f7e4:	df000017 	ldw	fp,0(sp)
1000f7e8:	dec00104 	addi	sp,sp,4
1000f7ec:	f800283a 	ret

1000f7f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f7f0:	defffb04 	addi	sp,sp,-20
1000f7f4:	dfc00415 	stw	ra,16(sp)
1000f7f8:	df000315 	stw	fp,12(sp)
1000f7fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f800:	d0a00e17 	ldw	r2,-32712(gp)
1000f804:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f808:	d0a86617 	ldw	r2,-24168(gp)
1000f80c:	10800044 	addi	r2,r2,1
1000f810:	d0a86615 	stw	r2,-24168(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f814:	00002e06 	br	1000f8d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f818:	e0bffd17 	ldw	r2,-12(fp)
1000f81c:	10800017 	ldw	r2,0(r2)
1000f820:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f824:	e0bffd17 	ldw	r2,-12(fp)
1000f828:	10800403 	ldbu	r2,16(r2)
1000f82c:	10803fcc 	andi	r2,r2,255
1000f830:	10000426 	beq	r2,zero,1000f844 <alt_tick+0x54>
1000f834:	d0a86617 	ldw	r2,-24168(gp)
1000f838:	1000021e 	bne	r2,zero,1000f844 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f83c:	e0bffd17 	ldw	r2,-12(fp)
1000f840:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f844:	e0bffd17 	ldw	r2,-12(fp)
1000f848:	10800217 	ldw	r2,8(r2)
1000f84c:	d0e86617 	ldw	r3,-24168(gp)
1000f850:	18801d36 	bltu	r3,r2,1000f8c8 <alt_tick+0xd8>
1000f854:	e0bffd17 	ldw	r2,-12(fp)
1000f858:	10800403 	ldbu	r2,16(r2)
1000f85c:	10803fcc 	andi	r2,r2,255
1000f860:	1000191e 	bne	r2,zero,1000f8c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f864:	e0bffd17 	ldw	r2,-12(fp)
1000f868:	10800317 	ldw	r2,12(r2)
1000f86c:	e0fffd17 	ldw	r3,-12(fp)
1000f870:	18c00517 	ldw	r3,20(r3)
1000f874:	1809883a 	mov	r4,r3
1000f878:	103ee83a 	callr	r2
1000f87c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f880:	e0bfff17 	ldw	r2,-4(fp)
1000f884:	1000031e 	bne	r2,zero,1000f894 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f888:	e13ffd17 	ldw	r4,-12(fp)
1000f88c:	000f7580 	call	1000f758 <alt_alarm_stop>
1000f890:	00000d06 	br	1000f8c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f894:	e0bffd17 	ldw	r2,-12(fp)
1000f898:	10c00217 	ldw	r3,8(r2)
1000f89c:	e0bfff17 	ldw	r2,-4(fp)
1000f8a0:	1887883a 	add	r3,r3,r2
1000f8a4:	e0bffd17 	ldw	r2,-12(fp)
1000f8a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f8ac:	e0bffd17 	ldw	r2,-12(fp)
1000f8b0:	10c00217 	ldw	r3,8(r2)
1000f8b4:	d0a86617 	ldw	r2,-24168(gp)
1000f8b8:	1880032e 	bgeu	r3,r2,1000f8c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f8bc:	e0bffd17 	ldw	r2,-12(fp)
1000f8c0:	00c00044 	movi	r3,1
1000f8c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f8c8:	e0bffe17 	ldw	r2,-8(fp)
1000f8cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f8d0:	e0fffd17 	ldw	r3,-12(fp)
1000f8d4:	d0a00e04 	addi	r2,gp,-32712
1000f8d8:	18bfcf1e 	bne	r3,r2,1000f818 <__alt_data_end+0xf800f818>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f8dc:	0001883a 	nop
}
1000f8e0:	e037883a 	mov	sp,fp
1000f8e4:	dfc00117 	ldw	ra,4(sp)
1000f8e8:	df000017 	ldw	fp,0(sp)
1000f8ec:	dec00204 	addi	sp,sp,8
1000f8f0:	f800283a 	ret

1000f8f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
1000f8f4:	deffff04 	addi	sp,sp,-4
1000f8f8:	df000015 	stw	fp,0(sp)
1000f8fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f900:	000170fa 	wrctl	ienable,zero
}
1000f904:	e037883a 	mov	sp,fp
1000f908:	df000017 	ldw	fp,0(sp)
1000f90c:	dec00104 	addi	sp,sp,4
1000f910:	f800283a 	ret

1000f914 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000f914:	defffa04 	addi	sp,sp,-24
1000f918:	dfc00515 	stw	ra,20(sp)
1000f91c:	df000415 	stw	fp,16(sp)
1000f920:	df000404 	addi	fp,sp,16
1000f924:	e13ffe15 	stw	r4,-8(fp)
1000f928:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000f92c:	e0bfff17 	ldw	r2,-4(fp)
1000f930:	10800017 	ldw	r2,0(r2)
1000f934:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000f938:	e13ffe17 	ldw	r4,-8(fp)
1000f93c:	00012d00 	call	100012d0 <strlen>
1000f940:	10800044 	addi	r2,r2,1
1000f944:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f948:	00000d06 	br	1000f980 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000f94c:	e0bffc17 	ldw	r2,-16(fp)
1000f950:	10c00217 	ldw	r3,8(r2)
1000f954:	e0bffd17 	ldw	r2,-12(fp)
1000f958:	1809883a 	mov	r4,r3
1000f95c:	e17ffe17 	ldw	r5,-8(fp)
1000f960:	100d883a 	mov	r6,r2
1000f964:	000fbd80 	call	1000fbd8 <memcmp>
1000f968:	1000021e 	bne	r2,zero,1000f974 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000f96c:	e0bffc17 	ldw	r2,-16(fp)
1000f970:	00000706 	br	1000f990 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000f974:	e0bffc17 	ldw	r2,-16(fp)
1000f978:	10800017 	ldw	r2,0(r2)
1000f97c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f980:	e0fffc17 	ldw	r3,-16(fp)
1000f984:	e0bfff17 	ldw	r2,-4(fp)
1000f988:	18bff01e 	bne	r3,r2,1000f94c <__alt_data_end+0xf800f94c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000f98c:	0005883a 	mov	r2,zero
}
1000f990:	e037883a 	mov	sp,fp
1000f994:	dfc00117 	ldw	ra,4(sp)
1000f998:	df000017 	ldw	fp,0(sp)
1000f99c:	dec00204 	addi	sp,sp,8
1000f9a0:	f800283a 	ret

1000f9a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000f9a4:	defffb04 	addi	sp,sp,-20
1000f9a8:	dfc00415 	stw	ra,16(sp)
1000f9ac:	df000315 	stw	fp,12(sp)
1000f9b0:	df000304 	addi	fp,sp,12
1000f9b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000f9b8:	00840074 	movhi	r2,4097
1000f9bc:	10896204 	addi	r2,r2,9608
1000f9c0:	10800017 	ldw	r2,0(r2)
1000f9c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000f9c8:	00003106 	br	1000fa90 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1000f9cc:	e0bffd17 	ldw	r2,-12(fp)
1000f9d0:	10800217 	ldw	r2,8(r2)
1000f9d4:	1009883a 	mov	r4,r2
1000f9d8:	00012d00 	call	100012d0 <strlen>
1000f9dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000f9e0:	e0bffd17 	ldw	r2,-12(fp)
1000f9e4:	10c00217 	ldw	r3,8(r2)
1000f9e8:	e0bffe17 	ldw	r2,-8(fp)
1000f9ec:	10bfffc4 	addi	r2,r2,-1
1000f9f0:	1885883a 	add	r2,r3,r2
1000f9f4:	10800003 	ldbu	r2,0(r2)
1000f9f8:	10803fcc 	andi	r2,r2,255
1000f9fc:	1080201c 	xori	r2,r2,128
1000fa00:	10bfe004 	addi	r2,r2,-128
1000fa04:	10800bd8 	cmpnei	r2,r2,47
1000fa08:	1000031e 	bne	r2,zero,1000fa18 <alt_find_file+0x74>
    {
      len -= 1;
1000fa0c:	e0bffe17 	ldw	r2,-8(fp)
1000fa10:	10bfffc4 	addi	r2,r2,-1
1000fa14:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fa18:	e0bffe17 	ldw	r2,-8(fp)
1000fa1c:	e0ffff17 	ldw	r3,-4(fp)
1000fa20:	1885883a 	add	r2,r3,r2
1000fa24:	10800003 	ldbu	r2,0(r2)
1000fa28:	10803fcc 	andi	r2,r2,255
1000fa2c:	1080201c 	xori	r2,r2,128
1000fa30:	10bfe004 	addi	r2,r2,-128
1000fa34:	10800be0 	cmpeqi	r2,r2,47
1000fa38:	1000081e 	bne	r2,zero,1000fa5c <alt_find_file+0xb8>
1000fa3c:	e0bffe17 	ldw	r2,-8(fp)
1000fa40:	e0ffff17 	ldw	r3,-4(fp)
1000fa44:	1885883a 	add	r2,r3,r2
1000fa48:	10800003 	ldbu	r2,0(r2)
1000fa4c:	10803fcc 	andi	r2,r2,255
1000fa50:	1080201c 	xori	r2,r2,128
1000fa54:	10bfe004 	addi	r2,r2,-128
1000fa58:	10000a1e 	bne	r2,zero,1000fa84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1000fa5c:	e0bffd17 	ldw	r2,-12(fp)
1000fa60:	10c00217 	ldw	r3,8(r2)
1000fa64:	e0bffe17 	ldw	r2,-8(fp)
1000fa68:	1809883a 	mov	r4,r3
1000fa6c:	e17fff17 	ldw	r5,-4(fp)
1000fa70:	100d883a 	mov	r6,r2
1000fa74:	000fbd80 	call	1000fbd8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fa78:	1000021e 	bne	r2,zero,1000fa84 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000fa7c:	e0bffd17 	ldw	r2,-12(fp)
1000fa80:	00000806 	br	1000faa4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1000fa84:	e0bffd17 	ldw	r2,-12(fp)
1000fa88:	10800017 	ldw	r2,0(r2)
1000fa8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fa90:	e0fffd17 	ldw	r3,-12(fp)
1000fa94:	00840074 	movhi	r2,4097
1000fa98:	10896204 	addi	r2,r2,9608
1000fa9c:	18bfcb1e 	bne	r3,r2,1000f9cc <__alt_data_end+0xf800f9cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000faa0:	0005883a 	mov	r2,zero
}
1000faa4:	e037883a 	mov	sp,fp
1000faa8:	dfc00117 	ldw	ra,4(sp)
1000faac:	df000017 	ldw	fp,0(sp)
1000fab0:	dec00204 	addi	sp,sp,8
1000fab4:	f800283a 	ret

1000fab8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000fab8:	defffa04 	addi	sp,sp,-24
1000fabc:	dfc00515 	stw	ra,20(sp)
1000fac0:	df000415 	stw	fp,16(sp)
1000fac4:	dc000315 	stw	r16,12(sp)
1000fac8:	df000404 	addi	fp,sp,16
1000facc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000fad0:	00bffa04 	movi	r2,-24
1000fad4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fad8:	e03ffc15 	stw	zero,-16(fp)
1000fadc:	00002106 	br	1000fb64 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1000fae0:	04040074 	movhi	r16,4097
1000fae4:	8404e404 	addi	r16,r16,5008
1000fae8:	e0bffc17 	ldw	r2,-16(fp)
1000faec:	1009883a 	mov	r4,r2
1000faf0:	01400304 	movi	r5,12
1000faf4:	000103c0 	call	1000103c <__mulsi3>
1000faf8:	8085883a 	add	r2,r16,r2
1000fafc:	10800017 	ldw	r2,0(r2)
1000fb00:	1000151e 	bne	r2,zero,1000fb58 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1000fb04:	04040074 	movhi	r16,4097
1000fb08:	8404e404 	addi	r16,r16,5008
1000fb0c:	e0bffc17 	ldw	r2,-16(fp)
1000fb10:	1009883a 	mov	r4,r2
1000fb14:	01400304 	movi	r5,12
1000fb18:	000103c0 	call	1000103c <__mulsi3>
1000fb1c:	8085883a 	add	r2,r16,r2
1000fb20:	e0fffe17 	ldw	r3,-8(fp)
1000fb24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000fb28:	00840074 	movhi	r2,4097
1000fb2c:	10896604 	addi	r2,r2,9624
1000fb30:	10c00017 	ldw	r3,0(r2)
1000fb34:	e0bffc17 	ldw	r2,-16(fp)
1000fb38:	1880040e 	bge	r3,r2,1000fb4c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1000fb3c:	00840074 	movhi	r2,4097
1000fb40:	10896604 	addi	r2,r2,9624
1000fb44:	e0fffc17 	ldw	r3,-16(fp)
1000fb48:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1000fb4c:	e0bffc17 	ldw	r2,-16(fp)
1000fb50:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fb54:	00000606 	br	1000fb70 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fb58:	e0bffc17 	ldw	r2,-16(fp)
1000fb5c:	10800044 	addi	r2,r2,1
1000fb60:	e0bffc15 	stw	r2,-16(fp)
1000fb64:	e0bffc17 	ldw	r2,-16(fp)
1000fb68:	10800810 	cmplti	r2,r2,32
1000fb6c:	103fdc1e 	bne	r2,zero,1000fae0 <__alt_data_end+0xf800fae0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000fb70:	e0bffd17 	ldw	r2,-12(fp)
}
1000fb74:	e6ffff04 	addi	sp,fp,-4
1000fb78:	dfc00217 	ldw	ra,8(sp)
1000fb7c:	df000117 	ldw	fp,4(sp)
1000fb80:	dc000017 	ldw	r16,0(sp)
1000fb84:	dec00304 	addi	sp,sp,12
1000fb88:	f800283a 	ret

1000fb8c <atexit>:
1000fb8c:	200b883a 	mov	r5,r4
1000fb90:	000d883a 	mov	r6,zero
1000fb94:	0009883a 	mov	r4,zero
1000fb98:	000f883a 	mov	r7,zero
1000fb9c:	000fc541 	jmpi	1000fc54 <__register_exitproc>

1000fba0 <exit>:
1000fba0:	defffe04 	addi	sp,sp,-8
1000fba4:	000b883a 	mov	r5,zero
1000fba8:	dc000015 	stw	r16,0(sp)
1000fbac:	dfc00115 	stw	ra,4(sp)
1000fbb0:	2021883a 	mov	r16,r4
1000fbb4:	000fd680 	call	1000fd68 <__call_exitprocs>
1000fbb8:	00840074 	movhi	r2,4097
1000fbbc:	10895c04 	addi	r2,r2,9584
1000fbc0:	11000017 	ldw	r4,0(r2)
1000fbc4:	20800f17 	ldw	r2,60(r4)
1000fbc8:	10000126 	beq	r2,zero,1000fbd0 <exit+0x30>
1000fbcc:	103ee83a 	callr	r2
1000fbd0:	8009883a 	mov	r4,r16
1000fbd4:	000fefc0 	call	1000fefc <_exit>

1000fbd8 <memcmp>:
1000fbd8:	01c000c4 	movi	r7,3
1000fbdc:	3980192e 	bgeu	r7,r6,1000fc44 <memcmp+0x6c>
1000fbe0:	2144b03a 	or	r2,r4,r5
1000fbe4:	11c4703a 	and	r2,r2,r7
1000fbe8:	10000f26 	beq	r2,zero,1000fc28 <memcmp+0x50>
1000fbec:	20800003 	ldbu	r2,0(r4)
1000fbf0:	28c00003 	ldbu	r3,0(r5)
1000fbf4:	10c0151e 	bne	r2,r3,1000fc4c <memcmp+0x74>
1000fbf8:	31bfff84 	addi	r6,r6,-2
1000fbfc:	01ffffc4 	movi	r7,-1
1000fc00:	00000406 	br	1000fc14 <memcmp+0x3c>
1000fc04:	20800003 	ldbu	r2,0(r4)
1000fc08:	28c00003 	ldbu	r3,0(r5)
1000fc0c:	31bfffc4 	addi	r6,r6,-1
1000fc10:	10c00e1e 	bne	r2,r3,1000fc4c <memcmp+0x74>
1000fc14:	21000044 	addi	r4,r4,1
1000fc18:	29400044 	addi	r5,r5,1
1000fc1c:	31fff91e 	bne	r6,r7,1000fc04 <__alt_data_end+0xf800fc04>
1000fc20:	0005883a 	mov	r2,zero
1000fc24:	f800283a 	ret
1000fc28:	20c00017 	ldw	r3,0(r4)
1000fc2c:	28800017 	ldw	r2,0(r5)
1000fc30:	1880041e 	bne	r3,r2,1000fc44 <memcmp+0x6c>
1000fc34:	31bfff04 	addi	r6,r6,-4
1000fc38:	21000104 	addi	r4,r4,4
1000fc3c:	29400104 	addi	r5,r5,4
1000fc40:	39bff936 	bltu	r7,r6,1000fc28 <__alt_data_end+0xf800fc28>
1000fc44:	303fe91e 	bne	r6,zero,1000fbec <__alt_data_end+0xf800fbec>
1000fc48:	003ff506 	br	1000fc20 <__alt_data_end+0xf800fc20>
1000fc4c:	10c5c83a 	sub	r2,r2,r3
1000fc50:	f800283a 	ret

1000fc54 <__register_exitproc>:
1000fc54:	00840074 	movhi	r2,4097
1000fc58:	defffa04 	addi	sp,sp,-24
1000fc5c:	10895c04 	addi	r2,r2,9584
1000fc60:	dc000315 	stw	r16,12(sp)
1000fc64:	14000017 	ldw	r16,0(r2)
1000fc68:	dc400415 	stw	r17,16(sp)
1000fc6c:	dfc00515 	stw	ra,20(sp)
1000fc70:	80805217 	ldw	r2,328(r16)
1000fc74:	2023883a 	mov	r17,r4
1000fc78:	10003626 	beq	r2,zero,1000fd54 <__register_exitproc+0x100>
1000fc7c:	10c00117 	ldw	r3,4(r2)
1000fc80:	010007c4 	movi	r4,31
1000fc84:	20c00e16 	blt	r4,r3,1000fcc0 <__register_exitproc+0x6c>
1000fc88:	1a400044 	addi	r9,r3,1
1000fc8c:	8800211e 	bne	r17,zero,1000fd14 <__register_exitproc+0xc0>
1000fc90:	18c00084 	addi	r3,r3,2
1000fc94:	18c7883a 	add	r3,r3,r3
1000fc98:	18c7883a 	add	r3,r3,r3
1000fc9c:	12400115 	stw	r9,4(r2)
1000fca0:	10c7883a 	add	r3,r2,r3
1000fca4:	19400015 	stw	r5,0(r3)
1000fca8:	0005883a 	mov	r2,zero
1000fcac:	dfc00517 	ldw	ra,20(sp)
1000fcb0:	dc400417 	ldw	r17,16(sp)
1000fcb4:	dc000317 	ldw	r16,12(sp)
1000fcb8:	dec00604 	addi	sp,sp,24
1000fcbc:	f800283a 	ret
1000fcc0:	00800034 	movhi	r2,0
1000fcc4:	10800004 	addi	r2,r2,0
1000fcc8:	10002526 	beq	r2,zero,1000fd60 <__register_exitproc+0x10c>
1000fccc:	01006404 	movi	r4,400
1000fcd0:	d9400015 	stw	r5,0(sp)
1000fcd4:	d9800115 	stw	r6,4(sp)
1000fcd8:	d9c00215 	stw	r7,8(sp)
1000fcdc:	00000000 	call	10000000 <__alt_mem_sdram>
1000fce0:	d9400017 	ldw	r5,0(sp)
1000fce4:	d9800117 	ldw	r6,4(sp)
1000fce8:	d9c00217 	ldw	r7,8(sp)
1000fcec:	10001c26 	beq	r2,zero,1000fd60 <__register_exitproc+0x10c>
1000fcf0:	80c05217 	ldw	r3,328(r16)
1000fcf4:	10000115 	stw	zero,4(r2)
1000fcf8:	02400044 	movi	r9,1
1000fcfc:	10c00015 	stw	r3,0(r2)
1000fd00:	80805215 	stw	r2,328(r16)
1000fd04:	10006215 	stw	zero,392(r2)
1000fd08:	10006315 	stw	zero,396(r2)
1000fd0c:	0007883a 	mov	r3,zero
1000fd10:	883fdf26 	beq	r17,zero,1000fc90 <__alt_data_end+0xf800fc90>
1000fd14:	18d1883a 	add	r8,r3,r3
1000fd18:	4211883a 	add	r8,r8,r8
1000fd1c:	1211883a 	add	r8,r2,r8
1000fd20:	41802215 	stw	r6,136(r8)
1000fd24:	01000044 	movi	r4,1
1000fd28:	11806217 	ldw	r6,392(r2)
1000fd2c:	20c8983a 	sll	r4,r4,r3
1000fd30:	310cb03a 	or	r6,r6,r4
1000fd34:	11806215 	stw	r6,392(r2)
1000fd38:	41c04215 	stw	r7,264(r8)
1000fd3c:	01800084 	movi	r6,2
1000fd40:	89bfd31e 	bne	r17,r6,1000fc90 <__alt_data_end+0xf800fc90>
1000fd44:	11806317 	ldw	r6,396(r2)
1000fd48:	3108b03a 	or	r4,r6,r4
1000fd4c:	11006315 	stw	r4,396(r2)
1000fd50:	003fcf06 	br	1000fc90 <__alt_data_end+0xf800fc90>
1000fd54:	80805304 	addi	r2,r16,332
1000fd58:	80805215 	stw	r2,328(r16)
1000fd5c:	003fc706 	br	1000fc7c <__alt_data_end+0xf800fc7c>
1000fd60:	00bfffc4 	movi	r2,-1
1000fd64:	003fd106 	br	1000fcac <__alt_data_end+0xf800fcac>

1000fd68 <__call_exitprocs>:
1000fd68:	00840074 	movhi	r2,4097
1000fd6c:	10895c04 	addi	r2,r2,9584
1000fd70:	10800017 	ldw	r2,0(r2)
1000fd74:	defff404 	addi	sp,sp,-48
1000fd78:	dd800815 	stw	r22,32(sp)
1000fd7c:	d8800015 	stw	r2,0(sp)
1000fd80:	10805204 	addi	r2,r2,328
1000fd84:	dd000615 	stw	r20,24(sp)
1000fd88:	dc800415 	stw	r18,16(sp)
1000fd8c:	dfc00b15 	stw	ra,44(sp)
1000fd90:	df000a15 	stw	fp,40(sp)
1000fd94:	ddc00915 	stw	r23,36(sp)
1000fd98:	dd400715 	stw	r21,28(sp)
1000fd9c:	dcc00515 	stw	r19,20(sp)
1000fda0:	dc400315 	stw	r17,12(sp)
1000fda4:	dc000215 	stw	r16,8(sp)
1000fda8:	2025883a 	mov	r18,r4
1000fdac:	2829883a 	mov	r20,r5
1000fdb0:	d8800115 	stw	r2,4(sp)
1000fdb4:	05bfffc4 	movi	r22,-1
1000fdb8:	d8800017 	ldw	r2,0(sp)
1000fdbc:	14c05217 	ldw	r19,328(r2)
1000fdc0:	98001d26 	beq	r19,zero,1000fe38 <__call_exitprocs+0xd0>
1000fdc4:	dd400117 	ldw	r21,4(sp)
1000fdc8:	98800117 	ldw	r2,4(r19)
1000fdcc:	173fffc4 	addi	fp,r2,-1
1000fdd0:	e0000d16 	blt	fp,zero,1000fe08 <__call_exitprocs+0xa0>
1000fdd4:	14000044 	addi	r16,r2,1
1000fdd8:	8421883a 	add	r16,r16,r16
1000fddc:	8421883a 	add	r16,r16,r16
1000fde0:	84402004 	addi	r17,r16,128
1000fde4:	9c63883a 	add	r17,r19,r17
1000fde8:	9c21883a 	add	r16,r19,r16
1000fdec:	a0001e26 	beq	r20,zero,1000fe68 <__call_exitprocs+0x100>
1000fdf0:	80804017 	ldw	r2,256(r16)
1000fdf4:	15001c26 	beq	r2,r20,1000fe68 <__call_exitprocs+0x100>
1000fdf8:	e73fffc4 	addi	fp,fp,-1
1000fdfc:	843fff04 	addi	r16,r16,-4
1000fe00:	8c7fff04 	addi	r17,r17,-4
1000fe04:	e5bff91e 	bne	fp,r22,1000fdec <__alt_data_end+0xf800fdec>
1000fe08:	00800034 	movhi	r2,0
1000fe0c:	10800004 	addi	r2,r2,0
1000fe10:	10000926 	beq	r2,zero,1000fe38 <__call_exitprocs+0xd0>
1000fe14:	98800117 	ldw	r2,4(r19)
1000fe18:	1000311e 	bne	r2,zero,1000fee0 <__call_exitprocs+0x178>
1000fe1c:	98800017 	ldw	r2,0(r19)
1000fe20:	10003426 	beq	r2,zero,1000fef4 <__call_exitprocs+0x18c>
1000fe24:	9809883a 	mov	r4,r19
1000fe28:	a8800015 	stw	r2,0(r21)
1000fe2c:	00000000 	call	10000000 <__alt_mem_sdram>
1000fe30:	acc00017 	ldw	r19,0(r21)
1000fe34:	983fe41e 	bne	r19,zero,1000fdc8 <__alt_data_end+0xf800fdc8>
1000fe38:	dfc00b17 	ldw	ra,44(sp)
1000fe3c:	df000a17 	ldw	fp,40(sp)
1000fe40:	ddc00917 	ldw	r23,36(sp)
1000fe44:	dd800817 	ldw	r22,32(sp)
1000fe48:	dd400717 	ldw	r21,28(sp)
1000fe4c:	dd000617 	ldw	r20,24(sp)
1000fe50:	dcc00517 	ldw	r19,20(sp)
1000fe54:	dc800417 	ldw	r18,16(sp)
1000fe58:	dc400317 	ldw	r17,12(sp)
1000fe5c:	dc000217 	ldw	r16,8(sp)
1000fe60:	dec00c04 	addi	sp,sp,48
1000fe64:	f800283a 	ret
1000fe68:	98800117 	ldw	r2,4(r19)
1000fe6c:	80c00017 	ldw	r3,0(r16)
1000fe70:	10bfffc4 	addi	r2,r2,-1
1000fe74:	17001526 	beq	r2,fp,1000fecc <__call_exitprocs+0x164>
1000fe78:	80000015 	stw	zero,0(r16)
1000fe7c:	183fde26 	beq	r3,zero,1000fdf8 <__alt_data_end+0xf800fdf8>
1000fe80:	00800044 	movi	r2,1
1000fe84:	1708983a 	sll	r4,r2,fp
1000fe88:	98806217 	ldw	r2,392(r19)
1000fe8c:	9dc00117 	ldw	r23,4(r19)
1000fe90:	2084703a 	and	r2,r4,r2
1000fe94:	1000061e 	bne	r2,zero,1000feb0 <__call_exitprocs+0x148>
1000fe98:	183ee83a 	callr	r3
1000fe9c:	98800117 	ldw	r2,4(r19)
1000fea0:	15ffc51e 	bne	r2,r23,1000fdb8 <__alt_data_end+0xf800fdb8>
1000fea4:	a8800017 	ldw	r2,0(r21)
1000fea8:	14ffd326 	beq	r2,r19,1000fdf8 <__alt_data_end+0xf800fdf8>
1000feac:	003fc206 	br	1000fdb8 <__alt_data_end+0xf800fdb8>
1000feb0:	98806317 	ldw	r2,396(r19)
1000feb4:	2084703a 	and	r2,r4,r2
1000feb8:	1000061e 	bne	r2,zero,1000fed4 <__call_exitprocs+0x16c>
1000febc:	89400017 	ldw	r5,0(r17)
1000fec0:	9009883a 	mov	r4,r18
1000fec4:	183ee83a 	callr	r3
1000fec8:	003ff406 	br	1000fe9c <__alt_data_end+0xf800fe9c>
1000fecc:	9f000115 	stw	fp,4(r19)
1000fed0:	003fea06 	br	1000fe7c <__alt_data_end+0xf800fe7c>
1000fed4:	89000017 	ldw	r4,0(r17)
1000fed8:	183ee83a 	callr	r3
1000fedc:	003fef06 	br	1000fe9c <__alt_data_end+0xf800fe9c>
1000fee0:	98800017 	ldw	r2,0(r19)
1000fee4:	982b883a 	mov	r21,r19
1000fee8:	1027883a 	mov	r19,r2
1000feec:	983fb61e 	bne	r19,zero,1000fdc8 <__alt_data_end+0xf800fdc8>
1000fef0:	003fd106 	br	1000fe38 <__alt_data_end+0xf800fe38>
1000fef4:	0005883a 	mov	r2,zero
1000fef8:	003ffa06 	br	1000fee4 <__alt_data_end+0xf800fee4>

1000fefc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000fefc:	defffd04 	addi	sp,sp,-12
1000ff00:	df000215 	stw	fp,8(sp)
1000ff04:	df000204 	addi	fp,sp,8
1000ff08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000ff0c:	0001883a 	nop
1000ff10:	e0bfff17 	ldw	r2,-4(fp)
1000ff14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000ff18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000ff1c:	10000226 	beq	r2,zero,1000ff28 <_exit+0x2c>
    ALT_SIM_FAIL();
1000ff20:	002af070 	cmpltui	zero,zero,43969
1000ff24:	00000106 	br	1000ff2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000ff28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000ff2c:	003fff06 	br	1000ff2c <__alt_data_end+0xf800ff2c>
